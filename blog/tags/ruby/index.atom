<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged ruby</title>
<link href="http://cynic.cc/blog//tags/ruby/"/>
<link href="http://cynic.cc/blog//tags/ruby/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Rogério Brito's Digital Junkyard</name>

</author>




<id>http://cynic.cc/blog//tags/ruby/</id>

<subtitle type="html">Rogério Brito&#39;s Digital Junkyard</subtitle>
<generator uri="http://ikiwiki.info/">ikiwiki</generator>
<updated>2013-07-21T01:10:52Z</updated>
<entry>
	<title>Beginning Ruby</title>

	<id>http://cynic.cc/blog//posts/beginning_ruby/</id>

	<link href="http://cynic.cc/blog//posts/beginning_ruby/"/>






	<category term="debian" />

	<category term="free-software" />

	<category term="ruby" />

	<category term="study" />


	<updated>2013-07-21T01:10:52Z</updated>
	<published>2013-07-21T00:50:00Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;These are some very rough/sketchy notes that I took while doing the
exercises on the introductory track of the Ruby language at
&lt;a href=&quot;http://www.codeacademy.com/&quot;&gt;codeacademy&lt;/a&gt;.  They were written from the point-of-view of an amateur
programmer in C and Python (read: &quot;me&quot;).&lt;/p&gt;

&lt;p&gt;Since this is my first time with Ruby and I only have about 1 week of
experience with it, these notes are likely to contain many mistakes, many
simplifications, many omissions or simply gross errors.  I would love to be
informed of such facts so that I can fix them and not write code that is
burdensome for others to maintain.&lt;/p&gt;

&lt;h1&gt;Operators&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Math operators: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt; (just like Python)&lt;/li&gt;
&lt;li&gt;Relational operators: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; (just like other
languages)&lt;/li&gt;
&lt;li&gt;Boolean operators: &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt; (just like C/C++/Perl)&lt;/li&gt;
&lt;li&gt;The combined comparison operator (&quot;spaceship operator&quot;, like Perl): &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;
(follows the spirit of what &lt;code&gt;strcmp&lt;/code&gt; in C does)&lt;/li&gt;
&lt;li&gt;Conditional assignment operator (&lt;code&gt;||=&lt;/code&gt;) only assigns a value to a variable
if that variable is bound to &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Numbers&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You can write number literals embedding an underscore (&lt;code&gt;_&lt;/code&gt;) for
readability purposes.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Basic I/O&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Output: &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;puts&lt;/code&gt;. Both print strings to stdout, but &lt;code&gt;puts&lt;/code&gt; also
appends a new line to the end.&lt;/li&gt;
&lt;li&gt;Input: &lt;code&gt;gets&lt;/code&gt; accepts an input from stdin and returns a string.&lt;/li&gt;
&lt;li&gt;To convert a string &lt;code&gt;foo&lt;/code&gt; to an integer, use the &lt;code&gt;Integer(foo)&lt;/code&gt;
constructor. It throws an exception if it cannot convert the value.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Strings&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Strings have at least some methods: &lt;code&gt;.length&lt;/code&gt;, &lt;code&gt;.reverse&lt;/code&gt;, &lt;code&gt;.upcase&lt;/code&gt;,
&lt;code&gt;.downcase&lt;/code&gt;, &lt;code&gt;.capitalize&lt;/code&gt;, &lt;code&gt;.chomp&lt;/code&gt; (like Perl, removes the trailing
endline)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.upcase&lt;/code&gt; seems to have problems with non-ASCII characters, like &lt;code&gt;é&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Interpolation is performed by putting the name &lt;code&gt;name&lt;/code&gt; of the variable
inside a string and delimited as &lt;code&gt;#{name}&lt;/code&gt; at the place we want the
interpolation to occur.&lt;/li&gt;
&lt;li&gt;Methods like &lt;code&gt;.capitalize&lt;/code&gt; don&#39;t change the string (they return a new
string capitalized).  To change the string, you call the method
&lt;code&gt;.capitalize!&lt;/code&gt; (with a &lt;code&gt;!&lt;/code&gt; at the end of the name of the method).&lt;/li&gt;
&lt;li&gt;Other useful methods: &lt;code&gt;.gsub&lt;/code&gt; for globally substituting a regular
expression (and its variant &lt;code&gt;.gsub!&lt;/code&gt; for inplace modification), and
&lt;code&gt;.include?&lt;/code&gt; to verify if the first string includes another.&lt;/li&gt;
&lt;li&gt;Another method: &lt;code&gt;.split(&quot; &quot;)&lt;/code&gt;, to split on the string specified as
argument.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Control flow&lt;/h1&gt;

&lt;h2&gt;If&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The syntax of a &lt;code&gt;if&lt;/code&gt; is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  if expression1
    block1
  elsif expression2
    block2
  else
    block3
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;note that it ends with the word &lt;code&gt;end&lt;/code&gt;, there are no need for parentheses, no
braces, no colons, and the keyword for &quot;else if&quot; is &lt;code&gt;elsif&lt;/code&gt; (different
from Python&#39;s &lt;code&gt;elif&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The &quot;&lt;code&gt;if&lt;/code&gt;&quot; can also be started with the keyword &lt;code&gt;unless&lt;/code&gt; instead, which
checks if the expression is false rather than true (as is the case of
&lt;code&gt;if&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;While&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The syntax of the &lt;code&gt;while&lt;/code&gt; is similar to other languages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  while condition
    block
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A variation of the &lt;code&gt;while&lt;/code&gt; is the &lt;code&gt;until&lt;/code&gt;, with the same syntax, except
for the &lt;code&gt;until&lt;/code&gt; in place of the while, and that it iterates when the
condition is false, instead of true.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;For&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The simple case of iterating over a range of numbers is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  for i in 1...10
    block
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; Like ranges in Python, the 10 is not included (the variable &lt;code&gt;i&lt;/code&gt; iterates
 from 1 to 9).&lt;/p&gt;

&lt;p&gt; For an &lt;em&gt;inclusive&lt;/em&gt; range, we use two dots (&lt;code&gt;1..10&lt;/code&gt;), instead of three
 dots (&lt;code&gt;1...3&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Loop&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To iterate a block, we can use the &lt;code&gt;loop&lt;/code&gt; keyword, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  loop { block } # with braces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or as in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  loop do # note the pair do/end in place of braces
    block
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is useful to use &lt;code&gt;break&lt;/code&gt; when using loop to break out of the infinite
iterations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Similarly, we can use &lt;code&gt;next&lt;/code&gt; as in other languages (the same as &lt;code&gt;continue&lt;/code&gt;
in C or C++).&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Arrays&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The equivalent to Python&#39;s lists are arrays and they are declared in the
same fashion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my_array = [1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrays in Ruby are 0-based.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every array has an iterator called the &lt;code&gt;.each&lt;/code&gt; method. The basic syntax
is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  object.each { |item| block } # do something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which can be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  object.each do |item| block end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the name between &lt;code&gt;| |&lt;/code&gt; is bound to (a copy of?) each element of
&lt;code&gt;object&lt;/code&gt; in turn. The equivalent in Python would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  for item in object:
    block
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrays can be sorted with the &lt;code&gt;.sort&lt;/code&gt; method (or its sibling &lt;code&gt;.sort!&lt;/code&gt;).
When passing a parameter, it is useful to use the spaceship operator
(&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;) (like Perl) to specify a custom order (similar in spirit to what
we do with Python&#39;s &lt;code&gt;key&lt;/code&gt; argument to the &lt;code&gt;sort&lt;/code&gt; method of a list).
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my_array.sort! {|a, b| a &amp;lt;=&amp;gt; b} # Ascending order
   my_array.sort! {|a, b| b &amp;lt;=&amp;gt; a} # Descending order
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;.push&lt;/code&gt; method appends an element to an Array (similar to Python&#39;s
&lt;code&gt;.append&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The empty Array is denoted by &lt;code&gt;[]&lt;/code&gt;, like an empty list in Python.&lt;/li&gt;
&lt;li&gt;An iterator (like &lt;code&gt;(1..10)&lt;/code&gt;) can be converted to an array with the &lt;code&gt;.to_a&lt;/code&gt;
method.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Hashes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A literal hash is defined by the syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my_hash = {
      &quot;key1&quot; =&amp;gt; &quot;abc&quot;,
      &quot;key2&quot; =&amp;gt; 2,
      &quot;key3&quot; =&amp;gt; false
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite similar to the version in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my_hash = {
      &quot;key1&quot;: &quot;abc&quot;,
      &quot;key2&quot;: 2,
      &quot;key3&quot;: False
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, in Ruby 1.9, you can write, instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my_hash = {
      key1: &quot;abc&quot;,
      key2: 2,
      key3: false
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is very similar to Python or JSON.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The empty hash, OTOH, is defined by calling the constructor &lt;code&gt;.new&lt;/code&gt; of the
class &lt;code&gt;Hash&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my_hash = Hash.new
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax used by Python can also be used: &lt;code&gt;my_hash = {}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Iterating over a hash is done the same way as done for an array, but the
&lt;code&gt;.each&lt;/code&gt; method gives &lt;em&gt;both&lt;/em&gt; the key &lt;em&gt;and&lt;/em&gt; the value, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my_hash.each do |k, v|
    puts &quot;#{k}: #{v}&quot;
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To iterate only on keys, we use the method &lt;code&gt;.each_key&lt;/code&gt;. To iterate only on
values, we use the method &lt;code&gt;.each_value&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;A hash can be sorted with the &lt;code&gt;.sort_by&lt;/code&gt; method (to sort by keys, values
or any expression involving them) and since it can be ordered, we can
reverse (in-place) the order of its elements with the &lt;code&gt;.reverse!&lt;/code&gt; method.
This makes Ruby&#39;s hashes to &quot;taste&quot; like Python&#39;s &lt;code&gt;OrderedDict&lt;/code&gt;&#39;s.&lt;/li&gt;
&lt;li&gt;When one initializes a hash, one can specify a default value to the &lt;code&gt;.new&lt;/code&gt;
method (e.g., &lt;code&gt;foo = Hash.new(0)&lt;/code&gt;), which makes it convenient to do the
equivalent of Python&#39;s &lt;code&gt;defaultdict&lt;/code&gt; or &lt;code&gt;Counter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can select part of a hash by using the &lt;code&gt;.select&lt;/code&gt; method and giving it
a block. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  good_movies = movie_ratings.select{|k, v| v &amp;gt; 3}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Functions/methods&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Functions in Ruby are defined with the word &lt;code&gt;def&lt;/code&gt; (as in Python) and end
with the word &lt;code&gt;end&lt;/code&gt;, as other composite constructs. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def square(n)
    return n*n
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Parentheses are optional in Ruby, unless they create ambiguity. So, to
call the function above one can use any of the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  square(2)
  square 2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A function can take a block as a parameter (and this is what &lt;code&gt;.each&lt;/code&gt; does,
for instance).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Functions can take a variable number of elements with the &lt;em&gt;splash&lt;/em&gt;
operator (denoted by &lt;code&gt;*&lt;/code&gt;), which puts the extra parameters in an Array
(like Python).&lt;/li&gt;
&lt;li&gt;Functions can have default parameters, which are set in the &quot;prototype&quot;,
just like in Python or C++.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;return&lt;/code&gt; keyword is omitted from the method, Ruby uses an implicit
return, where the value of the last executed expression is returned to the
caller of the method.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Symbols&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Any instances of a given symbol share the same ID. This is due to the fact
that they are immutable.&lt;/li&gt;
&lt;li&gt;Symbols start with a colon (&lt;code&gt;:&lt;/code&gt;) and they can contain any character that
is valid for a variable name.&lt;/li&gt;
&lt;li&gt;It is possible to convert between a symbol and a string with the methods
&lt;code&gt;.to_s&lt;/code&gt; and &lt;code&gt;.to_sym&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Comments&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Single line comments use the hash symbol (&lt;code&gt;#&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Ruby also has multiline comments, which are delimited by a line beginning
with &lt;code&gt;=begin&lt;/code&gt; and a line beginning with &lt;code&gt;=end&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Lambda functions&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A lambda function in Ruby is defined, as expected, as, for example:&lt;/p&gt;

&lt;p&gt;  foo = lambda { |x| x.to_sym }&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The basic differences between a lambda and a proc is that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A lambda checks the number of elements that it receives, while a proc
doesn&#39;t and assigns &lt;code&gt;nil&lt;/code&gt; to parameters that it didn&#39;t receive (a proc
seems to ignore extra parameter that it wasn&#39;t expecting).&lt;/li&gt;
&lt;li&gt;When a lambda returns, the control goes back to the function that called
the lambda, while when a proc returns, the control is returned &lt;em&gt;also&lt;/em&gt;
from the function that called the proc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Classes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&quot;Everything is an object in Ruby.&quot; (At least one exception are blocks).&lt;/li&gt;
&lt;li&gt;To test if an object is of a given class, you use the method &lt;code&gt;.is_a?&lt;/code&gt; on
the object and the type as argument (e.g., &lt;code&gt;foo.is_a? Integer&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The &quot;null&quot; value in Ruby is &lt;code&gt;nil&lt;/code&gt;. It is equivalent to &lt;code&gt;None&lt;/code&gt; in Python.&lt;/li&gt;
&lt;li&gt;The only &quot;falsy&quot; values in Ruby are &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;. The others are
&quot;truthy&quot;, differently from C/C++/Perl/Python.&lt;/li&gt;
&lt;li&gt;For a given object, the method &lt;code&gt;.object_id&lt;/code&gt; returns what is the &quot;address&quot;
of that object.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Classes in Ruby are created with the syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  class ClassExample
      # body
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(That is for a class that has is not derived from other regular classes).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Constructors in Ruby are called &lt;code&gt;initialize&lt;/code&gt;. An instance of a class is
created by calling the method &lt;code&gt;.new&lt;/code&gt; on the class name (and passing
parameters as needed for the &lt;code&gt;initialize&lt;/code&gt; method).&lt;/li&gt;
&lt;li&gt;Instance variables are named with 1 at sign (&lt;code&gt;@&lt;/code&gt;) as a prefix. Class
variables are named with 2 at signs (&lt;code&gt;@@&lt;/code&gt;) as a prefix. Global variables
are named with a dollar sign (&lt;code&gt;$&lt;/code&gt;) as a prefix.&lt;/li&gt;
&lt;li&gt;Class methods are declared inside a class prefixed with &lt;code&gt;self.&lt;/code&gt; and they
are called with the class name suffixed with the name of the method. For
example, for a class &lt;code&gt;MyClass&lt;/code&gt;, with a class method &lt;code&gt;class_method&lt;/code&gt;, we
call it as &lt;code&gt;MyClass.class_method&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When overriding a method in a subclass, one can call the method from the
parent class with the keyword &lt;code&gt;super&lt;/code&gt;, as in &lt;code&gt;super(arg1, arg2)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ruby doesn&#39;t support multiple inheritance. In place of multiple
inheritance, Ruby offers mixins.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To access one attribute, say &lt;code&gt;@my_attrib&lt;/code&gt;, in Ruby classes, one usually
creates two methods to manipulate it: a method with the name &lt;code&gt;my_attrib&lt;/code&gt;,
that returns the value of &lt;code&gt;@my_attrib&lt;/code&gt; (a getter) and a method with the
name &lt;code&gt;my_attrib=&lt;/code&gt; that accepts a parameter to set &lt;code&gt;@my_attrib&lt;/code&gt; to (a
setter).&lt;/p&gt;

&lt;p&gt;There is syntatic sugar for creating both getters or setters.&lt;/p&gt;

&lt;p&gt;For a getter, you declare &lt;code&gt;attr_reader :my_attrib&lt;/code&gt; (the member name as a
symbol).&lt;/p&gt;

&lt;p&gt;For a setter, you declare &lt;code&gt;attr_writer :my_attrib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you need both a getter and a setter, then you can abbreviate them with
&lt;code&gt;attr_accessor&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;All methods, by default, are public in Ruby. To explicitly mark something
as public, you use the keyword &lt;code&gt;public&lt;/code&gt;. To mark something as private, you
use the keyword &lt;code&gt;private&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Modules&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You can import a module with the keyword &lt;code&gt;require&lt;/code&gt; (as in Perl) and the
name of the module in quotes.&lt;/li&gt;
&lt;li&gt;One example of a module is the &lt;code&gt;benchmark&lt;/code&gt; module, which provides the
&lt;code&gt;Benchmark&lt;/code&gt; class, which has the method &lt;code&gt;.realtime&lt;/code&gt;, which takes a block
and reports how much time it used.&lt;/li&gt;
&lt;li&gt;To create a module, use a syntax similar to that of a class, but
substituting the keyword &lt;code&gt;class&lt;/code&gt; with &lt;code&gt;module&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The scope resolution operator in Ruby is the double colon (&lt;code&gt;::&lt;/code&gt;), like in
Perl.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To create a method inside a module, you have to prefix it by the name of
the module with a dot or with &lt;code&gt;self.&lt;/code&gt;, if you want to create a method to
be called outside the module.&lt;/p&gt;

&lt;p&gt;The same also holds for creating class methods (as opposed to &lt;em&gt;instance&lt;/em&gt;
methods): they can be simply named &lt;code&gt;self.foo&lt;/code&gt; to get a class method called
&lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;While some modules are already &quot;preloaded&quot; by the interpreter (e.g.,
&lt;code&gt;Math&lt;/code&gt;), others need to be explicitly loaded. We do this by using &lt;code&gt;require
&#39;foo&#39;&lt;/code&gt; to load the module (in the file &lt;code&gt;foo&lt;/code&gt;?).&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Mixins&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A mixin is the use of a module to &quot;enrich&quot; a class, adding &quot;instance&quot;
methods of the module to the class.&lt;/p&gt;

&lt;p&gt;It is, in a sense, a way to have some of multiple inheritance in Ruby
(without its headaches?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Using the word &lt;code&gt;include Foo&lt;/code&gt; imports the items of the module &lt;code&gt;Foo&lt;/code&gt; in the
current namespace for &lt;em&gt;instances&lt;/em&gt; of a class.&lt;/li&gt;
&lt;li&gt;Using the word &lt;code&gt;extend Foo&lt;/code&gt; imports the items of the module &lt;code&gt;Foo&lt;/code&gt; in the
current namespace as class methods/attributes.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Conventions&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Local variables are named in lower case, with parts separated by
underscores, as in &lt;code&gt;my_name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Methods that return boolean values have a question mark (&lt;code&gt;?&lt;/code&gt;) at the end
of their name.&lt;/li&gt;
&lt;li&gt;Methods that have destructive side-effects (like changing their input)
have an exclamation mark (&lt;code&gt;!&lt;/code&gt;) at the end of their name.&lt;/li&gt;
&lt;li&gt;Code is indented by 2 spaces&lt;/li&gt;
&lt;li&gt;Like other languages, constants are written in all caps, with words
separated by underscores. For example, &lt;code&gt;MAX_VALUE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Global variables are prefixed with a dollar sign (e.g., &lt;code&gt;$Foo&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Classes are named in camel case (no initial lowercase).&lt;/li&gt;
&lt;li&gt;The &quot;poetic mode&quot; in Ruby recommends one to omit the parentheses on
function calls (whenever unambiguous) and, in essence, to write as little
&quot;bureaucracy&quot; (like the explicit &lt;code&gt;return&lt;/code&gt; keyword in methods).&lt;/li&gt;
&lt;/ul&gt;


	</content>



</entry>

</feed>
