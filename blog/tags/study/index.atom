<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged study</title>
<link href="http://cynic.cc/blog//tags/study/"/>
<link href="http://cynic.cc/blog//tags/study/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Rogério Brito's Digital Junkyard</name>

</author>




<id>http://cynic.cc/blog//tags/study/</id>

<subtitle type="html">Rogério Brito&#39;s Digital Junkyard</subtitle>
<generator uri="http://ikiwiki.info/">ikiwiki</generator>
<updated>2015-01-26T03:17:12Z</updated>
<entry>
	<title>Uploading SICP to Youtube</title>

	<id>http://cynic.cc/blog//posts/2015-01-17_uploading_sicp_to_youtube/</id>

	<link href="http://cynic.cc/blog//posts/2015-01-17_uploading_sicp_to_youtube/"/>






	<category term="debian" />

	<category term="free-software" />

	<category term="programming" />

	<category term="study" />

	<category term="video" />


	<updated>2015-01-26T03:17:12Z</updated>
	<published>2015-01-18T01:52:14Z</published>


	<content type="html" xml:lang="en">
	&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;I am &lt;a href=&quot;http://www.cs.berkeley.edu/~bh/sicp.html&quot;&gt;not alone&lt;/a&gt; in considering &lt;a href=&quot;https://en.wikipedia.org/wiki/Harold%20Abelson&quot;&gt;Harold Abelson&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Gerald%20Jay%20Sussman&quot;&gt;Gerald Jay Sussman&lt;/a&gt;&#39;s &lt;a href=&quot;http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/&quot;&gt;recorded lectures&lt;/a&gt; based on their
book &quot;&lt;a href=&quot;https://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;&quot; is a
masterpiece.&lt;/p&gt;

&lt;p&gt;There are many things to like about the content of the lectures, beginning
with some pearls and wisdom about the craft of writing software (even though
this is not really a &quot;software enginneering&quot; book), the clarity with which
the concepts are described, the &lt;a href=&quot;https://mitpress.mit.edu/sicp/&quot;&gt;Freedom-friendly&lt;/a&gt; aspects of the authors
regarding the material that they produced and much, the breadth of the
subjects covered and much more.&lt;/p&gt;

&lt;h1 id=&quot;thevideostheirlengthandsplittingthem&quot;&gt;The videos, their length, and splitting them&lt;/h1&gt;

&lt;p&gt;The course consists of 20 &lt;a href=&quot;https://www.youtube.com/playlist?list=PLE18841CABEA24090&quot;&gt;video files&lt;/a&gt; and they are all uploaded on
Youtube already.&lt;/p&gt;

&lt;p&gt;There is one thing, though: while the lectures are naturally divided into
segments (the instructors took a break in after every 30 minutes or so worth
of lectures), the videos corresponding to each lecture have all the segments
concatenated.&lt;/p&gt;

&lt;p&gt;To better watch them, accounting for the easier possibility to put a few of
the lectures in a mobile device or to avoid fast forwarding long videos from
my NAS when I am watching them on my TV (and some other factors), I decided
to sit down, take notes for each video of where the breaks where, and write
a simple Python script to help split the videos in segments, and, then,
reencode the segments.&lt;/p&gt;

&lt;p&gt;I decided not to take the videos from Youtube to perform my splitting
activities, but, instead, to operate on one of the &quot;sources&quot; that the
authors once had in their homepage (videos encoded in DivX and audio in
MP3).  The videos are still available as a torrent file (with a magnet link
for the hash &lt;a href=&quot;magnet:?xt=urn:btih:650704e4439d7857a33fe4e32bcfdc2cb1db34db&quot;&gt;650704e4439d7857a33fe4e32bcfdc2cb1db34db&lt;/a&gt;), with some
very good souls still seeding it (I can seed it too, if desired).  Alas, I
have not found a source for the higher quality MPEG1 videos, but I think
that the videos are legible enough to avoid bothering with a larger
download.&lt;/p&gt;

&lt;p&gt;I soon found out that there are some beneficial side-effects of splitting
the videos, like not having to edit/equalize the entire audio of the videos
when only a segment was bad (which is understandable, as these lectures were
recorded almost 30 years ago and technology was not as advanced as things
are today).&lt;/p&gt;

&lt;p&gt;So, since I already have the split videos lying around here, I figured out
that, perhaps, other people may want to download them, as they may be more
convenient to watch (say, during commutes or whatever/whenever/wherever it
best suits them).&lt;/p&gt;

&lt;p&gt;Of course, uploading all the videos is going to take a while and I would
only do it if people would really benefit from them.  If you think so, let
me know here (or if you know someone who would like the split version of the
videos, spread the word).&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>The importance of flexible deadlines in MOOCs</title>

	<id>http://cynic.cc/blog//posts/2014-04-04_flexible_deadlines_in_moocs/</id>

	<link href="http://cynic.cc/blog//posts/2014-04-04_flexible_deadlines_in_moocs/"/>






	<category term="debian" />

	<category term="life" />

	<category term="mooc" />

	<category term="study" />


	<updated>2014-04-04T16:49:20Z</updated>
	<published>2014-04-04T16:48:59Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;I have always thought that having flexible deadlines in MOOCs is important,
despite not having used them too much. Until last night, that is.&lt;/p&gt;

&lt;p&gt;The course in question is Stanford&#39;s &lt;a href=&quot;https://statlearning.class.stanford.edu&quot;&gt;Statistical Learning&lt;/a&gt; and they
adopted a policy of letting the students complete all the assignments of the
10 week course until the last day of the course, in March 21. Then, they
graciously extended the deadline to April 4.&lt;/p&gt;

&lt;p&gt;Were it not for such an extension, I would not have completed the course. I
sent them a message on the course forums this morning to thank them for
this, as this, in my experience, is not so common with MOOCs.&lt;/p&gt;

&lt;p&gt;I reproduce below the message that I posted on the forums:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Subject: Thank you also for the EXTENSION of the deadlines&lt;/strong&gt;&lt;/p&gt;
  
  &lt;p&gt;Dear professors and staff,&lt;/p&gt;
  
  &lt;p&gt;I would like to thank you (of course) for the course, as many others have
  already. Despite not liking edX platform too much (preferring the UI of,
  say, Coursera), your course was an exception, interesting enough (and funny
  enough) that I sticked to it until the end.&lt;/p&gt;
  
  &lt;p&gt;But I would like to bring attention here to a point that many may not have
  appreciated (or, perhaps, not expressed as clearly as I thought that it
  deserved), namely, the extension of the deadlines (and a uniform deadline
  for all homeworks).&lt;/p&gt;
  
  &lt;p&gt;In particular, due to some unfortunate facts of my personal life, I could
  not work on the course at all in the past few weeks. In fact, I completed
  units 4, 5, 6, 7, 8, 9, and 10 in the last 3 or 4 days and submitted my
  last quiz a few hours before today&#39;s midnight (at my local time, UTC-0300),
  and I still got a passing grade(!).&lt;/p&gt;
  
  &lt;p&gt;Even with my desire to finish the course, this would not have been
  possible if you had not graciously allowed for the deadline extension. I am
  sure that I may not be alone here in appreciating this extension (even
  though I think that I may be many standard deviations from the mean, doing
  the homework and R programs of 7 weeks in only 4 days).&lt;/p&gt;
  
  &lt;p&gt;Thank you so very much for everything (including this extension!),&lt;/p&gt;
  
  &lt;p&gt;Rogério Brito.&lt;/p&gt;
&lt;/blockquote&gt;

	</content>



</entry>
<entry>
	<title>More completed MOOCs</title>

	<id>http://cynic.cc/blog//posts/2014-03-03_more_completed_moocs/</id>

	<link href="http://cynic.cc/blog//posts/2014-03-03_more_completed_moocs/"/>






	<category term="android" />

	<category term="debian" />

	<category term="java" />

	<category term="life" />

	<category term="mooc" />

	<category term="study" />


	<updated>2014-03-03T05:35:23Z</updated>
	<published>2014-03-03T05:35:11Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;This weekend I received my 17th certification (or Statement of
Accomplishment) for MOOCs. In particular, this last MOOC that I took was
&lt;a href=&quot;https://www.coursera.org/course/androidapps101&quot;&gt;Creative, Serious and Playful Science of Android Apps&lt;/a&gt;, offered by
&lt;a href=&quot;https://www.coursera.org/instructor/lawrenceangrave&quot;&gt;Lawrence Angrave&lt;/a&gt; of &lt;a href=&quot;https://www.coursera.org/illinois&quot;&gt;University of Illinois at Urbana-Champaign&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While I certainly knew that the course was an Introduction to Programming,
the reasons I took it were twofold:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For the &quot;novelty&quot; (for me, at least) of writing some Android Apps&lt;/li&gt;
&lt;li&gt;To reacquaint myself with Java, which I have not touched since 1999, when
&lt;a href=&quot;https://github.com/rbrito/old-projects&quot;&gt;I wrote a compiler&lt;/a&gt;, in the ages of JDK 1.0 being transitioned to
JDK 1.1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think that the time the course took (and which I invested in) was really
well spent. In fact, I learned some nice things which I would &lt;em&gt;not&lt;/em&gt; have
touched otherwise. For instance, I made the conscious effort to use an IDE
(Eclipse), despite being a person that would do most of the things inside
Emacs and compile the programs with command-line tools.&lt;/p&gt;

&lt;p&gt;Despite being huge, Eclipse has some really nice features and the
auto-completion is amazing. Since Java is so strongly typed and Eclipse
knows Java pretty well, it almost completely writes your programs for you.
&lt;img src=&quot;http://cynic.cc/blog//smileys/smile.png&quot; alt=&quot;:)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, my interest also made me want to streamline the build process and
use the command line tools (with ant, another tool that was &quot;alien&quot; to me,
having used makefiles for everything that I needed).&lt;/p&gt;

&lt;p&gt;The use of Eclipse (and the Android development environment in general) in
my Debian unstable computers
&lt;a href=&quot;http://cynic.cc/blog//posts/2014-01-17-developing_for_android_with_debian/&quot;&gt;was not&lt;/a&gt;
&lt;a href=&quot;https://bugs.debian.org/734674&quot;&gt;without problems&lt;/a&gt;, but after spending more time trying to fix Eclipse
than really doing the homework (and pulling the little hair that I still
have left), one really helpful post &lt;a href=&quot;http://aleksz-programming.blogspot.com/2013/03/eclipse-and-webkit-on-ubuntu-64.html&quot;&gt;nailed it&lt;/a&gt;. (Yes, I had to remove
other packages like gimp, but such is life).&lt;/p&gt;

&lt;p&gt;While playing with the Android side of things, I put one badly written (and
&lt;em&gt;not&lt;/em&gt; really &quot;android-ish&quot;) app in &lt;a href=&quot;https://github.com/rbrito/toy-android-apps&quot;&gt;a github repository&lt;/a&gt; (which I think
is aptly named &quot;Toy Android Apps&quot;), which served me the purpose of learning
some Android-specific concepts.&lt;/p&gt;

&lt;p&gt;But the course was helpful not only to get in touch with the tools (Eclipse,
ant, running Android virtual machines with the help of kvm), but also on the
Java side. I lost a bit of the prejudice against it (even though I still
think it is a verbose language, especially when compared to, say Python),
and I, also intend to contribute to one apache project or another that have
low-hanging fruits.  Actually, I have signed their
&lt;a href=&quot;https://www.apache.org/licenses/icla.txt&quot;&gt;Contributor License Agreement&lt;/a&gt; and I even had
&lt;a href=&quot;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1559792&quot;&gt;my first patch accepted&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Aside: Well, sadly SVN doesn&#39;t support different committer and author fields
like git does and it seems that doing many small commits may not be the
Apache way of doing things&amp;mdash;but the important part of all this is that
the code is there and there is so much more to be done.&lt;/p&gt;

&lt;p&gt;Aside #2: After a &lt;em&gt;lot&lt;/em&gt; of time spent converting the repository to git
(which is, after all, what I use), I put &lt;a href=&quot;https://github.com/rbrito/commons-graph&quot;&gt;a mirror&lt;/a&gt; of Apache&#39;s the
commons graph project.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Trivial fact #3: Continued fractions via matrices</title>

	<id>http://cynic.cc/blog//posts/2014-02-23-trivial_fact_3/</id>

	<link href="http://cynic.cc/blog//posts/2014-02-23-trivial_fact_3/"/>






	<category term="debian" />

	<category term="math" />

	<category term="study" />

	<category term="tex" />


	<updated>2014-02-26T03:11:47Z</updated>
	<published>2014-02-24T02:30:30Z</published>


	<content type="html" xml:lang="en">
	&lt;h1 id=&quot;note&quot;&gt;Note&lt;/h1&gt;

&lt;p&gt;Apparently, it&#39;s not Debian planet that has problems to deal with MathJax
(which makes posts usingn it appear illegible on Debian planet), but the
&lt;a href=&quot;https://github.com/rbrito/ikiwiki-plugin-mathjax&quot;&gt;ikiwiki plugin&lt;/a&gt; that I am using which generates garbage in the feeds
that get consumed by planet.debian.org.&lt;/p&gt;

&lt;p&gt;If you it know of a better plugin (which doesn&#39;t generate such output)
please let me know, &lt;em&gt;especially&lt;/em&gt; if it is not super computationally
expensive for a Core 2 Duo T7250 (which is my notebook).&lt;/p&gt;

&lt;h1 id=&quot;therealthing&quot;&gt;The real thing&lt;/h1&gt;

&lt;p&gt;As &lt;a href=&quot;http://wstein.org/&quot;&gt;William Stein&lt;/a&gt; is now offering a course on Number Theory and he has
been posting recorded videos of his lectures, I started watching some of
them (mainly, the ones regarding continued factions).  In particular, he
shows the usual recursive formula for convergents of a continued fraction
and that&#39;s super nice.&lt;/p&gt;

&lt;p&gt;For the curious reader, the recurrence relations for the convergents of
!!mathjaxbegin-i!! W2FfMCwgYV8xLCBcbGRvdHMsIGFfbiwgXGxkb3RzXQ==
 !!mathjaxend-i!! are:
!!mathjaxbegin-d!! CnBfbiA9IGFfbiBwX3tuLTF9ICsgcF97bi0yfVxcCnFfbiA9IGFfbiBxX3tuLTF9ICsgcV97bi0y
fSwK
 !!mathjaxend-d!! with initial conditions (!!mathjaxbegin-i!! cF97LTJ9ID0gMA==
 !!mathjaxend-i!!, !!mathjaxbegin-i!! cF97LTF9ID0gMQ==
 !!mathjaxend-i!!, !!mathjaxbegin-i!! cF8wID0gYV8w
 !!mathjaxend-i!!,
!!mathjaxbegin-i!! cV97LTJ9ID0gMQ==
 !!mathjaxend-i!!, !!mathjaxbegin-i!! cV97LTF9ID0gMA==
 !!mathjaxend-i!!, !!mathjaxbegin-i!! cV8wID0gMQ==
 !!mathjaxend-i!!).&lt;/p&gt;

&lt;p&gt;He even motivated the use of continued fractions with the golden ratio,
which is super nice, given that I like the subject and have been writing a
document collecting facts that I know about the Fibonacci numbers (well,
this document is horribly incomplete and not even close to something that I
would consider proper for public consumption&amp;mdash;I plan on publishing
them soon).&lt;/p&gt;

&lt;p&gt;OK, after he discussed the basics of it convergents, he noted that the
recurrence relations are like those defining the Fibonacci numbers, just
that one of the terms is &quot;weighted&quot; by the coefficients of the continued
fraction.&lt;/p&gt;

&lt;p&gt;I missed one thing, though: neither &lt;a href=&quot;http://wstein.org/ent/&quot;&gt;his book&lt;/a&gt; nor wikipedia&#39;s article on
&lt;a href=&quot;https://en.wikipedia.org/wiki/continued%20fractions&quot;&gt;continued fractions&lt;/a&gt; mentions a very neat, alternative way to
express the convergents of continued fractions (truth be said, I took a
quick peek at wikipedia&#39;s article and I found that it doesn&#39;t mentionat
least explicitly, in a 1 min skim&amp;mdash;it may well be buried somewhere
else).&lt;/p&gt;

&lt;p&gt;I, then, &lt;a href=&quot;https://plus.google.com/115360165819500279592/posts/guGv6w9jmxr&quot;&gt;proposed&lt;/a&gt; the following exercise for his students (which he
apparently liked, as he +1&#39;s the suggestion):&lt;/p&gt;

&lt;p&gt;Prove that the recurrence relation of the !!mathjaxbegin-i!! cF9p
 !!mathjaxend-i!!&#39;s and !!mathjaxbegin-i!! cV9p
 !!mathjaxend-i!!&#39;s that we
mentioned before can be obtained via matrix multiplication. More precisely,
prove that:
!!mathjaxbegin-d!! ClxiZWdpbntibWF0cml4fQphXzAgJmFtcDsgMVxcCjEgJmFtcDsgMApcZW5ke2JtYXRyaXh9Clxi
ZWdpbntibWF0cml4fQphXzEgJmFtcDsgMVxcCjEgJmFtcDsgMApcZW5ke2JtYXRyaXh9ClxjZG90
cwpcYmVnaW57Ym1hdHJpeH0KYV9uICZhbXA7IDFcXAoxICZhbXA7IDAKXGVuZHtibWF0cml4fQog
PQpcYmVnaW57Ym1hdHJpeH0KcF9uICZhbXA7IHBfe24tMX1cXApxX24gJmFtcDsgcV97bi0xfQpc
ZW5ke2JtYXRyaXh9Lgo=
 !!mathjaxend-d!!
As a corollary, derive Cassini&#39;s identity for the Fibonacci Numbers.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Please, if you any errors on this, please let me know so that I can fix it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Edit:&lt;/em&gt;&lt;/strong&gt; Thanks &quot;noone&quot; for spotting a typographical error.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Some new Youtube-dl functionality</title>

	<id>http://cynic.cc/blog//posts/2014-02-17-youtube-dl_news/</id>

	<link href="http://cynic.cc/blog//posts/2014-02-17-youtube-dl_news/"/>






	<category term="debian" />

	<category term="free-software" />

	<category term="linux" />

	<category term="multimedia" />

	<category term="python" />

	<category term="study" />


	<updated>2014-02-19T05:52:57Z</updated>
	<published>2014-02-17T21:27:00Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;I wrote in a &lt;a href=&quot;http://cynic.cc/blog//posts/2013-10-23-assorted_news/#youtube-dl&quot;&gt;previous post&lt;/a&gt; that
Youtube changed their way of delivering videos, with the use of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic%20Adaptive%20Streaming%20over%20HTTP&quot;&gt;Dynamic Adaptive Streaming over HTTP&lt;/a&gt;.  On top of that, they
started serving both the audio and the video in separate streams, which
meant trouble for downloader tools like &lt;a href=&quot;http://youtube-dl.org/&quot;&gt;&lt;code&gt;youtube-dl&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I mentioned in that previous post:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What does this mean in practical terms for users of youtube-dl?  Well, if
  you wanted to download videos in resolutions like the 480p (format 35)
  that I mentioned, then you will probably have to change your way of doing
  things, until a more automated solution is in place.&lt;/p&gt;
  
  &lt;p&gt;You will have to download both the audio and the video and, then,
  &quot;combine&quot; them (that is, multiplex them) to create one &quot;normal&quot; video file
  with both the audio and the video.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And latter, I wrote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Otherwise, to download 480p videos (which I do for lectures and so on with
  other projects of mine, like edx-dl) I have to call youtube-dl twice: once
  for format 135 and another for format 140, since the old &lt;img src=&quot;http://cynic.cc/blog//smileys/question.png&quot; alt=&quot;(?)&quot; /&gt; format 35
  files are much smaller than the lower resolution 360p files (due to the
  former being encoded in High profile vs. the latter being encoded in
  Constrained Baseline profile).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(...)&lt;/p&gt;

&lt;p&gt;Well, now, we don&#39;t have this problem anymore:&lt;/p&gt;

&lt;p&gt;The new release of &lt;code&gt;youtube-dl&lt;/code&gt; brings us many goodies, including that it is
possible to &lt;em&gt;automatically&lt;/em&gt; combine/merge/multiplex audio and video formats
that Youtube now offers separately (See the previous comments about separate
audio and video).&lt;/p&gt;

&lt;p&gt;Now, if you want a 480p video in H.264 format, High profile, with 128kbps
AAC audio (this used to be Youtube&#39;s format 35), you can specify format &lt;code&gt;-f
135+140&lt;/code&gt; on the command-line and it will download both the audio, the video
and multiplex it with &lt;code&gt;ffmpeg&lt;/code&gt; (or &lt;code&gt;avconv&lt;/code&gt;, depending on what you have
installed).&lt;/p&gt;

&lt;p&gt;Besides being convenient, this automatic downloading and merging makes it
unnecessary to write scripts to, say, retrieve all the videos in a playlist
that contains a lot of lectures (see &lt;a href=&quot;http://www.youtube.com/watch?v=EPQgeAz264g&amp;amp;list=PLA58AC5CABC1321A3&quot;&gt;one example here&lt;/a&gt;, taught by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Benedict%20Gross&quot;&gt;Benedict Gross&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Version 2014.02.17 of &lt;code&gt;youtube-dl&lt;/code&gt; will be soon in your favorite mirror of
the Debian archives.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Trivial fact #2: Harmonic Numbers</title>

	<id>http://cynic.cc/blog//posts/2014-01-30-trivial_fact_2/</id>

	<link href="http://cynic.cc/blog//posts/2014-01-30-trivial_fact_2/"/>






	<category term="debian" />

	<category term="math" />

	<category term="study" />

	<category term="tex" />


	<updated>2014-01-30T02:44:49Z</updated>
	<published>2014-01-30T02:43:30Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;I don&#39;t know how Debian planet deals with MathJax (it seems to
become illegible), but I will try to post this, anyway.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fact:&lt;/strong&gt; Since the harmonic numbers can be approximated by the
natural logarithm, that is, !!mathjaxbegin-i!! SF9uIFxzaW1lcSBcbG4gbg==
 !!mathjaxend-i!!, we can clearly
see that
!!mathjaxbegin-d!! CiBcZnJhY3sxfXtpKzF9ICsgXGNkb3RzICsgXGZyYWN7MX17bn0gPSBIX24gLSBIX2kgXHNpbWVx
IFxsbiBuIC0gXGxuIGkgPSBcbG4gXGZyYWN7bn17aX0sCg==
 !!mathjaxend-d!!
which is a trivial approximation that may be handy sometimes.&lt;/p&gt;

&lt;p&gt;If you spot any errors on this, please let me know.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Trivial fact: convexity of polyhedra</title>

	<id>http://cynic.cc/blog//posts/2013-12-11-trivial_fact_convexity_of_polyhedra/</id>

	<link href="http://cynic.cc/blog//posts/2013-12-11-trivial_fact_convexity_of_polyhedra/"/>






	<category term="debian" />

	<category term="math" />

	<category term="study" />


	<updated>2013-12-11T02:35:41Z</updated>
	<published>2013-12-11T02:27:41Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;Just a trivial fact: every polyhedron that is used in linear programming is
convex, that is !!mathjaxbegin-i!! QXggXGxlcSBi
 !!mathjaxend-i!! is convex, for a matrix !!mathjaxbegin-i!! QQ==
 !!mathjaxend-i!! and a (column)
vector !!mathjaxbegin-i!! Yg==
 !!mathjaxend-i!!.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof:&lt;/strong&gt; Take any !!mathjaxbegin-i!! eCcsIHgnJw==
 !!mathjaxend-i!! that satisfy the system of inequalities !!mathjaxbegin-i!! QXggXGxlcSBi
 !!mathjaxend-i!!.
Then, for !!mathjaxbegin-i!! MCBcbGVxIFxsYW1iZGEgXGxlcSAx
 !!mathjaxend-i!!, we have that !!mathjaxbegin-i!! XGxhbWJkYSBBeCcgXGxlcSBcbGFtYmRhIGI=
 !!mathjaxend-i!!,
that is !!mathjaxbegin-i!! QSBcbGFtYmRhIHgnIFxsZXEgXGxhbWJkYSBi
 !!mathjaxend-i!!.  Similarly, for !!mathjaxbegin-i!! eCcn
 !!mathjaxend-i!!, we have
that !!mathjaxbegin-i!! QSAoMS1cbGFtYmRhKSB4JyBcbGVxICgxLVxsYW1iZGEpIGI=
 !!mathjaxend-i!!. Summing the inequalities, we
get:
!!mathjaxbegin-d!! CiBBW1xsYW1iZGEgeCcgKyAoMS1cbGFtYmRhKSB4JyddIFxsZXEgW1xsYW1iZGEgKyAoMS1cbGFt
YmRhKV0gYiA9IGIsCg==
 !!mathjaxend-d!!
which means that !!mathjaxbegin-i!! XGhhdHt4fSA9IFxsYW1iZGEgeCcgKyAoMS1cbGFtYmRhKSB4Jyc=
 !!mathjaxend-i!! is again a
solution of the original set of inequalities, thus concluding the argument.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Assorted random notes</title>

	<id>http://cynic.cc/blog//posts/2013-10-23-assorted_news/</id>

	<link href="http://cynic.cc/blog//posts/2013-10-23-assorted_news/"/>






	<category term="btrfs" />

	<category term="debian" />

	<category term="filesystem" />

	<category term="free-software" />

	<category term="linux" />

	<category term="music" />

	<category term="python" />

	<category term="study" />


	<updated>2013-11-06T17:36:48Z</updated>
	<published>2013-10-23T23:08:42Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;This post is just a bunch of random notes, but I think that things are going
well, this time.&lt;/p&gt;

&lt;h1 id=&quot;btrfs&quot;&gt;Btrfs&lt;/h1&gt;

&lt;p&gt;Just started playing with &lt;a href=&quot;https://en.wikipedia.org/wiki/btrfs&quot;&gt;btrfs&lt;/a&gt; after converting a 2TB disk
with about 1.3TB of data from &lt;a href=&quot;https://en.wikipedia.org/wiki/ext4&quot;&gt;ext4&lt;/a&gt; to btrfs.  This particular
filesystem contains my backup data and I hope that btrfs is able to live up
to high standards.&lt;/p&gt;

&lt;p&gt;I will probably write a detailed review with my impressions, but suffice to
say that it is working fine and I hope that I will be happy for a long time
to come. My other filesystems, for the moment, will be ext4.&lt;/p&gt;

&lt;h1 id=&quot;courseradownloader&quot;&gt;Coursera Downloader&lt;/h1&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/jplehmann&quot;&gt;John Lehmann&lt;/a&gt;&#39;s generosity, now &lt;code&gt;coursera-dl&lt;/code&gt; has a new home:
a &lt;a href=&quot;https://github.com/coursera-dl&quot;&gt;github organization&lt;/a&gt; of its own!&lt;/p&gt;

&lt;h1 id=&quot;youtube-dl&quot;&gt;youtube-dl&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rg3/youtube-dl/issues/1612&quot;&gt;Some people may have noticed, others may not&lt;/a&gt;, but when downloading
videos from Youtube, they apparently are getting more aggressive with the
use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic%20Adaptive%20Streaming%20over%20HTTP&quot;&gt;Dynamic Adaptive Streaming over HTTP&lt;/a&gt; (also called
DASH) and, as a result, some (perhaps going to be all in the near future?)
of the videos may not be available in the resolution/formats that you used
to like (like me, with format number 35).&lt;/p&gt;

&lt;p&gt;By the way, one thing that is interesting with youtube videos provided via
DASH is that they are available in different streams: one for the video and
another for the audio.&lt;/p&gt;

&lt;p&gt;What does this mean in practical terms for users of youtube-dl?  Well, if
you wanted to download videos in resolutions like the 480p (format 35) that
I mentioned, then you will probably have to change your way of doing things,
until a more automated solution is in place.&lt;/p&gt;

&lt;p&gt;You will have to download both the audio and the video and, then, &quot;combine&quot;
them (that is, multiplex them) to create one &quot;normal&quot; video file with both
the audio and the video. I usually do this via:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
ffmpeg -i audio.m4a -i video.mp4 -vcodec copy -acodec copy combined.mp4
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you prefer having a Matroska container instead of an mp4 container
(which, BTW, results in &lt;em&gt;smaller&lt;/em&gt; muxing overhead), then you can use the
command line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
mkvmerge -o combined.mkv audio.m4a video.mp4
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Oh, those &lt;code&gt;m4a&lt;/code&gt; and &lt;code&gt;mp4&lt;/code&gt; extensions are a new addition that
&lt;a href=&quot;https://github.com/rg3/youtube-dl/pull/1622&quot;&gt;I just sent upstream&lt;/a&gt; (in the past, both would have been named with an
extension of &lt;code&gt;mp4&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As, an aside, I like formats &lt;code&gt;135&lt;/code&gt; for video and &lt;code&gt;140&lt;/code&gt; for audio, for the
reasons that I mentioned in a comments to issue 1612:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Otherwise, to download 480p videos (which I do for lectures and so on with
  other projects of mine, like edx-dl) I have to call youtube-dl twice: once
  for format 135 and another for format 140, since the old &lt;img src=&quot;http://cynic.cc/blog//smileys/question.png&quot; alt=&quot;(?)&quot; /&gt; format 35
  files are much smaller than the lower resolution 360p files (due to the
  former being encoded in High profile vs. the latter being encoded in
  Constrained Baseline profile).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While this is unfortunate for some, this is a good thing for others: I once
had a blind user of &lt;code&gt;youtube-dl&lt;/code&gt; asking me if he could avoid downloading the
whole video just to extract the audio, so that he save on bandwidth. Well,
now this is possible.&lt;/p&gt;

&lt;p&gt;Expect a new version of &lt;code&gt;youtube-dl&lt;/code&gt; to be uploaded soon to Debian unstable.&lt;/p&gt;

&lt;h1 id=&quot;music&quot;&gt;Music&lt;/h1&gt;

&lt;p&gt;It is so nice to see the music that I like getting better. It was
particularly pleasant to &lt;a href=&quot;https://youtu.be/hAnVFJFmFx8&quot;&gt;see&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Tarja%20Turunen&quot;&gt;Tarja Turunen&lt;/a&gt; being joined
on stage by &lt;a href=&quot;https://en.wikipedia.org/wiki/Floor%20Jansen&quot;&gt;Floor Jansen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In fact, it is my impression that the once female-fronted bands are getting
more and more into collaborations and side-projects and they are, in many
ways, getting more refined. Examples of this includes Floor, Tarja,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Anneke%20van%20Giersbergen&quot;&gt;Anneke van Giersbergen&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Sharon%20den%20Adel&quot;&gt;Sharon den Adel&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Kari%20Ruesl%C3%A5tten&quot;&gt;Kari Rueslåtten&lt;/a&gt; and many others that I can&#39;t remember right
now.&lt;/p&gt;

&lt;p&gt;Of course, some thanks to people that take the time to film, and
upload/share the videos so that other people not at these events can watch
them is highly appreciated and they usually are treated as anonymous, but,
of course, this should be fixed.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Beginning Ruby</title>

	<id>http://cynic.cc/blog//posts/beginning_ruby/</id>

	<link href="http://cynic.cc/blog//posts/beginning_ruby/"/>






	<category term="debian" />

	<category term="free-software" />

	<category term="ruby" />

	<category term="study" />


	<updated>2013-07-21T12:18:29Z</updated>
	<published>2013-07-21T00:50:00Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;These are some very rough/sketchy notes that I took while doing the
exercises on the introductory track of the Ruby language at
&lt;a href=&quot;http://www.codeacademy.com/&quot;&gt;codeacademy&lt;/a&gt;.  They were written from the point-of-view of an amateur
programmer in C and Python (read: &quot;me&quot;).&lt;/p&gt;

&lt;p&gt;Since this is my first time with Ruby and I only have about 1 week of
experience with it, these notes are likely to contain many mistakes, many
simplifications, many omissions or simply gross errors.  I would love to be
informed of such facts so that I can fix them and not write code that is
burdensome for others to maintain.&lt;/p&gt;

&lt;h1 id=&quot;operators&quot;&gt;Operators&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Math operators: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt; (just like Python)&lt;/li&gt;
&lt;li&gt;Relational operators: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; (just like other
languages)&lt;/li&gt;
&lt;li&gt;Boolean operators: &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt; (just like C/C++/Perl)&lt;/li&gt;
&lt;li&gt;The combined comparison operator (&quot;spaceship operator&quot;, like Perl): &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;
(follows the spirit of what &lt;code&gt;strcmp&lt;/code&gt; in C does)&lt;/li&gt;
&lt;li&gt;Conditional assignment operator (&lt;code&gt;||=&lt;/code&gt;) only assigns a value to a variable
if that variable is bound to &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;numbers&quot;&gt;Numbers&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You can write number literals embedding an underscore (&lt;code&gt;_&lt;/code&gt;) for
readability purposes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;basicio&quot;&gt;Basic I/O&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Output: &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;puts&lt;/code&gt;. Both print strings to stdout, but &lt;code&gt;puts&lt;/code&gt; also
appends a new line to the end.&lt;/li&gt;
&lt;li&gt;Input: &lt;code&gt;gets&lt;/code&gt; accepts an input from stdin and returns a string.&lt;/li&gt;
&lt;li&gt;To convert a string &lt;code&gt;foo&lt;/code&gt; to an integer, use the &lt;code&gt;Integer(foo)&lt;/code&gt;
constructor. It throws an exception if it cannot convert the value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;strings&quot;&gt;Strings&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Strings have at least some methods: &lt;code&gt;.length&lt;/code&gt;, &lt;code&gt;.reverse&lt;/code&gt;, &lt;code&gt;.upcase&lt;/code&gt;,
&lt;code&gt;.downcase&lt;/code&gt;, &lt;code&gt;.capitalize&lt;/code&gt;, &lt;code&gt;.chomp&lt;/code&gt; (like Perl, removes the trailing
endline)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.upcase&lt;/code&gt; seems to have problems with non-ASCII characters, like &lt;code&gt;é&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Interpolation is performed by putting the name &lt;code&gt;name&lt;/code&gt; of the variable
inside a string and delimited as &lt;code&gt;#{name}&lt;/code&gt; at the place we want the
interpolation to occur.&lt;/li&gt;
&lt;li&gt;Methods like &lt;code&gt;.capitalize&lt;/code&gt; don&#39;t change the string (they return a new
string capitalized).  To change the string, you call the method
&lt;code&gt;.capitalize!&lt;/code&gt; (with a &lt;code&gt;!&lt;/code&gt; at the end of the name of the method).&lt;/li&gt;
&lt;li&gt;Other useful methods: &lt;code&gt;.gsub&lt;/code&gt; for globally substituting a regular
expression (and its variant &lt;code&gt;.gsub!&lt;/code&gt; for inplace modification), and
&lt;code&gt;.include?&lt;/code&gt; to verify if the first string includes another.&lt;/li&gt;
&lt;li&gt;Another method: &lt;code&gt;.split(&quot; &quot;)&lt;/code&gt;, to split on the string specified as
argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;controlflow&quot;&gt;Control flow&lt;/h1&gt;

&lt;h2 id=&quot;if&quot;&gt;If&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The syntax of a &lt;code&gt;if&lt;/code&gt; is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if expression1
  block1
elsif expression2
  block2
else
  block3
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;note that it ends with the word &lt;code&gt;end&lt;/code&gt;, there are no need for parentheses,
no braces, no colons, and the keyword for &quot;else if&quot; is &lt;code&gt;elsif&lt;/code&gt; (different
from Python&#39;s &lt;code&gt;elif&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The &quot;&lt;code&gt;if&lt;/code&gt;&quot; can also be started with the keyword &lt;code&gt;unless&lt;/code&gt; instead, which
checks if the expression is false rather than true (as is the case of
&lt;code&gt;if&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;while&quot;&gt;While&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The syntax of the &lt;code&gt;while&lt;/code&gt; is similar to other languages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while condition
  block
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A variation of the &lt;code&gt;while&lt;/code&gt; is the &lt;code&gt;until&lt;/code&gt;, with the same syntax, except
for the &lt;code&gt;until&lt;/code&gt; in place of the while, and that it iterates when the
condition is false, instead of true.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;for&quot;&gt;For&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The simple case of iterating over a range of numbers is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in 1...10
  block
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like ranges in Python, the 10 is not included (the variable &lt;code&gt;i&lt;/code&gt; iterates
from 1 to 9).&lt;/p&gt;

&lt;p&gt;For an &lt;em&gt;inclusive&lt;/em&gt; range, we use two dots (&lt;code&gt;1..10&lt;/code&gt;), instead of three
dots (&lt;code&gt;1...10&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;loop&quot;&gt;Loop&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To iterate a block, we can use the &lt;code&gt;loop&lt;/code&gt; keyword, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;loop { block } # with braces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or as in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;loop do # note the pair do/end in place of braces
  block
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is useful to use &lt;code&gt;break&lt;/code&gt; when using loop to break out of the infinite
iterations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Similarly, we can use &lt;code&gt;next&lt;/code&gt; as in other languages (the same as &lt;code&gt;continue&lt;/code&gt;
in C or C++).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;arrays&quot;&gt;Arrays&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The equivalent to Python&#39;s lists are arrays and they are declared in the
same fashion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my_array = [1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrays in Ruby are 0-based.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every array has an iterator called the &lt;code&gt;.each&lt;/code&gt; method. The basic syntax
is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object.each { |item| block } # do something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which can be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object.each do |item| block end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the name between &lt;code&gt;| |&lt;/code&gt; is bound to (a copy of?) each element of
&lt;code&gt;object&lt;/code&gt; in turn. The equivalent in Python would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for item in object:
    block
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrays can be sorted with the &lt;code&gt;.sort&lt;/code&gt; method (or its sibling &lt;code&gt;.sort!&lt;/code&gt;).
When passing a parameter, it is useful to use the spaceship operator
(&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;) (like Perl) to specify a custom order (similar in spirit to what
we do with Python&#39;s &lt;code&gt;key&lt;/code&gt; argument to the &lt;code&gt;sort&lt;/code&gt; method of a list).
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; my_array.sort! {|a, b| a &amp;lt;=&amp;gt; b} # Ascending order
 my_array.sort! {|a, b| b &amp;lt;=&amp;gt; a} # Descending order
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;.push&lt;/code&gt; method appends an element to an Array (similar to Python&#39;s
&lt;code&gt;.append&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The empty Array is denoted by &lt;code&gt;[]&lt;/code&gt;, like an empty list in Python.&lt;/li&gt;
&lt;li&gt;An iterator (like &lt;code&gt;(1..10)&lt;/code&gt;) can be converted to an array with the &lt;code&gt;.to_a&lt;/code&gt;
method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hashes&quot;&gt;Hashes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A literal hash is defined by the syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my_hash = {
    &quot;key1&quot; =&amp;gt; &quot;abc&quot;,
    &quot;key2&quot; =&amp;gt; 2,
    &quot;key3&quot; =&amp;gt; false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite similar to the version in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my_hash = {
    &quot;key1&quot;: &quot;abc&quot;,
    &quot;key2&quot;: 2,
    &quot;key3&quot;: False
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, in Ruby 1.9, you can write, instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my_hash = {
    key1: &quot;abc&quot;,
    key2: 2,
    key3: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is very similar to Python or JSON.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The empty hash, OTOH, is defined by calling the constructor &lt;code&gt;.new&lt;/code&gt; of the
class &lt;code&gt;Hash&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my_hash = Hash.new
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax used by Python can also be used: &lt;code&gt;my_hash = {}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Iterating over a hash is done the same way as done for an array, but the
&lt;code&gt;.each&lt;/code&gt; method gives &lt;em&gt;both&lt;/em&gt; the key &lt;em&gt;and&lt;/em&gt; the value, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my_hash.each do |k, v|
  puts &quot;#{k}: #{v}&quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To iterate only on keys, we use the method &lt;code&gt;.each_key&lt;/code&gt;. To iterate only on
values, we use the method &lt;code&gt;.each_value&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;A hash can be sorted with the &lt;code&gt;.sort_by&lt;/code&gt; method (to sort by keys, values
or any expression involving them) and since it can be ordered, we can
reverse (in-place) the order of its elements with the &lt;code&gt;.reverse!&lt;/code&gt; method.
This makes Ruby&#39;s hashes to &quot;taste&quot; like Python&#39;s &lt;code&gt;OrderedDict&lt;/code&gt;&#39;s.&lt;/li&gt;
&lt;li&gt;When one initializes a hash, one can specify a default value to the &lt;code&gt;.new&lt;/code&gt;
method (e.g., &lt;code&gt;foo = Hash.new(0)&lt;/code&gt;), which makes it convenient to do the
equivalent of Python&#39;s &lt;code&gt;defaultdict&lt;/code&gt; or &lt;code&gt;Counter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can select part of a hash by using the &lt;code&gt;.select&lt;/code&gt; method and giving it
a block. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;good_movies = movie_ratings.select{|k, v| v &amp;gt; 3}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;functionsmethods&quot;&gt;Functions/methods&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Functions in Ruby are defined with the word &lt;code&gt;def&lt;/code&gt; (as in Python) and end
with the word &lt;code&gt;end&lt;/code&gt;, as other composite constructs. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def square(n)
  return n*n
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Parentheses are optional in Ruby, unless they create ambiguity. So, to
call the function above, one can use any of the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;square(2)
square 2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A function can take a block as a parameter (and this is what &lt;code&gt;.each&lt;/code&gt; does,
for instance).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Functions can take a variable number of elements with the &lt;em&gt;splash&lt;/em&gt;
operator (denoted by &lt;code&gt;*&lt;/code&gt;), which puts the extra parameters in an Array
(like Python).&lt;/li&gt;
&lt;li&gt;Functions can have default parameters, which are set in the &quot;prototype&quot;,
just like in Python or C++.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;return&lt;/code&gt; keyword is omitted from the method, Ruby uses an implicit
return, where the value of the last executed expression is returned to the
caller of the method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;symbols&quot;&gt;Symbols&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Any instances of a given symbol share the same ID. This is due to the fact
that they are immutable.&lt;/li&gt;
&lt;li&gt;Symbols start with a colon (&lt;code&gt;:&lt;/code&gt;) and they can contain any character that
is valid for a variable name.&lt;/li&gt;
&lt;li&gt;It is possible to convert between a symbol and a string with the methods
&lt;code&gt;.to_s&lt;/code&gt; and &lt;code&gt;.to_sym&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;comments&quot;&gt;Comments&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Single line comments use the hash symbol (&lt;code&gt;#&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Ruby also has multiline comments, which are delimited by a line beginning
with &lt;code&gt;=begin&lt;/code&gt; and a line beginning with &lt;code&gt;=end&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lambdafunctions&quot;&gt;Lambda functions&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A lambda function in Ruby is defined, as expected, as, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo = lambda { |x| x.to_sym }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The basic differences between a lambda and a proc is that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A lambda checks the number of elements that it receives, while a proc
doesn&#39;t and assigns &lt;code&gt;nil&lt;/code&gt; to parameters that it didn&#39;t receive (a proc
seems to ignore extra parameter that it wasn&#39;t expecting).&lt;/li&gt;
&lt;li&gt;When a lambda returns, the control goes back to the function that called
the lambda, while when a proc returns, the control is returned &lt;em&gt;also&lt;/em&gt;
from the function that called the proc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;classes&quot;&gt;Classes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&quot;Everything is an object in Ruby.&quot; (At least one exception are blocks).&lt;/li&gt;
&lt;li&gt;To test if an object is of a given class, you use the method &lt;code&gt;.is_a?&lt;/code&gt; on
the object and the type as argument (e.g., &lt;code&gt;foo.is_a? Integer&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The &quot;null&quot; value in Ruby is &lt;code&gt;nil&lt;/code&gt;. It is equivalent to &lt;code&gt;None&lt;/code&gt; in Python.&lt;/li&gt;
&lt;li&gt;The only &quot;falsy&quot; values in Ruby are &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;. The others are
&quot;truthy&quot;, differently from C/C++/Perl/Python.&lt;/li&gt;
&lt;li&gt;For a given object, the method &lt;code&gt;.object_id&lt;/code&gt; returns what is the &quot;address&quot;
of that object.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Classes in Ruby are created with the syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ClassExample
    # body
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(That is for a class that has is not derived from other regular classes).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Constructors in Ruby are called &lt;code&gt;initialize&lt;/code&gt;. An instance of a class is
created by calling the method &lt;code&gt;.new&lt;/code&gt; on the class name (and passing
parameters as needed for the &lt;code&gt;initialize&lt;/code&gt; method).&lt;/li&gt;
&lt;li&gt;Instance variables are named with 1 at sign (&lt;code&gt;@&lt;/code&gt;) as a prefix. Class
variables are named with 2 at signs (&lt;code&gt;@@&lt;/code&gt;) as a prefix. Global variables
are named with a dollar sign (&lt;code&gt;&amp;#036;&lt;/code&gt;) as a prefix.&lt;/li&gt;
&lt;li&gt;Class methods are declared inside a class prefixed with &lt;code&gt;self.&lt;/code&gt; and they
are called with the class name suffixed with the name of the method. For
example, for a class &lt;code&gt;MyClass&lt;/code&gt;, with a class method &lt;code&gt;class_method&lt;/code&gt;, we
call it as &lt;code&gt;MyClass.class_method&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When overriding a method in a subclass, one can call the method from the
parent class with the keyword &lt;code&gt;super&lt;/code&gt;, as in &lt;code&gt;super(arg1, arg2)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ruby doesn&#39;t support multiple inheritance. In place of multiple
inheritance, Ruby offers mixins.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To access one attribute, say &lt;code&gt;@my_attrib&lt;/code&gt;, in Ruby classes, one usually
creates two methods to manipulate it: a method with the name &lt;code&gt;my_attrib&lt;/code&gt;,
that returns the value of &lt;code&gt;@my_attrib&lt;/code&gt; (a getter) and a method with the
name &lt;code&gt;my_attrib=&lt;/code&gt; that accepts a parameter to set &lt;code&gt;@my_attrib&lt;/code&gt; to (a
setter).&lt;/p&gt;

&lt;p&gt;There is syntatic sugar for creating both getters or setters.&lt;/p&gt;

&lt;p&gt;For a getter, you declare &lt;code&gt;attr_reader :my_attrib&lt;/code&gt; (the member name as a
symbol).&lt;/p&gt;

&lt;p&gt;For a setter, you declare &lt;code&gt;attr_writer :my_attrib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you need both a getter and a setter, then you can abbreviate them with
&lt;code&gt;attr_accessor&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;All methods, by default, are public in Ruby. To explicitly mark something
as public, you use the keyword &lt;code&gt;public&lt;/code&gt;. To mark something as private, you
use the keyword &lt;code&gt;private&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;modules&quot;&gt;Modules&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You can import a module with the keyword &lt;code&gt;require&lt;/code&gt; (as in Perl) and the
name of the module in quotes.&lt;/li&gt;
&lt;li&gt;One example of a module is the &lt;code&gt;benchmark&lt;/code&gt; module, which provides the
&lt;code&gt;Benchmark&lt;/code&gt; class, which has the method &lt;code&gt;.realtime&lt;/code&gt;, which takes a block
and reports how much time it used.&lt;/li&gt;
&lt;li&gt;To create a module, use a syntax similar to that of a class, but
substituting the keyword &lt;code&gt;class&lt;/code&gt; with &lt;code&gt;module&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The scope resolution operator in Ruby is the double colon (&lt;code&gt;::&lt;/code&gt;), like in
Perl.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To create a method inside a module, you have to prefix it by the name of
the module with a dot or with &lt;code&gt;self.&lt;/code&gt;, if you want to create a method to
be called outside the module.&lt;/p&gt;

&lt;p&gt;The same also holds for creating class methods (as opposed to &lt;em&gt;instance&lt;/em&gt;
methods): they can be simply named &lt;code&gt;self.foo&lt;/code&gt; to get a class method called
&lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;While some modules are already &quot;preloaded&quot; by the interpreter (e.g.,
&lt;code&gt;Math&lt;/code&gt;), others need to be explicitly loaded. We do this by using &lt;code&gt;require
&#39;foo&#39;&lt;/code&gt; to load the module (in the file &lt;code&gt;foo&lt;/code&gt;?).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mixins&quot;&gt;Mixins&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A mixin is the use of a module to &quot;enrich&quot; a class, adding &quot;instance&quot;
methods of the module to the class.&lt;/p&gt;

&lt;p&gt;It is, in a sense, a way to have some of multiple inheritance in Ruby
(without its headaches?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Using the word &lt;code&gt;include Foo&lt;/code&gt; imports the items of the module &lt;code&gt;Foo&lt;/code&gt; in the
current namespace for &lt;em&gt;instances&lt;/em&gt; of a class.&lt;/li&gt;
&lt;li&gt;Using the word &lt;code&gt;extend Foo&lt;/code&gt; imports the items of the module &lt;code&gt;Foo&lt;/code&gt; in the
current namespace as class methods/attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conventions&quot;&gt;Conventions&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Local variables are named in lower case, with parts separated by
underscores, as in &lt;code&gt;my_name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Methods that return boolean values have a question mark (&lt;code&gt;?&lt;/code&gt;) at the end
of their name.&lt;/li&gt;
&lt;li&gt;Methods that have destructive side-effects (like changing their input)
have an exclamation mark (&lt;code&gt;!&lt;/code&gt;) at the end of their name.&lt;/li&gt;
&lt;li&gt;Code is indented by 2 spaces.&lt;/li&gt;
&lt;li&gt;Like other languages, constants are written in all caps, with words
separated by underscores. For example, &lt;code&gt;MAX_VALUE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Global variables are prefixed with a dollar sign (e.g., &lt;code&gt;&amp;#036;Foo&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Classes are named in camel case (no initial lowercase).&lt;/li&gt;
&lt;li&gt;The &quot;poetic mode&quot; in Ruby recommends one to omit the parentheses on
function calls (whenever unambiguous) and, in essence, to write as little
&quot;bureaucracy&quot; (like the explicit &lt;code&gt;return&lt;/code&gt; keyword in methods).&lt;/li&gt;
&lt;/ul&gt;

	</content>



</entry>
<entry>
	<title>Playing with MOOCs</title>

	<id>http://cynic.cc/blog//posts/playing_with_moocs/</id>

	<link href="http://cynic.cc/blog//posts/playing_with_moocs/"/>






	<category term="debian" />

	<category term="education" />

	<category term="free-software" />

	<category term="git" />

	<category term="mooc" />

	<category term="python" />

	<category term="study" />


	<updated>2013-07-04T12:25:16Z</updated>
	<published>2013-07-04T11:33:00Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;Not so much ago, we had a boom of new enterprises offering Massive Online
Open Courses (MOOCs for short).&lt;/p&gt;

&lt;p&gt;First were Thrun and Norvig (Artificial Intelligence), with Widom
(Introduction to Databases) and Ng (Machine Learning). Then, these initial
experiments led to the creation of Udacity (founded by Thrun) and Coursera
(founded by Ng and Koller).&lt;/p&gt;

&lt;p&gt;I have been keeping an eye on them for some time and, in fact, I have been
contributing to a project similar to &lt;a href=&quot;https://github.com/rg3/youtube-dl&quot;&gt;youtube-dl&lt;/a&gt; (which
&lt;a href=&quot;http://packages.debian.org/sid/youtube-dl&quot;&gt;I package for Debian&lt;/a&gt;), but focused on downloading videos from
Cousera, called &lt;a href=&quot;https://github.com/jplehmann/coursera&quot;&gt;&lt;code&gt;coursera-dl&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started contributing to &lt;code&gt;coursera-dl&lt;/code&gt; because I wanted to stratch some
itches with downloading with &lt;a href=&quot;http://aria2.sourceforge.net/&quot;&gt;&lt;code&gt;aria2c&lt;/code&gt;&lt;/a&gt;, but soon the original
author of the project granted me write permission to the repository and I
have been one of the persons that commits the most, which is strange, since
I was not the original creator of the program.&lt;/p&gt;

&lt;p&gt;So far, from the courses that grant certificates, I have concluded the
following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Algorithms: Design and Analysis, Part 1 (Coursera)&lt;/li&gt;
&lt;li&gt;Machine Learning (Coursera)&lt;/li&gt;
&lt;li&gt;Introduction to Databases (Coursera)&lt;/li&gt;
&lt;li&gt;Quantum Mechanics and Quantum Computation (Coursera)&lt;/li&gt;
&lt;li&gt;Introduction to Cryptography I (Coursera)&lt;/li&gt;
&lt;li&gt;M101P: MongoDB for Developers (10gen)&lt;/li&gt;
&lt;li&gt;M102: MongoDB for DBAs (10gen)&lt;/li&gt;
&lt;li&gt;M101J: MongoDB for Java Developers (10gen)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have to say that this have been a pleasant experience, with some of the
courses being challenging, but not up to what an undergraduate course would
be (and the fears of some people that such courses would threaten the
conventional University-style model are a bit far at this point).&lt;/p&gt;

&lt;p&gt;Anyway, talking about challenging courses, in particular, prof. Umesh
Vazirani&#39;s &quot;Quantum Mechanics and Quantum Computation&quot; had a lot of
(computational) work and this was one of the courses that prompted me to use
a computer algebra system for manipulating some tedious calculations.&lt;/p&gt;

&lt;p&gt;In particular, I used a mix of the &lt;a href=&quot;http://www.sagenb.org/&quot;&gt;online SAGE math server&lt;/a&gt; and
&lt;a href=&quot;http://www.wolframalpha.com/&quot;&gt;Wolfram Alpha&lt;/a&gt;, whichever I found the syntax to be easier to use for
the problem in question. It is with happiness that I see that there are
efforts to &lt;a href=&quot;http://people.debian.org/~thansen/debian-sage-status.html&quot;&gt;get SAGE again packaged in Debian&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another (positively) surprising course has been Dan Boneh&#39;s &quot;Introduction to
Cryptography I&quot;, which was more theoretical and more serious than what I was
expecting. It even included some nice proof sketches and discussion of
recent results. The last course on cryptography that I took was in 1998 and
&lt;em&gt;a lot&lt;/em&gt; of things changed since then, including the way to think about
cryptography. But more on that on a future post.&lt;/p&gt;

&lt;p&gt;There are some other courses that I may be completing soon and that I will
post more about, with some reviews of the good and the bad parts of select
ones.&lt;/p&gt;

	</content>



</entry>

</feed>
