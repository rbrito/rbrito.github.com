<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged android</title>
<link href="http://cynic.cc/blog//tags/android/"/>
<link href="http://cynic.cc/blog//tags/android/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Rogério Brito's Digital Junkyard</name>

</author>




<id>http://cynic.cc/blog//tags/android/</id>

<subtitle type="html">Rogério Brito&#39;s Digital Junkyard</subtitle>
<generator uri="http://ikiwiki.info/">ikiwiki</generator>
<updated>2017-10-19T22:38:56Z</updated>
<entry>
	<title>Android recording audio quality</title>

	<id>http://cynic.cc/blog//posts/2017-04-20-android_recording_audio_quality/</id>

	<link href="http://cynic.cc/blog//posts/2017-04-20-android_recording_audio_quality/"/>






	<category term="android" />

	<category term="audio" />

	<category term="free-software" />

	<category term="multimedia" />


	<updated>2017-08-03T06:48:49Z</updated>
	<published>2017-04-20T03:17:05Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;Roughly sorted by quality:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;amr_nb in 3gpp &amp;lt; amr_wb in 3gpp &amp;lt; aac_lc in m4a &amp;lt; aac+ in m4a (only in Android 4.0+) &amp;lt; opus in webm (only in android 5+) &amp;lt; pcm in wav (only in android 4.1+)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Taking into consideration the compatibility of the codecs (mainly with
Android and with the popular WhatsApp and Telegram messengers), the best
options seem to be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aac_lc in m4a &amp;lt; aac+ in m4a (API &amp;gt;= 16) &amp;lt; vorbis/opus in webm (API &amp;gt;= 21) &amp;lt; pcm in wav (only in android 4.1+)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a device running API 14, we can use something like this
(&lt;code&gt;MediaRecorder.OutputFormat&lt;/code&gt; constants):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For very low quality/very low bitrate/very long recording times, use
AMR-NB in 3GPP container.  Parameters summary: 8kHz and bitrate 12.8kbps
Works pretty much anywhere.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For low quality/low bitrate/long recording times, use AAC in MP4
container, with &lt;strong&gt;&lt;em&gt;m4a&lt;/em&gt;&lt;/strong&gt; extension. Works pretty much anywhere. Example
code adapted from:
https://developer.android.com/guide/topics/media/mediarecorder.html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void startRecording() {
   mRecorder = new MediaRecorder();
   mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
   mRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4); // other?
   mRecorder.setOutputFile(mFileName); // end in m4a, for compatibility
   mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC); // AAC_HE, if supported


   try {
       mRecorder.prepare();
   } catch (IOException e) {
       Log.e(LOG_TAG, &quot;prepare() failed&quot;);
   }


   mRecorder.start();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

	</content>



</entry>
<entry>
	<title>User-Agent strings and privacy</title>

	<id>http://cynic.cc/blog//posts/2015-02-22_user-agent_strings_and_privacy/</id>

	<link href="http://cynic.cc/blog//posts/2015-02-22_user-agent_strings_and_privacy/"/>






	<category term="android" />

	<category term="apple" />

	<category term="browsers" />

	<category term="debian" />

	<category term="free-software" />


	<updated>2017-10-19T22:38:56Z</updated>
	<published>2015-02-22T23:54:27Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;I just had my hands on some mobile devices (a Samsung&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Samsung_Galaxy_Tab_S_8.4&quot;&gt;Galaxy Tab S 8.4&quot;&lt;/a&gt;,
an Apple&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/IPad_Mini_3&quot;&gt;iPad mini 3&lt;/a&gt;, and my no-name tablet that runs Android).&lt;/p&gt;

&lt;p&gt;I got curious to see how the different browsers identify themselves to the
world via their &lt;a href=&quot;https://en.wikipedia.org/wiki/User%20agent&quot;&gt;User agent&lt;/a&gt; strings and I must say that each
browser&#39;s string reveals a lot about both the browser makers and their
philosophies regarding user privacy.&lt;/p&gt;

&lt;p&gt;Here is a simple table that I compiled with the information that I
collected (sorry if it gets too wide):&lt;/p&gt;

&lt;table&gt;
&lt;col /&gt;
&lt;col /&gt;
&lt;col /&gt;
&lt;thead&gt;
&lt;tr&gt;
	&lt;th&gt;Device&lt;/th&gt;
	&lt;th&gt;Browser&lt;/th&gt;
	&lt;th&gt;User-Agent String&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
	&lt;td&gt;Samsung Galaxy Tab S&lt;/td&gt;
	&lt;td&gt;Firefox 35.0&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Android; Tablet; rv:35.0) Gecko/35.0 Firefox/35.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Samsung Galaxy Tab S&lt;/td&gt;
	&lt;td&gt;Firefox 35.0.1&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Android; Tablet; rv:35.0.1) Gecko/35.0.1 Firefox/35.0.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Samsung Galaxy Tab S&lt;/td&gt;
	&lt;td&gt;Android&#39;s 4.4.2 stock browser&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Linux; Android 4.4.2; en-gb; SAMSUNG SM-T700 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Version/1.5 Chrome/28.0.1500.94 Safari/537.36&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Samsung Galaxy Tab S&lt;/td&gt;
	&lt;td&gt;Updated Chrome&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Linux; Android 4.4.2; SM-T700 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.109 Safari/537.36&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Vanilla tablet&lt;/td&gt;
	&lt;td&gt;Android&#39;s 4.1.1 stock browser&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; TB1010 Build/JRO03H) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Vanilla tablet&lt;/td&gt;
	&lt;td&gt;Firefox 35.0.1&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Android; Tablet; rv:35.0.1) Gecko/35.0.1 Firefox/35.0.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;iPad&lt;/td&gt;
	&lt;td&gt;Safari&#39;s from iOS 8.1.3&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (iPad; CPU OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Notebook&lt;/td&gt;
	&lt;td&gt;Debian&#39;s Iceweasel 35.0.1&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (X11; Linux x86_64; rv:35.0) Gecko/20100101 Firefox/35.0 Iceweasel/35.0.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Moto G4 Plus&lt;/td&gt;
	&lt;td&gt;Firefox Focus 2.2&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Linux; Android 7.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/2.2 Chrome/61.0.3163.98 Mobile Safari/537.36&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So, briefly looking at the table above, you can tell that the stock Android
browser reveals quite a bit of information: the model of the device (e.g.,
&lt;code&gt;SAMSUNG SM-T700&lt;/code&gt; or &lt;code&gt;TB1010&lt;/code&gt;) and even the build number (e.g.,
&lt;code&gt;Build/KOT49H&lt;/code&gt; or &lt;code&gt;Build/JRO03H&lt;/code&gt;)!  This is super handy for malicious
websites and I would say that it leaks a lot of possibly undesired
information.&lt;/p&gt;

&lt;p&gt;The iPad is similar, with Safari revealing the version of the iOS that it is
running.  It doesn&#39;t reveal, though, the language that the user is using via
the UA string (it probably does via other HTTP fields).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com/chrome/browser/mobile/&quot;&gt;Chrome&lt;/a&gt; is similar to the stock Android browser here, but, at least, it
doesn&#39;t reveal the language of the user. It does reveal the version of
Android, including the patch-level (that&#39;s a bit too much, IMVHO).&lt;/p&gt;

&lt;p&gt;I would say that the winner respecting privacy of the users among the
browsers that I tested is &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/android/&quot;&gt;Firefox&lt;/a&gt;: it conveys just the bare minimum,
not differentiating from a high-end tablet (Samsung&#39;s Galaxy Tab S with 8
cores) and a vanilla tablet (with 2 cores).  Like Chrome, Firefox still
reveals a bit too much in the form of the patch-level. It should be
sufficient to say that it is version 35.0 even if the user has 35.0.1
installed.&lt;/p&gt;

&lt;p&gt;The bonus points with Firefox is that it is also available on &lt;a href=&quot;https://f-droid.org/&quot;&gt;F-Droid&lt;/a&gt;, in
two versions: as &lt;a href=&quot;https://f-droid.org/repository/browse/?fdid=org.mozilla.firefox&quot;&gt;Firefox itself&lt;/a&gt; and as &lt;a href=&quot;https://f-droid.org/repository/browse/?fdid=org.mozilla.fennec_fdroid&quot;&gt;Fennec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit, 2017-10-19:&lt;/em&gt; Added the User-Agent string of Firefox Focus. Quite
different from regular Firefox, as we can see.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>More completed MOOCs</title>

	<id>http://cynic.cc/blog//posts/2014-03-03_more_completed_moocs/</id>

	<link href="http://cynic.cc/blog//posts/2014-03-03_more_completed_moocs/"/>






	<category term="android" />

	<category term="debian" />

	<category term="java" />

	<category term="life" />

	<category term="mooc" />

	<category term="study" />


	<updated>2014-03-03T05:38:09Z</updated>
	<published>2014-03-03T05:35:11Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;This weekend I received my 17th certification (or Statement of
Accomplishment) for MOOCs. In particular, this last MOOC that I took was
&lt;a href=&quot;https://www.coursera.org/course/androidapps101&quot;&gt;Creative, Serious and Playful Science of Android Apps&lt;/a&gt;, offered by
&lt;a href=&quot;https://www.coursera.org/instructor/lawrenceangrave&quot;&gt;Lawrence Angrave&lt;/a&gt; of &lt;a href=&quot;https://www.coursera.org/illinois&quot;&gt;University of Illinois at Urbana-Champaign&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While I certainly knew that the course was an Introduction to Programming,
the reasons I took it were twofold:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For the &quot;novelty&quot; (for me, at least) of writing some Android Apps&lt;/li&gt;
&lt;li&gt;To reacquaint myself with Java, which I have not touched since 1999, when
&lt;a href=&quot;https://github.com/rbrito/old-projects&quot;&gt;I wrote a compiler&lt;/a&gt;, in the ages of JDK 1.0 being transitioned to
JDK 1.1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think that the time the course took (and which I invested in) was really
well spent. In fact, I learned some nice things which I would &lt;em&gt;not&lt;/em&gt; have
touched otherwise. For instance, I made the conscious effort to use an IDE
(Eclipse), despite being a person that would do most of the things inside
Emacs and compile the programs with command-line tools.&lt;/p&gt;

&lt;p&gt;Despite being huge, Eclipse has some really nice features and the
auto-completion is amazing. Since Java is so strongly typed and Eclipse
knows Java pretty well, it almost completely writes your programs for you.
&lt;img src=&quot;http://cynic.cc/blog//smileys/smile.png&quot; alt=&quot;:)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, my interest also made me want to streamline the build process and
use the command line tools (with ant, another tool that was &quot;alien&quot; to me,
having used makefiles for everything that I needed).&lt;/p&gt;

&lt;p&gt;The use of Eclipse (and the Android development environment in general) in
my Debian unstable computers
&lt;a href=&quot;http://cynic.cc/blog//posts/2014-01-17-developing_for_android_with_debian/&quot;&gt;was not&lt;/a&gt;
&lt;a href=&quot;https://bugs.debian.org/734674&quot;&gt;without problems&lt;/a&gt;, but after spending more time trying to fix Eclipse
than really doing the homework (and pulling the little hair that I still
have left), one really helpful post &lt;a href=&quot;http://aleksz-programming.blogspot.com/2013/03/eclipse-and-webkit-on-ubuntu-64.html&quot;&gt;nailed it&lt;/a&gt;. (Yes, I had to remove
other packages like gimp, but such is life).&lt;/p&gt;

&lt;p&gt;While playing with the Android side of things, I put one badly written (and
&lt;em&gt;not&lt;/em&gt; really &quot;android-ish&quot;) app in &lt;a href=&quot;https://github.com/rbrito/toy-android-apps&quot;&gt;a github repository&lt;/a&gt; (which I think
is aptly named &quot;Toy Android Apps&quot;), which served me the purpose of learning
some Android-specific concepts.&lt;/p&gt;

&lt;p&gt;But the course was helpful not only to get in touch with the tools (Eclipse,
ant, running Android virtual machines with the help of kvm), but also on the
Java side. I lost a bit of the prejudice against it (even though I still
think it is a verbose language, especially when compared to, say Python),
and I, also intend to contribute to one apache project or another that have
low-hanging fruits.  Actually, I have signed their
&lt;a href=&quot;https://www.apache.org/licenses/icla.txt&quot;&gt;Contributor License Agreement&lt;/a&gt; and I even had
&lt;a href=&quot;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1559792&quot;&gt;my first patch accepted&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Aside: Well, sadly SVN doesn&#39;t support different committer and author fields
like git does and it seems that doing many small commits may not be the
Apache way of doing things&amp;mdash;but the important part of all this is that
the code is there and there is so much more to be done.&lt;/p&gt;

&lt;p&gt;Aside #2: After a &lt;em&gt;lot&lt;/em&gt; of time spent converting the repository to git
(which is, after all, what I use), I put &lt;a href=&quot;https://github.com/rbrito/commons-graph&quot;&gt;a mirror&lt;/a&gt; of Apache&#39;s the
commons graph project.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Developing for Android with Debian</title>

	<id>http://cynic.cc/blog//posts/2014-01-17-developing_for_android_with_debian/</id>

	<link href="http://cynic.cc/blog//posts/2014-01-17-developing_for_android_with_debian/"/>






	<category term="android" />

	<category term="debian" />

	<category term="free-software" />

	<category term="java" />


	<updated>2014-01-17T22:18:01Z</updated>
	<published>2014-01-17T22:18:04Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;I have just enrolled in a MOOC to learn about programming with Android.
There are many tutorials and reports of people using Linux for the
development of the apps out there, but, unfortunately, many of them are
outdated or contain misleading information.&lt;/p&gt;

&lt;p&gt;You will find bazillion instructions out there telling you to install
JDK6. (Even the instructions in the MOOCs say so, and Google says that it is
the only supported version of Java). Even more than that, some of them will
tell you that you should &lt;em&gt;not&lt;/em&gt; use OpenJDK, but use Oracle&#39;s JDK instead.&lt;/p&gt;

&lt;p&gt;So, if you have a pure &lt;code&gt;amd64&lt;/code&gt; system and you try to install the x86-64
version of Google&#39;s Android Developer Tools (ADT), you are going to have a
surprise: you will have all sorts of programs telling you that you have file
not found, even though the required binaries are there.&lt;/p&gt;

&lt;p&gt;(This is, of course, besides install &lt;code&gt;openjdk-7-jdk&lt;/code&gt;, if you wish to use the
integrated Eclipse environment).&lt;/p&gt;

&lt;p&gt;Turns out that the so-called 64-bit ADT/SDK actually has many 32-bit
executables(!) and they aren&#39;t statically linked. Inspecting them, I needed
the following packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    gcc-4.8-base:i386
    libc6-i686:i386
    libc6:i386
    libgcc1:i386
    libstdc++6:i386
    zlib1g:i386
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is worth observing that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libstdc++6:i386&lt;/code&gt; depends (transitively) on &lt;code&gt;libc6:i386&lt;/code&gt;, &lt;code&gt;libgcc1:i386&lt;/code&gt;,
and &lt;code&gt;gcc-4.8-base:i386&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zlib1g:i386&lt;/code&gt; depends (transitively) on &lt;code&gt;libc6:i386&lt;/code&gt;, &lt;code&gt;libgcc1:i386&lt;/code&gt;, and
&lt;code&gt;gcc-4.8-base:i386&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given the above, and given that the version of the GCC libraries can vary a
lot, it is perhaps better to simply do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install libstdc++6:i386 zlib1g:i386
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although not necessary, since you are using an amd64 machine, your computer
already supports many more recent instructions that will be used if you
install the package &lt;code&gt;libc6-i686:i386&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To avoid the emulator from spitting out error messages related to &lt;code&gt;libGL.so&lt;/code&gt;,
install &lt;code&gt;libgl1-mesa-dev&lt;/code&gt; (note: &lt;em&gt;not&lt;/em&gt; &lt;code&gt;i386&lt;/code&gt; here).&lt;/p&gt;

&lt;p&gt;This way, you will be able to run the embedded QEMU with full KVM
acceleration if you pass the options &lt;code&gt;-qemu -m 1024 -enable-kvm&lt;/code&gt; on
Eclipse&#39;s &quot;Run &gt; Run Configurations... &gt; Target &gt; Additional Emulator
Command Line Options&quot;.&lt;/p&gt;

&lt;p&gt;After that, you are probably good to go.&lt;/p&gt;

	</content>



</entry>

</feed>
