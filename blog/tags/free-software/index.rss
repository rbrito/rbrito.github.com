<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/"
     xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>pages tagged free-software</title>
<link>http://cynic.cc/blog//tags/free-software/</link>
<atom:link href="http://cynic.cc/blog//tags/free-software/index.rss" rel="self" type="application/rss+xml"/>

<description>Rog√©rio Brito&#39;s Digital Junkyard</description>
<generator>ikiwiki</generator>
<pubDate>Thu, 22 Mar 2018 13:41:01 -0300</pubDate>
<item>
	<title>JUnit 5</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2017-11-10_junit_5/</guid>

	<link>http://cynic.cc/blog//posts/2017-11-10_junit_5/</link>



	<category>free-software</category>

	<category>java</category>

	<category>life</category>


	<pubDate>Fri, 10 Nov 2017 03:21:06 -0200</pubDate>
	<dcterms:modified>2017-11-10T05:46:00Z</dcterms:modified>


	<description>&lt;p&gt;If you want to use &lt;a href=&quot;http://junit.org/junit5/&quot;&gt;JUnit 5&lt;/a&gt;, the latest release of &lt;a href=&quot;http://junit.org/&quot;&gt;JUnit&lt;/a&gt;, from
Eclipse, then you have to change your import from &lt;code&gt;import org.junit.Test;&lt;/code&gt;
to &lt;code&gt;import org.junit.jupiter.api.Test;&lt;/code&gt;. Notice the &lt;code&gt;jupiter.api&lt;/code&gt; there in
the middle.&lt;/p&gt;

&lt;p&gt;Otherwise, the test runner will complain and tell you that you don&#39;t have
tests in your project.&lt;/p&gt;

&lt;p&gt;The not-so-minimal test that I created was the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package test;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

import org.junit.jupiter.api.Test;

class FirstTest {
    @Test
    void test() {
        assertThat(1+1, is(equalTo(2)));
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>


</item>
<item>
	<title>Some activities of the day</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2017-11-06_random_notes/</guid>

	<link>http://cynic.cc/blog//posts/2017-11-06_random_notes/</link>



	<category>debian</category>

	<category>free-software</category>

	<category>hardware</category>

	<category>java</category>

	<category>life</category>

	<category>linux</category>

	<category>parenting</category>


	<pubDate>Mon, 06 Nov 2017 22:52:59 -0200</pubDate>
	<dcterms:modified>2018-03-22T16:41:01Z</dcterms:modified>


	<description>&lt;p&gt;Yesterday, I printed the first draft of the first chapter when my little boy
was here and he was impressed with this strange object called a &quot;printer&quot;.
Before I printed what I needed, I fired up LibreOffice and chose the biggest
font size that was available and let him type his first name by himself.
He was quicker than I thought with a keyboard. After seeing me print his
first name, he was jumping up and down with joy of having created something
and even showed grandma and grandpa what he had done.&lt;/p&gt;

&lt;p&gt;He, then, wanted more and I taught him how to use that backspace key, what
it meant and he wanted to type his full name. I let him and taught him that
there is a key called space that he should type every time he wants to start
a new word and, in the end, he typed his first two names. To my surprise, he
memorized the icon with the printer (which I must say that I have to hunt
every time, since it seems so similar to the adjacent ones!) and pressed
this new key called &quot;Enter&quot;. When he pressed, he wasn&#39;t expecting the
printer on his right to start making noises and printing his name.&lt;/p&gt;

&lt;p&gt;He was so excited and it was so nice to see his reaction full of joy to get
a job done!&lt;/p&gt;

&lt;p&gt;I am thinking of getting a spare computer, building it with him and for him,
so that he can call it his computer every time he comes to see daddy. As a
serendipitous situation, &lt;a href=&quot;https://www.packtpub.com/&quot;&gt;Packt Publishing&lt;/a&gt; offered yesterday their
title &lt;a href=&quot;https://www.packtpub.com/application-development/python-projects-kids&quot;&gt;&quot;Python Projects for Kids&quot;&lt;/a&gt;. Unfortunately, he does
not yet know how to read, but I guess that the right age is coming soon,
which is a good thing to make him be educated &quot;the right way&quot; (that is, with
the best support, teaching and patience that I can give him).&lt;/p&gt;

&lt;p&gt;Anyway, I printed the first draft of the first chapter and today I have to
turn it in.&lt;/p&gt;

&lt;p&gt;As I write this, I am &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&quot;&gt;downloading a virtual machine from Microsoft&lt;/a&gt; to
try to install Java on it. Let me see if it works. I have none of the
virtualization options used, tough the closest seems to be virtualbox.&lt;/p&gt;

&lt;p&gt;Let me cross my fingers.&lt;/p&gt;

&lt;p&gt;In other news, I updated some of the tags of very old posts of this blog,
and I am seriously thinking about switching from &lt;a href=&quot;https://ikiwiki.info/&quot;&gt;ikiwiki&lt;/a&gt; to another
blog platform. It is &lt;em&gt;slow&lt;/em&gt;, &lt;em&gt;very slow&lt;/em&gt; on my system with the repositories
that I have, especially on my armel system. Some non-interpreted system
would be best, but I don&#39;t know if such a thing even exists. But the killer
problem is that it doesn&#39;t support easily the typing of Mathematics (even
though a &lt;a href=&quot;https://github.com/bk/ikiwiki-plugin-mathjax&quot;&gt;3rd party plugin&lt;/a&gt; for MathJax exists).&lt;/p&gt;

&lt;p&gt;On the other hand, I just received &lt;a href=&quot;https://twitter.com/telegram/status/927470283094499329&quot;&gt;an answer on twitter&lt;/a&gt; from @telegram and
it was nice:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello, Telegram supports bold and italic. You can type &lt;code&gt;**bold**&lt;/code&gt; and &lt;code&gt;__italic__&lt;/code&gt;. On mobile, you can also highlight text for this as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is nice that this works with &lt;a href=&quot;https://packages.debian.org/sid/telegram-desktop&quot;&gt;telegram-desktop&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;Besides that, I filed some bugs on Debian&#39;s BTS, responded to some issues on
my projects on GitHub (I&#39;m slowly getting back on maintaining things) and
file &lt;a href=&quot;https://github.com/bk/ikiwiki-plugin-mathjax/issues/3&quot;&gt;wishlist bugs on some other projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and I grabbed a copy of &quot;Wonder woman&quot; (&quot;Mulher Maravilha&quot;) and
&quot;Despicable Me 3&quot; (&quot;Meu Malvado Favorito 3&quot;) dubbed in Brazilian Portuguese
for my son. I have to convert the audio from AAC-LC in 6 channels to AC3 or
to stereo. Otherwise, my TVs have problem with the videos (one refuses to
play the entire file and another plays the audio with sounds of hiccups).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; After converting the VirtualBox image taken from Microsoft, I
could easily use &lt;code&gt;qemu&lt;/code&gt;/&lt;code&gt;kvm&lt;/code&gt; to create screenshots of the installation of
Java.  The command that I used (for future reference) is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
qemu-system-x86_64 -enable-kvm -m 4096 -smp 2 -net nic,model=e1000 -net user -soundhw ac97 -drive index=0,media=disk,cache=unsafe,file=win7.qcow2
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Fixed some typos.&lt;/p&gt;
</description>


</item>
<item>
	<title>Comparison of JDK installation of various Linux distributions</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2017-11-02_java_install_in_various_linuxes/</guid>

	<link>http://cynic.cc/blog//posts/2017-11-02_java_install_in_various_linuxes/</link>



	<category>debian</category>

	<category>free-software</category>

	<category>java</category>

	<category>linux</category>

	<category>ubuntu</category>


	<pubDate>Thu, 02 Nov 2017 23:13:56 -0200</pubDate>
	<dcterms:modified>2017-11-03T01:02:44Z</dcterms:modified>


	<description>&lt;p&gt;Today I spent some time in the morning seeing how one would install the JDK
on Linux distributions. This is to create a little comparative tutorial to
teach introductory Java.&lt;/p&gt;

&lt;p&gt;Installing the JDK is, thanks to the OpenJDK developers in Debian and Ubuntu
(Matthias Klose and helpers), a very easy task. You simply type something
like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install openjdk-8-jdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since for a student it is better to have everything for experiments, I
install the &lt;a href=&quot;https://packages.debian.org/sid/openjdk-8-jdk&quot;&gt;full version&lt;/a&gt;, not only the
&lt;a href=&quot;https://packages.debian.org/sid/openjdk-8-jdk-headless&quot;&gt;&lt;code&gt;-headless&lt;/code&gt;&lt;/a&gt; version. Given my familiarity with
Debian/Ubuntu, I didn&#39;t have to think about the way of installing it, of
course.&lt;/p&gt;

&lt;p&gt;But as this is a tutorial meant to be as general as I can, I tried also to
include instructions on how to install Java on other distributions. The
first two that came to my mind were &lt;a href=&quot;https://www.opensuse.org/&quot;&gt;openSUSE&lt;/a&gt; and &lt;a href=&quot;https://getfedora.org/&quot;&gt;Fedora&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Both use the RPM package format for their &quot;native&quot; packages (in the same
sense that Debian uses DEB packages for &quot;native&quot; packages). But they use
different higher-level tools to install such packages: Fedora uses a tool
called &lt;a href=&quot;https://fedoraproject.org/wiki/DNF&quot;&gt;&lt;code&gt;dnf&lt;/code&gt;&lt;/a&gt;, while openSUSE uses &lt;a href=&quot;https://en.opensuse.org/SDB:Zypper_usage&quot;&gt;&lt;code&gt;zypper&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To try these distributions, I got their netinstall ISOs and used
&lt;code&gt;qemu&lt;/code&gt;/&lt;code&gt;kvm&lt;/code&gt; to install on a virtual machine. I used the following to
install/run the virtual machines (the example below, is, of course, for openSUSE):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;qemu-system-x86_64 -enable-kvm -m 4096 -smp 2 -net nic,model=e1000 -net user -drive index=0,media=disk,cache=unsafe,file=suse.qcow2 -cdrom openSUSE-Leap-42.3-NET-x86_64.iso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names of the packages also change from one distribution to another. On
Fedora, I had to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnf install java-1.8.0-openjdk-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On openSUSE, I had to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zypper install java-1_8_0-openjdk-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that one distribution uses dots in the names of the packages while the
other uses underscores.&lt;/p&gt;

&lt;p&gt;One interesting thing that I noticed with &lt;code&gt;dnf&lt;/code&gt; was that, when I used it, it
automatically refreshed the package lists from the network, something which
I forgot, and it was a pleasant surprise. I don&#39;t know about &lt;code&gt;zypper&lt;/code&gt;, but I
guess that it probably had fresh indices when the installation finished.&lt;/p&gt;

&lt;p&gt;Both installations were effortless after I knew the names of the packages to
install.&lt;/p&gt;

&lt;p&gt;Oh, BTW, in my 5 minute exploration with these distributions, I noticed that
if you don&#39;t want the JDK, but only the JRE, then you omit the &lt;code&gt;-devel&lt;/code&gt;
suffix.  It makes sense when you think about it, for consistency with other
packages, but Debian&#39;s conventions also make sense (JRE with &lt;code&gt;-jre&lt;/code&gt; suffix,
JDK with &lt;code&gt;-jdk&lt;/code&gt; suffix).&lt;/p&gt;

&lt;p&gt;I failed miserably to use Fedora&#39;s prebaked, vanilla
&lt;a href=&quot;https://alt.fedoraproject.org/cloud/&quot;&gt;cloud image&lt;/a&gt;, as I couldn&#39;t login on this image and I decided
to just install the whole OS on a fresh virtual machine.&lt;/p&gt;

&lt;p&gt;I don&#39;t have instructions on how to install on &lt;a href=&quot;https://getfedora.org/&quot;&gt;Gentoo&lt;/a&gt; nor on
&lt;a href=&quot;https://www.archlinux.org/&quot;&gt;Arch&lt;/a&gt;, though.&lt;/p&gt;

&lt;p&gt;I now see how hard it is to cover instructions/provide software for as many
distributions as you wish, given the multitude of package managers,
conventions etc.&lt;/p&gt;
</description>


</item>
<item>
	<title>Android recording audio quality</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2017-04-20-android_recording_audio_quality/</guid>

	<link>http://cynic.cc/blog//posts/2017-04-20-android_recording_audio_quality/</link>



	<category>android</category>

	<category>audio</category>

	<category>free-software</category>

	<category>multimedia</category>


	<pubDate>Thu, 20 Apr 2017 00:17:05 -0300</pubDate>
	<dcterms:modified>2017-08-03T06:48:49Z</dcterms:modified>


	<description>&lt;p&gt;Roughly sorted by quality:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;amr_nb in 3gpp &amp;lt; amr_wb in 3gpp &amp;lt; aac_lc in m4a &amp;lt; aac+ in m4a (only in Android 4.0+) &amp;lt; opus in webm (only in android 5+) &amp;lt; pcm in wav (only in android 4.1+)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Taking into consideration the compatibility of the codecs (mainly with
Android and with the popular WhatsApp and Telegram messengers), the best
options seem to be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aac_lc in m4a &amp;lt; aac+ in m4a (API &amp;gt;= 16) &amp;lt; vorbis/opus in webm (API &amp;gt;= 21) &amp;lt; pcm in wav (only in android 4.1+)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a device running API 14, we can use something like this
(&lt;code&gt;MediaRecorder.OutputFormat&lt;/code&gt; constants):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For very low quality/very low bitrate/very long recording times, use
AMR-NB in 3GPP container.  Parameters summary: 8kHz and bitrate 12.8kbps
Works pretty much anywhere.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For low quality/low bitrate/long recording times, use AAC in MP4
container, with &lt;strong&gt;&lt;em&gt;m4a&lt;/em&gt;&lt;/strong&gt; extension. Works pretty much anywhere. Example
code adapted from:
https://developer.android.com/guide/topics/media/mediarecorder.html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void startRecording() {
   mRecorder = new MediaRecorder();
   mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
   mRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4); // other?
   mRecorder.setOutputFile(mFileName); // end in m4a, for compatibility
   mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC); // AAC_HE, if supported


   try {
       mRecorder.prepare();
   } catch (IOException e) {
       Log.e(LOG_TAG, &quot;prepare() failed&quot;);
   }


   mRecorder.start();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>


</item>
<item>
	<title>Partially switching to Chromium</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2016-03-29_partially_switching_to_chromium/</guid>

	<link>http://cynic.cc/blog//posts/2016-03-29_partially_switching_to_chromium/</link>



	<category>chromium</category>

	<category>debian</category>

	<category>firefox</category>

	<category>free-software</category>

	<category>linux</category>


	<pubDate>Tue, 29 Mar 2016 02:25:15 -0300</pubDate>
	<dcterms:modified>2016-03-29T05:30:50Z</dcterms:modified>


	<description>&lt;p&gt;In the interest of being as brief as possible (just ask for details if you
want to know more or if you think that it would help), I have started,
against my preferences, to start using chromium from Debian instead of
Firefox (aka, Iceweasel).&lt;/p&gt;

&lt;p&gt;The reason? I have a slow computer (a Core 2 Duo T7250). My main computer.
My workhorse.&lt;/p&gt;

&lt;p&gt;There are some sites that even with an empty profile and a vanilla Firefox
build right from Mozilla Foundation cause Firefox to generate a very heavy
CPU load.  I &lt;a href=&quot;https://twitter.com/rtdbrito/status/703098330629296128&quot;&gt;briefly reported this via Twitter&lt;/a&gt; to one (but not the
only!) of the &lt;a href=&quot;https://web.telegram.org/&quot;&gt;sites in question&lt;/a&gt; and to &lt;a href=&quot;https://www.fxsitecompat.com/&quot;&gt;Firefox Site Compatibility&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What do I see? Many CSS and redraw events (thanks to Firefox&#39;s profiling
tools). In fact, as many events that Firefox alone is able to completely
take over 1 (of the 2) cores that I have, with just that single tab open.&lt;/p&gt;

&lt;p&gt;I don&#39;t see those problems with Chromium, unfortunately (or, at least, they
are not that perceptible to my computer&#39;s CPU).&lt;/p&gt;

&lt;p&gt;So, before I go on and formally file a bug report, I would love to confirm
if other people see the same problems that I am seeing. Do you also see
something similar? Your input is highly welcome!&lt;/p&gt;
</description>


</item>
<item>
	<title>A Small Python Project (coursera-dl) Activites</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2015-05-16_coursera-dl_activities/</guid>

	<link>http://cynic.cc/blog//posts/2015-05-16_coursera-dl_activities/</link>



	<category>debian</category>

	<category>free-software</category>

	<category>pypi</category>

	<category>python</category>

	<category>software-engineering</category>


	<pubDate>Sat, 16 May 2015 01:54:42 -0300</pubDate>
	<dcterms:modified>2015-05-30T00:01:26Z</dcterms:modified>


	<description>&lt;p&gt;Lately, I have been dedicating a lot of my time (well, at least compared to
what I used to) to Free Software projects. In particular, I have spent a
moderate amount of time with two projects written in Python.&lt;/p&gt;

&lt;p&gt;In this post, I want to talk about the first, more popular project is called
&lt;a href=&quot;https://github.com/coursera-dl/coursera&quot;&gt;coursera-dl&lt;/a&gt;.  To be honest, I think that I may have
devoted much more time to it than to any other project in particular.&lt;/p&gt;

&lt;p&gt;With it I started to learn (besides the practices that I already used in
Debian), how to program in Python, how to use unit tests (I started with
Python&#39;s built-in &lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; framework, then progressed to
&lt;a href=&quot;https://nose.readthedocs.org/&quot;&gt;nose&lt;/a&gt;, and I am now using &lt;a href=&quot;http://pytest.org/&quot;&gt;pytest&lt;/a&gt;),
&lt;a href=&quot;https://travis-ci.org/coursera-dl/coursera&quot;&gt;hooking up the results of the tests&lt;/a&gt; with a continuous
integration system (in this case, &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I must say that I am sold on this idea of testing software (after being a
skeptical for way too long) and I can say that I find hacking on other
projects without proper testing a bit uncomfortable, since I don&#39;t know if I
am breaking unrelated parts of the project.&lt;/p&gt;

&lt;p&gt;My use/migration to pytest was the result of a campaign from &lt;code&gt;pytest.org&lt;/code&gt;
called &lt;a href=&quot;http://pytest.org/latest/adopt.html&quot;&gt;Adopt Pytest Month&lt;/a&gt; which a kind user of the project
&lt;a href=&quot;https://github.com/coursera-dl/coursera/issues/317&quot;&gt;let me know about&lt;/a&gt;.  I got a
&lt;a href=&quot;https://meejah.ca/&quot;&gt;very skilled volunteer&lt;/a&gt; assigned from pytest to our project.
Besides learning from their pull requests, one side-effect of this whole
story was that I spent a moderate amount of hours trying to understand how
properly package and distribute things on &lt;a href=&quot;https://pypi.python.org/pypi&quot;&gt;PyPI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One tip learned along the way: contrary to the official documentation, use
&lt;a href=&quot;https://pypi.python.org/pypi/twine&quot;&gt;twine&lt;/a&gt;, &lt;em&gt;not&lt;/em&gt; &lt;a href=&quot;https://docs.python.org/2/distutils/packageindex.html#the-upload-command&quot;&gt;&lt;code&gt;python setup.py upload&lt;/code&gt;&lt;/a&gt;. It is more
flexible for uploading your package to PyPI.&lt;/p&gt;

&lt;p&gt;You can see &lt;a href=&quot;https://pypi.python.org/pypi/coursera&quot;&gt;the package on PyPI&lt;/a&gt;.  Anyway, I made the
first upload of the package to PyPI on the 1st of May and it already has
almost 1500 downloads, which is far more than what I expected.&lt;/p&gt;

&lt;p&gt;A word of warning: there are other similarly named projects, but they don&#39;t
seem to have as much following as we have. A speculation from my side is
that this may be, perhaps, due to me spending &lt;em&gt;a lot&lt;/em&gt; of time interacting
with users in the bug tracker that github provides.&lt;/p&gt;

&lt;p&gt;Anyway, installation of the program is now as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install coursera
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And all the dependencies will be neatly pulled in, without having to mess
with multi-step procedures. This is a big win for the users.&lt;/p&gt;

&lt;p&gt;Also, I even had an &lt;a href=&quot;https://github.com/coursera-dl/coursera/pull/288#issuecomment-69610097&quot;&gt;offer to package the program&lt;/a&gt; to
have it available in Debian!&lt;/p&gt;

&lt;p&gt;Well, despite all the time that this project demanded, I think that I have
only good things to say, especially to the original author, &lt;a href=&quot;https://twitter.com/jplehmann&quot;&gt;John Lehmann&lt;/a&gt;. &lt;img src=&quot;http://cynic.cc/blog//smileys/smile.png&quot; alt=&quot;:)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you like the project, &lt;a href=&quot;https://twitter.com/rtdbrito&quot;&gt;please let me know&lt;/a&gt; and consider
yourselves invited to participate &lt;a href=&quot;https://github.com/coursera-dl/coursera#fork-destination-box&quot;&gt;lending a hand&lt;/a&gt;, testing/using the
program or &lt;a href=&quot;https://github.com/coursera-dl/coursera/issues&quot;&gt;triaging some bugs&lt;/a&gt;.&lt;/p&gt;
</description>


</item>
<item>
	<title>User-Agent strings and privacy</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2015-02-22_user-agent_strings_and_privacy/</guid>

	<link>http://cynic.cc/blog//posts/2015-02-22_user-agent_strings_and_privacy/</link>



	<category>android</category>

	<category>apple</category>

	<category>browsers</category>

	<category>debian</category>

	<category>free-software</category>


	<pubDate>Sun, 22 Feb 2015 20:54:27 -0300</pubDate>
	<dcterms:modified>2017-10-19T22:38:56Z</dcterms:modified>


	<description>&lt;p&gt;I just had my hands on some mobile devices (a Samsung&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Samsung_Galaxy_Tab_S_8.4&quot;&gt;Galaxy Tab S 8.4&quot;&lt;/a&gt;,
an Apple&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/IPad_Mini_3&quot;&gt;iPad mini 3&lt;/a&gt;, and my no-name tablet that runs Android).&lt;/p&gt;

&lt;p&gt;I got curious to see how the different browsers identify themselves to the
world via their &lt;a href=&quot;https://en.wikipedia.org/wiki/User%20agent&quot;&gt;User agent&lt;/a&gt; strings and I must say that each
browser&#39;s string reveals a lot about both the browser makers and their
philosophies regarding user privacy.&lt;/p&gt;

&lt;p&gt;Here is a simple table that I compiled with the information that I
collected (sorry if it gets too wide):&lt;/p&gt;

&lt;table&gt;
&lt;col /&gt;
&lt;col /&gt;
&lt;col /&gt;
&lt;thead&gt;
&lt;tr&gt;
	&lt;th&gt;Device&lt;/th&gt;
	&lt;th&gt;Browser&lt;/th&gt;
	&lt;th&gt;User-Agent String&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
	&lt;td&gt;Samsung Galaxy Tab S&lt;/td&gt;
	&lt;td&gt;Firefox 35.0&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Android; Tablet; rv:35.0) Gecko/35.0 Firefox/35.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Samsung Galaxy Tab S&lt;/td&gt;
	&lt;td&gt;Firefox 35.0.1&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Android; Tablet; rv:35.0.1) Gecko/35.0.1 Firefox/35.0.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Samsung Galaxy Tab S&lt;/td&gt;
	&lt;td&gt;Android&#39;s 4.4.2 stock browser&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Linux; Android 4.4.2; en-gb; SAMSUNG SM-T700 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Version/1.5 Chrome/28.0.1500.94 Safari/537.36&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Samsung Galaxy Tab S&lt;/td&gt;
	&lt;td&gt;Updated Chrome&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Linux; Android 4.4.2; SM-T700 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.109 Safari/537.36&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Vanilla tablet&lt;/td&gt;
	&lt;td&gt;Android&#39;s 4.1.1 stock browser&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; TB1010 Build/JRO03H) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Vanilla tablet&lt;/td&gt;
	&lt;td&gt;Firefox 35.0.1&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Android; Tablet; rv:35.0.1) Gecko/35.0.1 Firefox/35.0.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;iPad&lt;/td&gt;
	&lt;td&gt;Safari&#39;s from iOS 8.1.3&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (iPad; CPU OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Notebook&lt;/td&gt;
	&lt;td&gt;Debian&#39;s Iceweasel 35.0.1&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (X11; Linux x86_64; rv:35.0) Gecko/20100101 Firefox/35.0 Iceweasel/35.0.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;Moto G4 Plus&lt;/td&gt;
	&lt;td&gt;Firefox Focus 2.2&lt;/td&gt;
	&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Linux; Android 7.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/2.2 Chrome/61.0.3163.98 Mobile Safari/537.36&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So, briefly looking at the table above, you can tell that the stock Android
browser reveals quite a bit of information: the model of the device (e.g.,
&lt;code&gt;SAMSUNG SM-T700&lt;/code&gt; or &lt;code&gt;TB1010&lt;/code&gt;) and even the build number (e.g.,
&lt;code&gt;Build/KOT49H&lt;/code&gt; or &lt;code&gt;Build/JRO03H&lt;/code&gt;)!  This is super handy for malicious
websites and I would say that it leaks a lot of possibly undesired
information.&lt;/p&gt;

&lt;p&gt;The iPad is similar, with Safari revealing the version of the iOS that it is
running.  It doesn&#39;t reveal, though, the language that the user is using via
the UA string (it probably does via other HTTP fields).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com/chrome/browser/mobile/&quot;&gt;Chrome&lt;/a&gt; is similar to the stock Android browser here, but, at least, it
doesn&#39;t reveal the language of the user. It does reveal the version of
Android, including the patch-level (that&#39;s a bit too much, IMVHO).&lt;/p&gt;

&lt;p&gt;I would say that the winner respecting privacy of the users among the
browsers that I tested is &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/android/&quot;&gt;Firefox&lt;/a&gt;: it conveys just the bare minimum,
not differentiating from a high-end tablet (Samsung&#39;s Galaxy Tab S with 8
cores) and a vanilla tablet (with 2 cores).  Like Chrome, Firefox still
reveals a bit too much in the form of the patch-level. It should be
sufficient to say that it is version 35.0 even if the user has 35.0.1
installed.&lt;/p&gt;

&lt;p&gt;The bonus points with Firefox is that it is also available on &lt;a href=&quot;https://f-droid.org/&quot;&gt;F-Droid&lt;/a&gt;, in
two versions: as &lt;a href=&quot;https://f-droid.org/repository/browse/?fdid=org.mozilla.firefox&quot;&gt;Firefox itself&lt;/a&gt; and as &lt;a href=&quot;https://f-droid.org/repository/browse/?fdid=org.mozilla.fennec_fdroid&quot;&gt;Fennec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit, 2017-10-19:&lt;/em&gt; Added the User-Agent string of Firefox Focus. Quite
different from regular Firefox, as we can see.&lt;/p&gt;
</description>


</item>
<item>
	<title>Uploading SICP to Youtube</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2015-01-17_uploading_sicp_to_youtube/</guid>

	<link>http://cynic.cc/blog//posts/2015-01-17_uploading_sicp_to_youtube/</link>



	<category>debian</category>

	<category>free-software</category>

	<category>programming</category>

	<category>study</category>

	<category>video</category>


	<pubDate>Sat, 17 Jan 2015 23:52:14 -0200</pubDate>
	<dcterms:modified>2015-01-26T03:18:00Z</dcterms:modified>


	<description>&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;I am &lt;a href=&quot;http://www.cs.berkeley.edu/~bh/sicp.html&quot;&gt;not alone&lt;/a&gt; in considering &lt;a href=&quot;https://en.wikipedia.org/wiki/Harold%20Abelson&quot;&gt;Harold Abelson&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Gerald%20Jay%20Sussman&quot;&gt;Gerald Jay Sussman&lt;/a&gt;&#39;s &lt;a href=&quot;http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/&quot;&gt;recorded lectures&lt;/a&gt; based on their
book &quot;&lt;a href=&quot;https://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;&quot; is a
masterpiece.&lt;/p&gt;

&lt;p&gt;There are many things to like about the content of the lectures, beginning
with some pearls and wisdom about the craft of writing software (even though
this is not really a &quot;software enginneering&quot; book), the clarity with which
the concepts are described, the &lt;a href=&quot;https://mitpress.mit.edu/sicp/&quot;&gt;Freedom-friendly&lt;/a&gt; aspects of the authors
regarding the material that they produced and much, the breadth of the
subjects covered and much more.&lt;/p&gt;

&lt;h1 id=&quot;thevideostheirlengthandsplittingthem&quot;&gt;The videos, their length, and splitting them&lt;/h1&gt;

&lt;p&gt;The course consists of 20 &lt;a href=&quot;https://www.youtube.com/playlist?list=PLE18841CABEA24090&quot;&gt;video files&lt;/a&gt; and they are all uploaded on
Youtube already.&lt;/p&gt;

&lt;p&gt;There is one thing, though: while the lectures are naturally divided into
segments (the instructors took a break in after every 30 minutes or so worth
of lectures), the videos corresponding to each lecture have all the segments
concatenated.&lt;/p&gt;

&lt;p&gt;To better watch them, accounting for the easier possibility to put a few of
the lectures in a mobile device or to avoid fast forwarding long videos from
my NAS when I am watching them on my TV (and some other factors), I decided
to sit down, take notes for each video of where the breaks where, and write
a simple Python script to help split the videos in segments, and, then,
reencode the segments.&lt;/p&gt;

&lt;p&gt;I decided not to take the videos from Youtube to perform my splitting
activities, but, instead, to operate on one of the &quot;sources&quot; that the
authors once had in their homepage (videos encoded in DivX and audio in
MP3).  The videos are still available as a torrent file (with a magnet link
for the hash &lt;a href=&quot;magnet:?xt=urn:btih:650704e4439d7857a33fe4e32bcfdc2cb1db34db&quot;&gt;650704e4439d7857a33fe4e32bcfdc2cb1db34db&lt;/a&gt;), with some
very good souls still seeding it (I can seed it too, if desired).  Alas, I
have not found a source for the higher quality MPEG1 videos, but I think
that the videos are legible enough to avoid bothering with a larger
download.&lt;/p&gt;

&lt;p&gt;I soon found out that there are some beneficial side-effects of splitting
the videos, like not having to edit/equalize the entire audio of the videos
when only a segment was bad (which is understandable, as these lectures were
recorded almost 30 years ago and technology was not as advanced as things
are today).&lt;/p&gt;

&lt;p&gt;So, since I already have the split videos lying around here, I figured out
that, perhaps, other people may want to download them, as they may be more
convenient to watch (say, during commutes or whatever/whenever/wherever it
best suits them).&lt;/p&gt;

&lt;p&gt;Of course, uploading all the videos is going to take a while and I would
only do it if people would really benefit from them.  If you think so, let
me know here (or if you know someone who would like the split version of the
videos, spread the word).&lt;/p&gt;
</description>


</item>
<item>
	<title>Problems with Emacs 24.4</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2014-11-24-emacs_bug/</guid>

	<link>http://cynic.cc/blog//posts/2014-11-24-emacs_bug/</link>



	<category>bug</category>

	<category>debian</category>

	<category>emacs</category>

	<category>free-software</category>

	<category>git</category>

	<category>github</category>

	<category>mate-desktop</category>


	<pubDate>Mon, 24 Nov 2014 15:16:58 -0200</pubDate>
	<dcterms:modified>2014-11-24T17:26:17Z</dcterms:modified>


	<description>&lt;p&gt;This is, essentially, a call for help, as I don&#39;t really know which program
is at a fault here.&lt;/p&gt;

&lt;p&gt;Given that Emacs&#39;s upstream
&lt;a href=&quot;http://permalink.gmane.org/gmane.emacs.devel/176760&quot;&gt;converted their repository from bzr to git&lt;/a&gt;, all the commits in
mirror repositories became &quot;invalid&quot; in relation to the official repository.&lt;/p&gt;

&lt;p&gt;What does this mean in practical terms, in my case? Well, bear with me while
I try to report my steps.&lt;/p&gt;

&lt;h1 id=&quot;noticingaregressionandreportingabug&quot;&gt;Noticing a regression and reporting a bug&lt;/h1&gt;

&lt;p&gt;There is a regression with Emacs 24.4 relative to 24.3, which I discovered
after Emacs 24.4 &lt;a href=&quot;https://packages.qa.debian.org/e/emacs24/news/20141025T214023Z.html&quot;&gt;became available in Debian&#39;s sid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The regression in particular is that Emacs 24.4 doesn&#39;t seem to respect my
Xresources, while 24.3 does (and this is 100% reproducible: I kept the
binary packages of version 24.3 of emacs24 and I can install and reinstall
things).&lt;/p&gt;

&lt;p&gt;When I &lt;a href=&quot;http://debbugs.gnu.org/18902&quot;&gt;reported this to upstream&lt;/a&gt;, I received a reply that it worked fine
with another person that was using XFCE with unstable.&lt;/p&gt;

&lt;h1 id=&quot;testingvariousdesktopenvironments&quot;&gt;Testing various Desktop environments&lt;/h1&gt;

&lt;p&gt;As I am using the &lt;a href=&quot;http://mate-desktop.org/&quot;&gt;MATE desktop environment&lt;/a&gt;, I proceeded to test this
assertion by installing XFCE. Emacs 24.4 read my Xresources. I went ahead
and installed LXDE. It worked again.  I tried once more with GNOME 3, but
&quot;regular&quot; GNOME 3 just crashed. I tried with GNOME 3 Classic and Emacs 24.4
just worked again.&lt;/p&gt;

&lt;h1 id=&quot;goingdeepintotherabbitshole&quot;&gt;Going deep into the rabbit&#39;s hole&lt;/h1&gt;

&lt;p&gt;Then, I got more curious and I tried to see why things worked the way that
they did and given that there was a
&lt;a href=&quot;https://github.com/emacs-mirror/emacs/&quot;&gt;mirror of the Emacs repo on github&lt;/a&gt;, I cloned it and started
to &lt;code&gt;git bisect&lt;/code&gt; to find the first problematic commit (I have no idea if
&lt;code&gt;bzr&lt;/code&gt; even offers something like &lt;code&gt;git&lt;/code&gt;&#39;s &lt;code&gt;bisect&lt;/code&gt; and I wouldn&#39;t really know
how to do it as quickly as I do with &lt;code&gt;git&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To cut short a long story, after many recompiles, many wasted hours, a lot
of wasted electrical energy, &lt;a href=&quot;https://github.com/emacs-mirror/emacs/commit/15e14b165dcbc6566a0459b0d5e66f89080f569e&quot;&gt;I found a bad commit&lt;/a&gt; and
&lt;a href=&quot;http://debbugs.gnu.org/cgi/bugreport.cgi?bug=18902#14&quot;&gt;reported it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I received no response after that.&lt;/p&gt;

&lt;h1 id=&quot;thenewrepoentersinaction&quot;&gt;The new repo enters in action&lt;/h1&gt;

&lt;p&gt;Of course, all my hard work bisecting things was completely invalidated
after the transition to the new repository went live.&lt;/p&gt;

&lt;p&gt;To make things relevant again, I used the awesome powers of &lt;code&gt;git&lt;/code&gt;,
restricting the changes of the newly cloned repository to the e-mail of the
committer in question (Chong Yidong) and, from there, I proceeded to another
painful process of git bisects.&lt;/p&gt;

&lt;p&gt;And, sure enough, the &lt;a href=&quot;http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=aac2b673c3083ab612bcd57fbcd9d370078bd8da&quot;&gt;first bad commit&lt;/a&gt; was the same one that I
found with the previous tree.&lt;/p&gt;

&lt;p&gt;Semi-blindly reverting this commit, and also semi-blindly resolving the
conflicts make Emacs&#39;s from master work again on my system, but I highly
suspect that (given the way that I did it), it would not really be
appropriate for upstream.&lt;/p&gt;

&lt;p&gt;But given also that I failed to receive feedback after my original report, I
am not too confident that this bug can be solved soon (even if it doesn&#39;t
qualify for being fixed in Debian 8).&lt;/p&gt;

&lt;p&gt;After all this, I don&#39;t really know what else to do. I even
&lt;a href=&quot;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=770781&quot;&gt;filed a bug report&lt;/a&gt; (more like a request for help) to the Debian
MATE maintainers.&lt;/p&gt;

&lt;p&gt;As a side note, I would have filed a bug to upstream MATE, but it is not
really clear what the proper procedure to report bugs to them is---they seem
to use github&#39;s issues system, but given that they have separate
repositories for each component of the project, and that I don&#39;t know
precisely what repository to report to (or even if it applies to MATE after
all), I am more or less paralyzed.&lt;/p&gt;

&lt;h2 id=&quot;asidenote&quot;&gt;A side note&lt;/h2&gt;

&lt;p&gt;I must say that the conversion was well done by Eric Raymond, because the
whole &lt;code&gt;.git&lt;/code&gt; repository of the new repo is only about 200MB, with history
going back to 1985, while the other repository had about 800GB.&lt;/p&gt;
</description>


</item>
<item>
	<title>Some new Youtube-dl functionality</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2014-02-17-youtube-dl_news/</guid>

	<link>http://cynic.cc/blog//posts/2014-02-17-youtube-dl_news/</link>



	<category>debian</category>

	<category>free-software</category>

	<category>linux</category>

	<category>multimedia</category>

	<category>python</category>

	<category>study</category>


	<pubDate>Mon, 17 Feb 2014 18:27:00 -0300</pubDate>
	<dcterms:modified>2014-02-17T22:21:26Z</dcterms:modified>


	<description>&lt;p&gt;I wrote in a &lt;a href=&quot;http://cynic.cc/blog//posts/2013-10-23-assorted_news/#youtube-dl&quot;&gt;previous post&lt;/a&gt; that
Youtube changed their way of delivering videos, with the use of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic%20Adaptive%20Streaming%20over%20HTTP&quot;&gt;Dynamic Adaptive Streaming over HTTP&lt;/a&gt;.  On top of that, they
started serving both the audio and the video in separate streams, which
meant trouble for downloader tools like &lt;a href=&quot;http://youtube-dl.org/&quot;&gt;&lt;code&gt;youtube-dl&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I mentioned in that previous post:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What does this mean in practical terms for users of youtube-dl?  Well, if
  you wanted to download videos in resolutions like the 480p (format 35)
  that I mentioned, then you will probably have to change your way of doing
  things, until a more automated solution is in place.&lt;/p&gt;
  
  &lt;p&gt;You will have to download both the audio and the video and, then,
  &quot;combine&quot; them (that is, multiplex them) to create one &quot;normal&quot; video file
  with both the audio and the video.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And latter, I wrote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Otherwise, to download 480p videos (which I do for lectures and so on with
  other projects of mine, like edx-dl) I have to call youtube-dl twice: once
  for format 135 and another for format 140, since the old &lt;img src=&quot;http://cynic.cc/blog//smileys/question.png&quot; alt=&quot;(?)&quot; /&gt; format 35
  files are much smaller than the lower resolution 360p files (due to the
  former being encoded in High profile vs. the latter being encoded in
  Constrained Baseline profile).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(...)&lt;/p&gt;

&lt;p&gt;Well, now, we don&#39;t have this problem anymore:&lt;/p&gt;

&lt;p&gt;The new release of &lt;code&gt;youtube-dl&lt;/code&gt; brings us many goodies, including that it is
possible to &lt;em&gt;automatically&lt;/em&gt; combine/merge/multiplex audio and video formats
that Youtube now offers separately (See the previous comments about separate
audio and video).&lt;/p&gt;

&lt;p&gt;Now, if you want a 480p video in H.264 format, High profile, with 128kbps
AAC audio (this used to be Youtube&#39;s format 35), you can specify format &lt;code&gt;-f
135+140&lt;/code&gt; on the command-line and it will download both the audio, the video
and multiplex it with &lt;code&gt;ffmpeg&lt;/code&gt; (or &lt;code&gt;avconv&lt;/code&gt;, depending on what you have
installed).&lt;/p&gt;

&lt;p&gt;Besides being convenient, this automatic downloading and merging makes it
unnecessary to write scripts to, say, retrieve all the videos in a playlist
that contains a lot of lectures (see &lt;a href=&quot;http://www.youtube.com/watch?v=EPQgeAz264g&amp;amp;list=PLA58AC5CABC1321A3&quot;&gt;one example here&lt;/a&gt;, taught by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Benedict%20Gross&quot;&gt;Benedict Gross&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Version 2014.02.17 of &lt;code&gt;youtube-dl&lt;/code&gt; will be soon in your favorite mirror of
the Debian archives.&lt;/p&gt;
</description>


</item>

</channel>
</rss>
