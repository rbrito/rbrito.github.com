<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>pages tagged hacks</title>
<link>http://cynic.cc/blog//tags/hacks/</link>

<description>Rog√©rio Brito&#39;s Digital Junkyard</description>
<generator>ikiwiki</generator>
<pubDate>Sun, 23 Feb 2014 22:14:04 -0300</pubDate>
<item>
	<title>Working with CVS via Git</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/working_with_cvs_via_git/</guid>

	<link>http://cynic.cc/blog//posts/working_with_cvs_via_git/</link>



	<category>cvs</category>

	<category>debian</category>

	<category>free-software</category>

	<category>git</category>

	<category>hacks</category>

	<category>lame</category>

	<category>revision-control</category>


	<pubDate>Tue, 11 Jun 2013 04:49:56 -0300</pubDate>
	<dcterms:modified>2014-02-24T01:14:04Z</dcterms:modified>


	<description>&lt;p&gt;The easiest way of using git locally to commit to a CVS repository is to
have &lt;em&gt;both&lt;/em&gt; a git clone of the CVS repository &lt;em&gt;and&lt;/em&gt; a CVS checkout of your
repository.&lt;/p&gt;

&lt;h1 id=&quot;initialstepsthatworkformetm&quot;&gt;Initial steps that Work for Me (TM)&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create your git clone of the CVS repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cvsimport -v -a -A /tmp/lame-authors.txt -k -m -d \
    :ext:rbrito@lame.cvs.sourceforge.net:/cvsroot/lame lame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command above will create your clone of the CVS repository in the
current directory which we suppose, for the sake of this discussion, is
&lt;code&gt;/tmp/gitified&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If want to specify a directory different than what you&#39;re in, then you
should add the option &lt;code&gt;-C /path/to/git/repository&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a checkout of the CVS repository for CVS work stuff (I&#39;m checking
out things under &lt;code&gt;/tmp&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cvs -z3 -d:ext:rbrito@lame.cvs.sourceforge.net:/cvsroot/lame checkout lame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create your CVS checkout on the directory &lt;code&gt;/tmp/lame&lt;/code&gt;, assuming
that you are working under &lt;code&gt;/tmp&lt;/code&gt;, as I do.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;doingrealwork&quot;&gt;Doing real work&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to your git clone (&lt;code&gt;/tmp/gitified&lt;/code&gt;) and start hacking, committing, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When it is time to send your patches to the CVS repo, you have to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GIT_DIR=/tmp/gitified/.git
cd /tmp/lame
git cherry origin master | sed -n &#39;s/^+ //p&#39; | xargs -l1 git cvsexportcommit -c -p -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will automatically check in all the commits that you have made in
the previous step.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;continuingyourworkafterwards&quot;&gt;Continuing your work afterwards&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;First, discard your commits in your git repository, so that you don&#39;t get
further problems with &lt;code&gt;git cvsimport&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your git repository with the current contents of the CVS repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/gitified
git cvsimport -v -a -A /tmp/lame-authors.txt -k -m -d \
    :ext:rbrito@lame.cvs.sourceforge.net:/cvsroot/lame lame
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your CVS repository with the current contents of the CVS repo too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/lame
cvs update
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Of course, I would prefer a simpler, leaner workflow. If you happen to have
one, please let me know.&lt;/p&gt;
</description>


</item>
<item>
	<title>Running GRUB2 on PowerPC Macs</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/running_grub2_on_powerpc_macs/</guid>

	<link>http://cynic.cc/blog//posts/running_grub2_on_powerpc_macs/</link>



	<category>configuration</category>

	<category>debian</category>

	<category>development</category>

	<category>free-software</category>

	<category>hacks</category>

	<category>ibook</category>

	<category>kernel</category>

	<category>linux</category>

	<category>mac</category>

	<category>powerpc</category>


	<pubDate>Sat, 02 Apr 2011 22:18:12 -0300</pubDate>
	<dcterms:modified>2014-02-24T01:14:04Z</dcterms:modified>


	<description>&lt;p&gt;Here I write a little bit about my experiences running GRUB2 with a PowerPC
Mac (actually, an iBook G4), since the current documentation is lacking in
many places (outdated, incorrect, etc.).&lt;/p&gt;

&lt;p&gt;Some of what I say is platform agnostic, though, and may be of interest to
users of GRUB in general.&lt;/p&gt;

&lt;h1 id=&quot;basicsusinggrub2withpowerpc&quot;&gt;Basics using GRUB2 with PowerPC&lt;/h1&gt;

&lt;p&gt;First of all, it is important to understand (at least superficially) how
botting on a Mac works.&lt;/p&gt;

&lt;p&gt;One of the first programs that run in your Mac is the OpenFirmware. It works
with more or less the same purpose of a BIOS in a regular x86 system. The
basic idea is the same: get the computer running with whatever programs you
want it to run. The implementation, though, differs quite a bit.&lt;/p&gt;

&lt;p&gt;First of all, OpenFirmware (OF) usually presents itself as a command-line
interface that is programmable, differently from the common day BIOSes from
x86 boxes. As it is programmable, it is more flexible, but this flexibility
comes at the price of an increased complexity.&lt;/p&gt;

&lt;p&gt;I may write some things more in a future article, if there is any
interest.&lt;/p&gt;

&lt;p&gt;For now, it just suffices to say that to get to the OF prompt in a Mac, you
have to press a combination keys during the time that your Mac gives a chime
when you turn it on. At that moment, you have to press (simulaneously) Cmd +
Option + O + F. (Note: the Cmd key is the key that has an Apple drawn on it,
usually on the side of the space bar).&lt;/p&gt;

&lt;h1 id=&quot;limitationsofopenfirmware&quot;&gt;Limitations of Open Firmware&lt;/h1&gt;

&lt;p&gt;Differently from usual BIOSes of x86 computers, Open Firmware &lt;em&gt;can&lt;/em&gt; read the
contents of a partition in your HD (or other devices), as long as it is
formatted in the original HFS format (&lt;em&gt;not&lt;/em&gt; in HFS+ or one of its
descendents).&lt;/p&gt;

&lt;p&gt;This is the reason why some older versions of Linux create an HFS partition
in your HD, even if you don&#39;t intent to run or use anything besides Linux.
The &lt;code&gt;yaboot&lt;/code&gt; bootloader consists of, among other things, one binary that is
understandable by OpenFirmware. That binary is a file called &lt;code&gt;yaboot&lt;/code&gt;, after
the name of the booloader.&lt;/p&gt;

&lt;p&gt;As an aside, you have to indicate to OF what is the file that you want it to
load during the boot process, so that it knows what to do. The way to
indicate this is to &quot;bless&quot; the file (and the folder that contains it).
Some ways to bless a file are to, for example, use the &lt;code&gt;bless&lt;/code&gt; command in
MacOS X or the &lt;code&gt;hattrib -b&lt;/code&gt; command from hfsutils.&lt;/p&gt;

&lt;p&gt;Files in an HFS filesystem have two attributes that many other filesystems
don&#39;t: a creator ID (the &quot;application&quot; that created the file) and the type
ID (which determines what kind of file it is).&lt;/p&gt;

&lt;p&gt;OpenFirmware, in particular, looks for files with the type &lt;code&gt;tbxi&lt;/code&gt; for the
bootstrap process.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;yaboot&lt;/code&gt; binary is loaded by OF into memory and, then, control is passed
to the yaboot program, which then reads its configuration file
(&lt;code&gt;yaboot.conf&lt;/code&gt;) from the same folder where the binary was in. The file
&lt;code&gt;yaboot.conf&lt;/code&gt; contains instructions for yaboot to do its job. The file
yaboot.conf is &lt;em&gt;very&lt;/em&gt; similar in construction to configurations of an older
bootloader for x86 computers, &lt;code&gt;lilo.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, in a way similar to what LILO requires, after you install some new
kernel, change some parameter in the configuration file, etc., you have to
run a program that will set up everything so that the boot process can know
of your new configuration. With LILO, this command was called &lt;code&gt;lilo&lt;/code&gt;, while
with yaboot the command is called &lt;code&gt;ybin&lt;/code&gt; (which, essentially, takes care of
putting &lt;code&gt;yaboot.conf&lt;/code&gt; in the bootstrap/HFS partition and blesses the
&lt;code&gt;yaboot&lt;/code&gt; binary).&lt;/p&gt;

&lt;h1 id=&quot;goingtogrub2&quot;&gt;Going to GRUB2&lt;/h1&gt;

&lt;p&gt;One of the characteristics of yaboot (which is left as an exercise to the
reader to determine if it is a drawback or not) is exactly the way that
changes in the configuration have to be copied to the special HFS partition:
the step of running &lt;code&gt;ybin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;GRUB2 (and its older sibling, GRUB legacy) do away with that: during
boot-time, it can understand the filesystems that you have in your computer
and interactively load whatever you want from there, also from a
command-line like OF, before any (regular) operating system has even been
started.&lt;/p&gt;

&lt;p&gt;But how do you &lt;em&gt;start&lt;/em&gt; GRUB2? Well, the way that this is performed is
copying a binary to that special HFS partition. Here things start to be
hairy, because GRUB2 has a lot of functionality, but it comes at the price
of it consuming a lot of space (especially if you are using encrypted
partitions or some kind of logical volume managements with some journalling
filesystem that allows files to be compressed etc. on top of it).  The list
goes on.&lt;/p&gt;

&lt;p&gt;Usually, that special HFS partition only has 800KB, which, BTW, is the size
of an old 3.5&quot; floppy used with older Macs (note: due to some contraints on
partitions and aligments of such partitions on cylinders, it is not uncommon
for disk partitioning software to create partitions slighly larger than
800KB, but &lt;em&gt;not&lt;/em&gt; much larger than that).&lt;/p&gt;

&lt;p&gt;A full-featured binary of GRUB2 to be placed on that HFS partition can have
much more than those 800KB. But how do you get that binary, in the first
place? And how do you fit that in the HFS partition?&lt;/p&gt;

&lt;h2 id=&quot;creatingthegrub2binary&quot;&gt;Creating the GRUB2 binary&lt;/h2&gt;

&lt;p&gt;To answer the first question, you have to construct it from your
&lt;code&gt;grub-ieee1275&lt;/code&gt; package (I&#39;m assuming here that you are using Debian or
Ubuntu, but similar instructions may apply to other distributions). Then, a
first step would be to create such binary with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; mkdir /tmp/foo
 cd /tmp/foo
 cp -a /usr/lib/grub/powerpc-ieee1275/* .
 grub-mkimage -O powerpc-ieee1275 -o ../grub.img *.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last command of these create an executable named &lt;code&gt;grub.img&lt;/code&gt; that is
callable from OF and which contains every module from &lt;code&gt;grub-ieee1275&lt;/code&gt;.  This
executable that I call here &lt;code&gt;grub.img&lt;/code&gt; is called, in GRUB2 parlance,
&lt;em&gt;the core image&lt;/em&gt; and it it seems to be named &lt;code&gt;core.img&lt;/code&gt; in many systems.&lt;/p&gt;

&lt;p&gt;On my system, with those commands, the binary &lt;code&gt;grub.img&lt;/code&gt; is about 1208KB,
which is 50% larger than that 800KB partition. And you would like it to be
&lt;em&gt;much&lt;/em&gt; smaller, becase you want to still have your &lt;code&gt;yaboot&lt;/code&gt; bootloader by
default while you are evaluating your bootloaders (or using it as a backup
plan).&lt;/p&gt;

&lt;p&gt;As GRUB2 follow a modular design, you can mix and match the features that
you want. This already hints you to the way we can fit it in the HFS
partition, and it is always the same story: just trim the fat.&lt;/p&gt;

&lt;h2 id=&quot;creatingtheconfigurationfile&quot;&gt;Creating the configuration file&lt;/h2&gt;

&lt;p&gt;You will also have to have GRUB2 configuration&#39;s file (or you will have to
play with way more commands than you&#39;d want to). An important distinction
here is that you usually have 2 or more partitions on your Mac:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the special bootstrap/HFS partition where OF is going to look at (I&#39;ll
call it &lt;code&gt;/dev/hda2&lt;/code&gt; here);&lt;/li&gt;
&lt;li&gt;the partition where your &lt;code&gt;/&lt;/code&gt; filesystem resides (denoted by &lt;code&gt;/dev/hda3&lt;/code&gt;
here);&lt;/li&gt;
&lt;li&gt;some partition to hold &lt;code&gt;/boot&lt;/code&gt; (I don&#39;t have one of these, but let&#39;s say
that it is &lt;code&gt;/dev/hda7&lt;/code&gt; for our discussion purposes), usually containing
your kernels and initial ramdisks.&lt;/li&gt;
&lt;li&gt;other partitions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this in mind, you can With Let&#39;s say that this last one, in Linux
parlance, is &lt;code&gt;/dev/hda3&lt;/code&gt; (as is the case of this author), and optionally a
partition where your Linux kernel resides (people usually use it to store
the &lt;code&gt;/boot&lt;/code&gt; subtree of a Linux filesystem). Let&#39;s say that this last one is
&lt;code&gt;/dev/hda7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, you would compose something like the following as a configuration file
for GRUB2 (named &lt;code&gt;grub.cfg&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;insmod part_apple
insmod ext2
set root=&#39;(hd,apple7)&#39;

menuentry &quot;Linux&quot; {
    linux /vmlinux root=/dev/hda3
    initrd /initrd
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are one two important points here that deserve more comments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Note that, &lt;strong&gt;differently&lt;/strong&gt; from a regular x86 system, in a Mac system with
only one HD the way that you specify an HD does &lt;em&gt;not&lt;/em&gt; have a trailing
zero. For instance, in the case above of the variable &lt;code&gt;root&lt;/code&gt;, we have
&lt;code&gt;(hd,apple7)&lt;/code&gt;, while in a &quot;common PC&quot; we would have the &lt;code&gt;(hd&lt;/code&gt; part
replaced with &lt;code&gt;(hd0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&#39;s something that you should make your distribution aware of, if they
aren&#39;t yet.&lt;/p&gt;

&lt;p&gt;As an addendum, I don&#39;t know how it works with systems with more than one
HD, as I only have (PowerPC) Macs that are notebooks. If you can share any
experiences, please do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One point of caution here: what GRUB2 calls &lt;code&gt;root&lt;/code&gt; is not necessarily the
root of your filesystem (i.e., the partition that holds &lt;code&gt;/&lt;/code&gt;), but the
&lt;em&gt;device&lt;/em&gt; that everything that is &quot;not fully qualified&quot; is interpreted as
being relative to.&lt;/p&gt;

&lt;p&gt;The &quot;not fully qualified&quot; above means anything that is not prefixed with
&lt;a href=&quot;http://www.gnu.org/software/grub/manual/grub.html#Device-syntax&quot;&gt;GRUB&#39;s device notation&lt;/a&gt;.
As an example, &lt;code&gt;(hd,apple2)/boot/vmlinux&lt;/code&gt; if fully qualified for GRUB&#39;s
purpose, while &lt;code&gt;/boot/vmlinux&lt;/code&gt; is not.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;puttingitalltogether&quot;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;The next step is to just copy the files &lt;code&gt;grub.img&lt;/code&gt; and &lt;code&gt;grub.cfg&lt;/code&gt; to the
special HFS partition. You can do that using &lt;code&gt;hmount&lt;/code&gt;, &lt;code&gt;hcopy&lt;/code&gt;, and
&lt;code&gt;humount&lt;/code&gt; or you can use the regular Linux &lt;code&gt;hfs&lt;/code&gt; module to copy to that
partition.&lt;/p&gt;

&lt;p&gt;Then, boot your system, get into the OF prompt and execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boot hd:2,grub.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the &lt;code&gt;2&lt;/code&gt; above is a reference to my HFS partition. Substitute that with
yours, appropriately. You will then see the common (familiar?) GRUB prompt
and, from there, everything else that you know will (hopefully) work.&lt;/p&gt;

&lt;h1 id=&quot;thelistofmodulesthatworksformetm&quot;&gt;The list of modules that &quot;Works for Me(TM)&quot;&lt;/h1&gt;

&lt;p&gt;As I mentioned above, I use a subset of all modules that come with
&lt;code&gt;grub-ieee1275&lt;/code&gt; to create my &lt;code&gt;grub.img&lt;/code&gt; binary. Here is the list of modules
that I use and that gives me a reasonably sized bootloader:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bitmap.mod        datehook.mod  gzio.mod         lsmmap.mod      reboot.mod          terminal.mod
bitmap_scale.mod  datetime.mod  halt.mod         memdisk.mod     regexp.mod          test.mod
blocklist.mod     echo.mod      help.mod         memrw.mod       relocator.mod       trig.mod
boot.mod          elf.mod       hexdump.mod      minicmd.mod     scsi.mod            true.mod
bufio.mod         ext2.mod      hfs.mod          msdospart.mod   search.mod          video.mod
cat.mod           fat.mod       hfsplus.mod      normal.mod      search_fs_file.mod  video_fb.mod
cmp.mod           font.mod      ieee1275_fb.mod  part_apple.mod  search_fs_uuid.mod  videoinfo.mod
configfile.mod    fshelp.mod    linux.mod        part_msdos.mod  search_label.mod
cpio.mod          gettext.mod   loadenv.mod      parttool.mod    setjmp.mod
crypto.mod        gfxmenu.mod   loopback.mod     probe.mod       sleep.mod
date.mod          gfxterm.mod   ls.mod           read.mod        suspend.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just for the record, my &lt;code&gt;grub.img&lt;/code&gt; file has 624KB, and that can certainly be
shrunk.&lt;/p&gt;

&lt;h1 id=&quot;thecommandlinethatworksformetmtocreatetheimage&quot;&gt;The command line that &quot;Works for Me(TM)&quot; to create the image&lt;/h1&gt;

&lt;p&gt;Actually, I lied when I told you that I used the lines above to create my
&lt;code&gt;grub.img&lt;/code&gt; file, because I&#39;m lazy and I don&#39;t want to type the &lt;code&gt;.img&lt;/code&gt;
extension. I also &lt;em&gt;embed&lt;/em&gt; my configuration file in the binary that I create
with GRUB2, so that I don&#39;t have two files to copy to my HFS partition, but
only one. I do that with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grub-mkimage -c grub.cfg -o ../grub -O powerpc-ieee1275 -d . *.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK. No more lies here.&lt;/p&gt;

&lt;p&gt;The nice aspect of GRUB is that one you install that image, you don&#39;t have
to touch that HFS partition anymore: you simply update your regular
filesystem&#39;s &lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt; file (which is usually performed when you
install a new kernel, at least with Debian) and you&#39;re ready to go.&lt;/p&gt;

&lt;p&gt;The good way to do that is to use a minimal configuration file embedded in
your &lt;code&gt;grub&lt;/code&gt; binary in your HFS partition that will hook into the system&#39;s
&lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt; to read newer kernels and leave the HFS partition (and
your system&#39;s NVRAM) alone.&lt;/p&gt;

&lt;p&gt;Here is what I am using right now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;search --no-floppy --fs-uuid --set=root 35d26869-f7c9-4852-a9b8-100314560c34
set prefix=(&amp;#036;root)/boot/grub
configfile /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will, of course, want to modify the file above as you install newer
kernels (perhaps even that unsupported operating system from that fruity
company, who knows?). Don&#39;t forget to change the UUID&#39;s, and partition
numbers to fit your needs.&lt;/p&gt;

&lt;p&gt;Well, that&#39;s it. I hope that it helps somebody out there, as the information
that I got otherwise was way outdated, incomplete, etc. to keep up with
GRUB2 from these days. Now, let&#39;s go patch the tools that we have so that
not everybody who wants to use GRUB2 have to learn about its workings.&lt;/p&gt;

&lt;p&gt;Oh, of course, you can now have your kernels in ext4, btrfs, xfs
etc. partitions without the fear that your bootloader won&#39;t load them.&lt;/p&gt;
</description>


</item>
<item>
	<title>I am going to DebConf 10</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/i-am-going-to-debconf-10/</guid>

	<link>http://cynic.cc/blog//posts/i-am-going-to-debconf-10/</link>



	<category>debian</category>

	<category>development</category>

	<category>fonts</category>

	<category>free-software</category>

	<category>hacks</category>

	<category>powerpc</category>

	<category>web-of-trust</category>


	<pubDate>Sun, 18 Jul 2010 03:34:40 -0300</pubDate>
	<dcterms:modified>2010-07-18T06:34:40Z</dcterms:modified>


	<description>&lt;p&gt;I just bought my tickets today to NYC and I am glady to say that I am going to Debconf 10.&lt;/p&gt;

&lt;p&gt;[caption id=&quot;attachment_55&quot; align=&quot;aligncenter&quot; width=&quot;200&quot; caption=&quot;I am going to DebConf10&quot;]&lt;a rel=&quot;attachment wp-att-55&quot; href=&quot;http://localhost/blog/2010/07/18/i-am-going-to-debconf-10/im_going_to_debconf10/&quot;&gt;&lt;img class=&quot;size-full wp-image-55 &quot; title=&quot;im_going_to_debconf10&quot; src=&quot;http://localhost/blog/wp-content/uploads/2010/07/im_going_to_debconf10.png&quot; alt=&quot;I am going to DebConf10&quot; width=&quot;200&quot; height=&quot;101&quot;  /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;The tickets have this information:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;GRU-&amp;gt;JFK:&lt;/strong&gt; Departure: 2010-07-30, 21:25; Arrival: 2010-07-31, 6:10, Flight AA950&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;JFK-&amp;gt;GRU:&lt;/strong&gt; Departure: 2010-08-09, 21:40; Arrival: 2010-08-10, 8:35, Flight AA951&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This represents a personal milestone for me, as I have many plans for the conference. In fact, this will be a trip of many &quot;firsts&quot; for me:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;this will be my first international trip by airplaine.&lt;/li&gt;
    &lt;li&gt;this will be my first DebConf ever (despite the fact that I could not apply for the &lt;a href=&quot;http://upsilon.cc/~zack/blog/posts/2010/04/the_DebConf_Newbies_initiative/&quot;&gt;DebConf Newbies initiative&lt;/a&gt;, due to my visa interview being delayed until the 7th of this month).&lt;/li&gt;
    &lt;li&gt;this will be the first time to see many people with whom I work together for some years now, but have not yet had the opportunity to meet in person.&lt;/li&gt;
    &lt;li&gt;this will be a nice opportunity to work hard on &lt;a href=&quot;http://lwn.net/Articles/396079/&quot;&gt;some issues that threaten the PowerPC port&lt;/a&gt; of Debian.&lt;/li&gt;
    &lt;li&gt;this will be a nice opportunity to do some QA work with some packages that I would like to have sponsored; also to &lt;a href=&quot;http://bugs.debian.org/551955&quot;&gt;upload&lt;/a&gt; some of the &lt;a href=&quot;http://bugs.debian.org/580005&quot;&gt;fonts&lt;/a&gt; that I &lt;a href=&quot;http://git.debian.org/?p=pkg-fonts/ttf-paratype-sans.git&quot;&gt;already packaged&lt;/a&gt; (or &lt;a href=&quot;http://bugs.debian.org/581839&quot;&gt;intend&lt;/a&gt; to &lt;a href=&quot;http://bugs.debian.org/589094&quot;&gt;take care&lt;/a&gt;) and that will be maintained under the &lt;a href=&quot;http://pkg-fonts.alioth.debian.org/&quot;&gt;Debian Fonts Task Force umbrella&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;this will be a very nice opportunity to get myself in a &quot;big&quot; &lt;a href=&quot;http://en.wikipedia.org/wiki/Strongly_connected_component&quot;&gt;strongly connected component &lt;/a&gt; of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Web_of_trust&quot;&gt;Web-of-Trust&lt;/a&gt; with as many arcs as feasible, by means of the &lt;a href=&quot;http://people.debian.org/~anibal/ksp-dc10/ksp-dc10.html&quot;&gt;key signing party.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;and many, many other things that I would like to do for the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am thankful for the DebConf team sponsoring both accomodation and food.  It is highly appreciated.&lt;/p&gt;

&lt;p&gt;See you in NYC! Any hints that you may happen to have are warmly welcome.&lt;/p&gt;
</description>


</item>
<item>
	<title>A version of xpdf with the poppler backend available</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/a-version-of-xpdf-with-the-poppler-backend-available/</guid>

	<link>http://cynic.cc/blog//posts/a-version-of-xpdf-with-the-poppler-backend-available/</link>



	<category>c++</category>

	<category>debian</category>

	<category>development</category>

	<category>documents</category>

	<category>free-software</category>

	<category>hacks</category>

	<category>libraries</category>

	<category>programming</category>


	<pubDate>Thu, 10 Jun 2010 19:46:13 -0300</pubDate>
	<dcterms:modified>2014-02-24T01:14:04Z</dcterms:modified>


	<description>&lt;p&gt;Well, it&#39;s been some time since I last wrote here and things are quite
hectic, due to some real-life happenings.&lt;/p&gt;

&lt;h1 id=&quot;announcement&quot;&gt;Announcement&lt;/h1&gt;

&lt;p&gt;For those people that are insterested in a &lt;em&gt;small&lt;/em&gt; PDF viewer, based on
&lt;a href=&quot;http://poppler.freedesktop.org/&quot;&gt;an actively maintained backend&lt;/a&gt;, and that
&lt;a href=&quot;http://localhost/blog/2010/05/27/please-let-me-zoom-my-documents/&quot;&gt;doesn&#39;t bring your computer to a halt&lt;/a&gt; when you try to zoom your
documents when you need to see some details, then you might want to give
&lt;a href=&quot;http://github.com/rbrito/xpdf-poppler&quot;&gt;this version of xpdf&lt;/a&gt; a try.&lt;/p&gt;

&lt;p&gt;I already received some reports for some bugs and fixed them, with one of
them being a problem related by a kind user of &lt;a href=&quot;http://www.gentoo.org/&quot;&gt;Gentoo&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;Some people have asked me why this even needs to exist in the first place
and I agree that it would be better if it didn&#39;t: I would love to spend my
time actually &lt;em&gt;using&lt;/em&gt; my computers rather than &lt;em&gt;fixing&lt;/em&gt; my computers for
better tasks (read: studying Mathematics, etc).&lt;/p&gt;

&lt;p&gt;The upstream maintainer of xpdf uses it as one source of income and keeps it
running across many system (even legacy ones).  I &lt;em&gt;imagine&lt;/em&gt; that this one of
the reasons why he tries to keep xpdf almost self contained, with many parts
that could be delegated to other libraries, and with some abstraction code
that makes the code compile even in the presence of &lt;em&gt;very&lt;/em&gt; broken compilers.
Of course, this means, in part, that as long as you take more duties,
maintaing the code becomes more and more complex.&lt;/p&gt;

&lt;p&gt;He told me that he doesn&#39;t offer an open development tree because he wants
to give his customers some advantages over the public version and his
reasons are perfectly justifiable, of course.  He also manifested the
interest of possibly basing xpdf on a &quot;more modern toolkit&quot; and, when I
asked him what that would be, he mentioned that, perhaps, it would be
Qt. The development of xpdf will, quite probably, take newer directions.&lt;/p&gt;

&lt;p&gt;Unfortunately, xpdf has not seen a new upstream release since
&lt;a href=&quot;http://www.foolabs.com/xpdf/CHANGES&quot;&gt;2007-02-27&lt;/a&gt;.  It did, though, have &lt;a href=&quot;ftp://ftp.foolabs.com/pub/xpdf/xpdf-3.02pl1.patch&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;ftp://ftp.foolabs.com/pub/xpdf/xpdf-3.02pl2.patch&quot;&gt;patchlevel&lt;/a&gt;
&lt;a href=&quot;ftp://ftp.foolabs.com/pub/xpdf/xpdf-3.02pl3.patch&quot;&gt;updates&lt;/a&gt; &lt;a href=&quot;ftp://ftp.foolabs.com/pub/xpdf/xpdf-3.02pl4.patch&quot;&gt;released&lt;/a&gt;. Taking care of the maintainance of the code is a
&lt;a href=&quot;http://bugs.debian.org/527840&quot;&gt;high concern&lt;/a&gt; for distributions.&lt;/p&gt;

&lt;p&gt;Some people, though, would like to &lt;a href=&quot;http://en.wikipedia.org/wiki/KISS_principle&quot;&gt;keep it simple&lt;/a&gt; (me included).
Unfortunately, &lt;a href=&quot;http://bugs.debian.org/351279&quot;&gt;some efforts&lt;/a&gt; to &lt;a href=&quot;http://lists.debian.org/debian-mentors/2010/06/msg00046.html&quot;&gt;maintain&lt;/a&gt; it had &lt;a href=&quot;http://bugs.gentoo.org/show_bug.cgi?id=289803&quot;&gt;not had&lt;/a&gt; the
&lt;a href=&quot;http://lists.debian.org/debian-mentors/2010/06/msg00068.html&quot;&gt;necessary coordination&lt;/a&gt; and duplication of effort has occured.&lt;/p&gt;

&lt;h1 id=&quot;proposal&quot;&gt;Proposal&lt;/h1&gt;

&lt;p&gt;I am willing to become a patch aggregator for the code in xpdf with a
poppler backend. I would love to give it some refactoring too, drop some of
the legacy code that is not used (and only serves to make the code hard to
read), and adopt some good coding style standard (I particularly
&lt;a href=&quot;http://www.kernel.org/doc/Documentation/CodingStyle&quot;&gt;like the one from the Linux Kernel&lt;/a&gt;---with the proper adaptations for
C++).&lt;/p&gt;

&lt;p&gt;I have already &lt;a href=&quot;http://www.kernel.org/doc/Documentation/CodingStyle&quot;&gt;contacted the people at Gentoo&lt;/a&gt;, and I would love to get
people from Fedora, Ubuntu, and Suse involved also. Alas, the last time I
tried to mail their mailing lists, I got messages telling me that my
messages were rejected or waiting for moderation, because I was not a
subscriber. I never heard back, since.&lt;/p&gt;

&lt;p&gt;I appreciate it if you could help spread the word.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;
</description>


</item>
<item>
	<title>Preliminary support for webm in youtube-dl</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/preliminary-support-for-webm-in-youtube-dl/</guid>

	<link>http://cynic.cc/blog//posts/preliminary-support-for-webm-in-youtube-dl/</link>



	<category>audio</category>

	<category>debian</category>

	<category>free-software</category>

	<category>hacks</category>

	<category>libraries</category>

	<category>multimedia</category>

	<category>video</category>


	<pubDate>Sat, 29 May 2010 17:06:18 -0300</pubDate>
	<dcterms:modified>2011-03-12T03:27:55Z</dcterms:modified>


	<description>&lt;p&gt;I just added some very, very preliminary support for web in &lt;code&gt;youtube-dl&lt;/code&gt; which &lt;a href=&quot;http://lists.debian.org/debian-devel-changes/2010/05/msg02694.html&quot;&gt;I uploaded&lt;/a&gt; to unstable some minutes ago.&lt;/p&gt;

&lt;p&gt;This way, at least people will have some material (in, fact, a chance) to play with this format.  I implemented this because, so far, I was only hoping here that a player for this would emerge. I guess that Debian&#39;s ffmpeg/mplayer will take some time, but I was pleased to see that Sebastian Dr√∂ge to upload a version of &lt;a href=&quot;http://lists.debian.org/debian-devel-changes/2010/05/msg02596.html&quot;&gt;something&lt;/a&gt; that could use the new &lt;code&gt;libvpx&lt;/code&gt; codec.&lt;/p&gt;

&lt;p&gt;I hope that, now, as a side effect of webm being widely available, more people become interested in &lt;a href=&quot;http://www.vorbis.com/&quot;&gt;Vorbis&lt;/a&gt;. More support (no, not &quot;alternative&quot;, like &lt;a href=&quot;http://www.rockbox.org/&quot;&gt;Rockbox&lt;/a&gt;, but straight from the manufacturers) for it in hardware devices will be sweet. Well, I can dream. &lt;img src=&quot;http://cynic.cc/blog//tags/hacks/../../smileys/smile.png&quot; alt=&quot;:-)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, it seems to be time to shape up that local build of mine of the &lt;a href=&quot;http://www.geocities.jp/aoyoume/aotuv/&quot;&gt;aotuv&lt;/a&gt; tuned version of Vorbis with &lt;a href=&quot;http://www.geocities.jp/aoyoume/&quot;&gt;Aoyumi&lt;/a&gt;&#39;s patches for libvorbis.&lt;/p&gt;

&lt;p&gt;Exciting times in the multimedia world.&lt;/p&gt;
</description>


</item>
<item>
	<title>Please let me zoom my documents!</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/please-let-me-zoom-my-documents-/</guid>

	<link>http://cynic.cc/blog//posts/please-let-me-zoom-my-documents-/</link>



	<category>bugs</category>

	<category>debian</category>

	<category>fonts</category>

	<category>free-software</category>

	<category>hacks</category>

	<category>libraries</category>

	<category>pdf</category>

	<category>tex</category>

	<category>xetex</category>


	<pubDate>Thu, 27 May 2010 11:17:00 -0300</pubDate>
	<dcterms:modified>2011-03-12T03:27:55Z</dcterms:modified>


	<description>&lt;p&gt;It all started when I tried to typeset my documents with the &lt;a href=&quot;http://en.wikipedia.org/wiki/Utopia (typeface)&quot;&gt;Utopia&lt;/a&gt; typeface, which is Free Software, since &lt;a&gt;Adobe liberated it to the TeX Users Group.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some nice packages for changing fonts in LaTeX with Utopia, like &lt;a href=&quot;http://www.ctan.org/tex-archive/help/Catalogue/entries/mathdesign-utopia.html&quot;&gt;&lt;code&gt;mathdesign&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.ctan.org/tex-archive/help/Catalogue/entries/fourier.html&quot;&gt;fourier&lt;/a&gt;. But I wanted to play with a new toy, &lt;a href=&quot;http://www.tug.org/xetex/&quot;&gt;XeTeX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, seeing as small caps was missing from the fonts that Adobe donated, I tried to just fake them with a program that I had never heard of before: &lt;a href=&quot;http://fontforge.sf.net/&quot;&gt;fontforge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;http://bugs.debian.org/569548&quot;&gt;first attempt&lt;/a&gt; wasn&#39;t that very successful, but, after reading a little bit of the code, &lt;a href=&quot;http://bugs.debian.org/569548#15&quot;&gt;the reason for the problem was soon discovered&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the same time, I wanted to &lt;em&gt;see&lt;/em&gt; what I had done with a PDF reader. The options aren&#39;t many here: xpdf was already removed from Debian&#39;s unstable (which is the distribution that I use), trying to &lt;a href=&quot;http://bugs.debian.org/527840&quot;&gt;update it&lt;/a&gt; proved to be unsuccessful and upstream isn&#39;t that active (which, by the way, led to the creation of the &lt;a href=&quot;http://cgit.freedesktop.org/poppler/poppler/tree/README&quot;&gt;poppler project&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Unfortunately, some of the Free PDF viewers seem to be &lt;a href=&quot;https://bugs.launchpad.net/evince/+bug/241604&quot;&gt;limited&lt;/a&gt; &lt;a href=&quot;https://bugzilla.redhat.com/show_bug.cgi?id=532946&quot;&gt;to&lt;/a&gt; a &lt;a href=&quot;http://mail.gnome.org/archives/evince-list/2007-March/msg00002.html&quot;&gt;maximum&lt;/a&gt; &lt;a href=&quot;http://bugs.debian.org/583119&quot;&gt;zoom&lt;/a&gt; &lt;a href=&quot;http://bugs.debian.org/580495&quot;&gt;of 400%&lt;/a&gt;, while some documents seem to demand more zooming (especially those with little, tiny letters, and for those people, like myself, that don&#39;t have good eyesight).&lt;/p&gt;

&lt;p&gt;Patching the programs to eliminate those hardcoded limits isn&#39;t that hard, but the results with evince and epdfview can be frightening: &lt;a href=&quot;http://kernel.org/pub/linux/kernel/people/hpa/raid6.pdf&quot;&gt;a very simple document&lt;/a&gt;, when zoomed with epdfview to, say, 1600% uses so much memory that one needs to watch out for the Out Of Memory killer and so much swapping that it is hard to believe. Don&#39;t believe my words. Just try it.&lt;/p&gt;

&lt;p&gt;But, hey, I just want to see a document without having to suffer too much.  And 400% isn&#39;t enough for many documents that I have. Especially when I want to see how a given font has been rendered on a document.&lt;/p&gt;

&lt;p&gt;I have not yet investigated the real cause of the huge memory consumption, but I would trust the words of the developers, that &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=303365#c6&quot;&gt;evince does everything in a big piece of memory&lt;/a&gt;. On the other hand, if one compiles poppler right from the sources, its &lt;a href=&quot;http://cgit.freedesktop.org/poppler/poppler/tree/glib/demo&quot;&gt;demo program&lt;/a&gt; for the glib backend can display files in a zippy manner, even with very large zooms.&lt;/p&gt;

&lt;p&gt;xpdf, though, works very well with higher zoom levels, without making the whole computer grind to a halt. Seeing as Martin Pitt has &lt;a href=&quot;http://bugs.debian.org/351279&quot;&gt;stripped xpdf to be able to use the poppler backend&lt;/a&gt;, I was animated to have the best of both worlds: the frequent updates of poppler and the lightness of xpdf.&lt;/p&gt;

&lt;p&gt;Martin&#39;s port of xpdf doesn&#39;t compile with a recent poppler, though: the library has &lt;a href=&quot;http://lists.freedesktop.org/archives/poppler/2009-May/004665.html&quot;&gt;changed&lt;/a&gt; &lt;a href=&quot;http://lists.debian.org/debian-devel/2007/12/msg00501.html&quot;&gt;a lot&lt;/a&gt; &lt;a href=&quot;https://bugzilla.redhat.com/show_bug.cgi?id=551119#c3&quot;&gt;since&lt;/a&gt; &lt;a href=&quot;http://lists.debian.org/debian-tex-maint/2009/09/msg00203.html&quot;&gt;2006&lt;/a&gt;.  And, in many respects, for good reason, since the original code is not that clean. But it makes harder for luses like me to use code based on fast-changing libraries.&lt;/p&gt;

&lt;p&gt;Well, to cut a long story short, after two afternoons hunting down a  version of poppler that would allow me to compile Martin&#39;s xpdf version, I got bored and tried to attack the problem.  Now I can use  this alternative version of xpdf with the poppler backend, with very little dependencies and with little memory usage on my computer. I&#39;m keeping it for my private use, but if anybody else is interested, please let me know.&lt;/p&gt;
</description>


</item>
<item>
	<title>Changing Some Configuration from Defaults</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/changing-some-configuration-from-defaults/</guid>

	<link>http://cynic.cc/blog//posts/changing-some-configuration-from-defaults/</link>



	<category>configuration</category>

	<category>debian</category>

	<category>emacs</category>

	<category>hacks</category>

	<category>productivity</category>

	<category>readline</category>


	<pubDate>Sat, 22 May 2010 20:36:42 -0300</pubDate>
	<dcterms:modified>2014-02-24T01:14:04Z</dcterms:modified>


	<description>&lt;p&gt;Two of my most frequently used tools are, hands down, Emacs and bash.
Having a pleasant configuration of one&#39;s toolbox is necessary for long-term
productivity.&lt;/p&gt;

&lt;p&gt;However, newer versions of the programs (any programs) don&#39;t always have
good, comfortable defaults. That is the case with Emacs 23 and bash 4.&lt;/p&gt;

&lt;p&gt;With Emacs 23, by default, the scratch buffer shows some text that, if you
want to quickly enter text to be saved, has to be deleted. This can be
tolerated for some invocations of the editor. But at some point, it gets on
one&#39;s nerves.&lt;/p&gt;

&lt;p&gt;Luckily, Emacs is so fully customizable that this is not a problem, unless
you have to hunt down the right knobs and you are an e-lisp illiterate. That
is my case.&lt;/p&gt;

&lt;p&gt;After reading an admittedly small amount of documentation, some good lines
that ought to be put into one&#39;s &lt;code&gt;.emacs&lt;/code&gt; file are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq inhibit-startup-echo-area-message &quot;rbrito&quot;)
(setq initial-scratch-message nil); show an empty scratch buffer
(setq inhibit-startup-message t); remove splash screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another line that may make things more comfortable (especially if you, like
me, use Emacs&#39;s dired as a filemanager to navigate your folders):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defalias &#39;yes-or-no-p &#39;y-or-n-p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But configuring Emacs is not always that hard. Seeing a change of behaviour
with your shell is scarier. When bash 4 was released, one thing that got
implemented is the echo of some characters from the terminal to the screen.&lt;/p&gt;

&lt;p&gt;In practice and with my usage pattern, this meant that whenever I was typing
a command line, changed my mind and pressed &lt;code&gt;C-c&lt;/code&gt;, I got a &lt;code&gt;^C&lt;/code&gt; printed on
the screen, usually overwriting one or two characters of what I had typed.
And this prevented me from automatically copying and pasting the command
that I had typed.&lt;/p&gt;

&lt;p&gt;Looking for an answer to that was much harder than to see how to change a
parameter on Emacs: every search that I tried on Google with the words
&quot;bash&quot; and &quot;Ctrl-C&quot; or some variants of that eventually lead me to &quot;how do I
trap a Ctrl-C on my shell script?&quot;.&lt;/p&gt;

&lt;p&gt;Decided to see what changed, I read the documentation of readline. It didn&#39;t
help, because I was reading something from version 5. I, then, downloaded
the source code and started looking for &lt;code&gt;SIGINT&lt;/code&gt;. Then, perusing the code
(and the changelog), I saw that with bash 4 and readline 6, a new
configuration option was introduced: the &lt;code&gt;echo-control-characters&lt;/code&gt; option of
readline.&lt;/p&gt;

&lt;p&gt;Of course, after knowing this, stopping the undesired behaviour was a simple
matter of inserting &lt;code&gt;set echo-control-characters off&lt;/code&gt; in my &lt;code&gt;.inputrc&lt;/code&gt; and
think about how much time I spent with that uncomfortable behaviour in some
of my preferred tools.&lt;/p&gt;

&lt;p&gt;As an addendum to the previous paragraphs (written on February of this year,
but only now published), the Debian package of &lt;a href=&quot;http://www.gnu.org/software/emacs/NEWS.23.2&quot;&gt;Emacs 23.2&lt;/a&gt;, the newest
version as of this writing, comes with some configuration that makes it
ignore the settings that are used with fontconfig. I did not spend any time
trying to see the cause of the problem, but adding a simple&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Emacs*font:         Mono
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to my &lt;code&gt;.Xdefaults&lt;/code&gt; file did the trick and restored back the ability to use
DejaVu Sans Mono at the right size on my system.&lt;/p&gt;
</description>


</item>
<item>
	<title>Simple Annotations on Compiling a Linux Kernel for an Embedded Platform</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/</guid>

	<link>http://cynic.cc/blog//posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/</link>



	<category>configuration</category>

	<category>debian</category>

	<category>development</category>

	<category>embedded</category>

	<category>free-software</category>

	<category>hacks</category>

	<category>kernel</category>

	<category>kurobox</category>

	<category>linux</category>

	<category>powerpc</category>


	<pubDate>Wed, 12 May 2010 00:54:52 -0300</pubDate>
	<dcterms:modified>2014-02-24T01:14:04Z</dcterms:modified>


	<description>&lt;p&gt;Here are some facts distilled from my experience with preparing kernels to
some embedded platforms. In other words, this is some of the stuff that is
usually presumed to be known, but that you won&#39;t find compiled in many
places, unfortunately.&lt;/p&gt;

&lt;p&gt;I am writing them here in the hope that they can be useful to other folks
trying to compile their kernel to embedded devices (and I would venture to
say that these &quot;non-standard&quot; platforms would become more popular in the
future).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;some machines don&#39;t have monitors, keyboards etc. They may only have
network connections (e.g., ethernet) and USB ports. In such cases, it
console&quot; called a netconsole. It can be enabled with the options: is quite
handy to see how the machine is booting with a &quot;virtual console&quot; called a
netconsole. It can be enabled with the options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_NETCONSOLE=y
CONFIG_NETPOLL=y
CONFIG_NET_POLL_CONTROLLER=y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have to tell the kernel where to send the messages that would,
otherwise, be presented on a screen. For sending them over the network, just
tell the kernel to use the command line option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    netconsole=6666@192.168.11.150/,@192.168.11.149/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, you can easily connect from another (more comfortable?) computer
with something like (this connection is made via UDP, not TCP):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ip addr add 192.168.11.149/24 broadcast 192.168.11.255 dev eth0
    nc -u -n -p 6666 192.168.11.150 6666
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;while some popular bootloaders for desktops are LILO and GRUB, many other
platforms use other bootloaders: yaboot, quik, bootx, silo, refit, etc. In
the case of embedded platforms, one that is popular is &quot;das uBoot&quot;, which
needs a special kind of kernel image, a &lt;code&gt;uImage&lt;/code&gt;, instead of a regular
&lt;code&gt;{b}zImage/vmlinu{x,z}&lt;/code&gt; image. (Well, actually, some other arches need
images in other formats, like &lt;code&gt;vmlinux.coff&lt;/code&gt; etc). Fortunately, the
kernel&#39;s makefile knows about some such arches and it generates the
correct image---but it is the task of the packager/distributor to find if
those images are needed or not. For the KuroBox HD/HG, all that is needed
is a simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp !!mathjaxbegin-i!! TElOVVhQQVRIL2FyY2gvcG93ZXJwYy9ib290L3VJbWFnZSA=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!!mathjaxend-i!!BUILT_ROOT/boot/uImage-$VERSION&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;some extra care is needed when generating a kernel for such arches: the
tree of the devices which the kernel needs does not seem to be built
automatically (this is the case of the the KuroBox HD/HG). Something like
this is needed after the compilation of the kernel proper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./scripts/dtc/dtc -I dts -O dtb -V 16 -o !!mathjaxbegin-i!! QlVJTFRfUk9PVC9ib290L2t1cm9ib3hIRC5kdGIt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!!mathjaxend-i!!VERSION ./arch/powerpc/boot/dts/kuroboxHD.dts
    ./scripts/dtc/dtc -I dts -O dtb -V 16 -o !!mathjaxbegin-i!! QlVJTFRfUk9PVC9ib290L2t1cm9ib3hIRy5kdGIt
!!mathjaxend-i!!VERSION ./arch/powerpc/boot/dts/kuroboxHG.dts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to cross compile a kernel, don&#39;t forget to set the appropriate environment
options, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make clean
INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make oldconfig
INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make menuconfig
INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make all modules
INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make modules_install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It won&#39;t hurt if you use a concurrency setting (like -j3 or more) when
compiling all and modules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The uBoot command line (accessed via the network) can be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ext2load ide !!mathjaxbegin-i!! e2hkcGFydH0g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!!mathjaxend-i!!{ldaddr} ${hdfile}
    ext2load ide ${hdpart} 7f0000 boot/kuroboxHD.dtb
    setenv bootargs root=/dev/sda1 netconsole=6666@192.168.11.150/,@192.168.11.149/
    bootm ${ldaddr} - 7f0000&lt;/p&gt;

&lt;p&gt;The first two lines tell uBoot to load the both the kernel and the device
tree from the disk to the memory, the third line sets the kernel command
line (familiar to users of the &quot;common&quot; arches) and the fourth line
actually boots the kernel once it is loaded in the memory. Here, ${hdpart}
is the partition where the kernel image ${hdfile} should be loaded from
(usually in the form 0:1, to mean partition 1 from the disk 0), ${ldaddr}
is the memory address where the kernel should be loaded to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Something that is handy, no matter what size your machine has: the use of
ext4 (and, in particular, delayed allocation) with ext{2,3}
filesystems. To use it, just put this in your kernel configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_EXT4_USE_FOR_EXT23=y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for daemons like avr-evtd, that need access to a serial port (so
that the user can turn off the device by pressing the power button),
enable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_SERIO=y
CONFIG_SERIO_SERPORT=y
CONFIG_SERIAL_8250=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, you will always have to ssh into the system, become root, and
issue something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shutdown -h now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is an inconvenience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is very important to set the Real Time Clock options right and this may
not be that obvious for some non-x86 platforms. In particular, for a
KuroBox HD, I&#39;m using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_RTC_CLASS=y
CONFIG_RTC_HCTOSYS=y
CONFIG_RTC_HCTOSYS_DEVICE=rtc0
CONFIG_RTC_INTF_SYSFS=y
CONFIG_RTC_INTF_PROC=y
CONFIG_RTC_INTF_DEV=y
CONFIG_RTC_DRV_RS5C372=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last option is, perhaps, the tricky one, and varies from system to
system. Knowing which one to enable is a matter of knowing the specs of
your system and, if not known, discovery by trial-and-error. (For x86
systems, usually &lt;code&gt;CONFIG_RTC_DRV_CMOS=y&lt;/code&gt; is sufficient).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>


</item>
<item>
	<title>Migrate from RCS to git</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/migrate-from-rcs-to-git/</guid>

	<link>http://cynic.cc/blog//posts/migrate-from-rcs-to-git/</link>



	<category>debian</category>

	<category>emacs</category>

	<category>git</category>

	<category>hacks</category>

	<category>revision-control</category>


	<pubDate>Thu, 11 Feb 2010 05:39:37 -0200</pubDate>
	<dcterms:modified>2011-03-12T03:53:18Z</dcterms:modified>


	<description>&lt;p&gt;I have been keeping my &lt;a href=&quot;http://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; files under version control since I was
introduced to &lt;a href=&quot;http://www.gnu.org/software/auctex/&quot;&gt;AUCTeX&lt;/a&gt; and I realized that a good way to approach the
&quot;evolutionary&quot; approach to software (this includes text) is to use a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Revision_control&quot;&gt;revision control system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started using that with &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; 21 (the first version of Emacs that I
used was Emacs 19.something which I can&#39;t remember) and the revision system
that was most easily available was &lt;a href=&quot;http://www.gnu.org/software/rcs/&quot;&gt;RCS&lt;/a&gt;. Its integration with Emacs
was very good and also easy to use: type &lt;code&gt;C-x v-v&lt;/code&gt; and a check in is
performed (or a check out, depending on the state of the file). You would be
asked for a changelog for that file and that was it.&lt;/p&gt;

&lt;p&gt;Now, on the other hand, there is a myriad of options and one that looks very
nice to me (apart from not dealing with metadata, but that&#39;s OK with me for
the moment) is Linus Torvald&#39;s &lt;a href=&quot;http://git-scm.com/&quot;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;. The very nice thing with &lt;code&gt;git&lt;/code&gt;
(or many other such systems) is that the interface with Emacs is exactly the
same: &lt;code&gt;C-x v-v&lt;/code&gt;. That&#39;s the only thing you need to remember to work well
with, say, your text project. (I don&#39;t actually know very much of the
management workflow under Emacs, but I also use the command line a good
amount and it serves me well so far).&lt;/p&gt;

&lt;p&gt;But how can I convert my RCS &quot;repositories&quot; to a proper &lt;code&gt;git&lt;/code&gt; repository?
Well, git comes with a subcommand called &lt;code&gt;cvsimport&lt;/code&gt;, meant to be used with
CVS and this does help, since a CVS repository is essentially just a
collection of RCS files. As many people have migrated along the path from
RCS to CVS to Subversion to git, and I did not intend to convert the
repository in multiple steps, I am documenting what I did here.&lt;/p&gt;

&lt;p&gt;So, if you have the &lt;code&gt;,v&lt;/code&gt; files that RCS generates (the &quot;repository&quot; files
for each file tracked by RCS) spread in a tree and you would like to convert
that tree to a git repository for replication, backup and &quot;time
machine-like&quot; support, you can mimic a basic CVS repository that can be
converted easily with the following simple steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory hierarchy somewhere, denoted here by
&lt;code&gt;cvs-source-dir&lt;/code&gt;. This will play the role of a CVS repository which &lt;code&gt;git
cvsimport&lt;/code&gt; will convert.&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;cvs-source-dir&lt;/code&gt;, create the directory tree as you would like it to
be visible by &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As an immediate subdirectory of &lt;code&gt;cvs-source-dir&lt;/code&gt;, create a directory named
&lt;code&gt;CVSROOT&lt;/code&gt;, that is &lt;code&gt;cvs-source-dir/CVSROOT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each immediate subdirectory of &lt;code&gt;cvs-source-dir&lt;/code&gt; will play the role of a
CVS module. Just think of that as a project under control of the version
control system.&lt;/li&gt;
&lt;li&gt;Think about the &lt;code&gt;,v&lt;/code&gt; files as your regular files and put them under the
&lt;code&gt;cvs-source-dir&lt;/code&gt; tree, as you would like them to be.&lt;/li&gt;
&lt;li&gt;Create the directory where your git repository will reside, denoted here
by &lt;code&gt;git-repo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git cvsimport -v -a -A -k -m -d cvs-source-dir -C git-repo cvs-module&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&#39;s it. It seems to perform a very good job of changing a very old system
to something that is modern and with many features (and is distributed).&lt;/p&gt;

&lt;p&gt;You may also want to read about the way to convert the ids of commits that
RCS/CVS register to proper (people) names, which git uses. Read the
&lt;code&gt;git-cvsimport&lt;/code&gt; manpage for more details on this and other options mentioned
above.&lt;/p&gt;
</description>


</item>
<item>
	<title>2002-07-07</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/2002-07-07/</guid>

	<link>http://cynic.cc/blog//posts/2002-07-07/</link>



	<category>apple</category>

	<category>debian</category>

	<category>free-software</category>

	<category>hacks</category>

	<category>hardware</category>

	<category>macosx</category>

	<category>powerpc</category>


	<pubDate>Sun, 07 Jul 2002 00:00:00 -0300</pubDate>
	<dcterms:modified>2013-10-20T02:31:04Z</dcterms:modified>


	<description>&lt;p&gt;Woke up quite early with that kernel panic bugging me. I read the
documentation and the fix for it was to reboot MacOS 9 (which
wasn&#39;t as simple as it should, since MacOS X apparently de-blessed
MacOS 9&#39;s System Folder). Anyway, after reusing XPostFacto, the
PowerMac booted with MacOS X! Woohoo!&lt;/p&gt;

&lt;p&gt;Well, seeing this OS booting on this old computer is quite cool.
Well,
&lt;a href=&quot;http://slashdot.org/comments.pl?sid=33385&amp;amp;cid=3607384&quot;&gt;apart from some severe usability problems&lt;/a&gt;
and slowness, MacOS X is an amazing operating system. The problem
is: it &lt;strong&gt;is slow&lt;/strong&gt;. It is slow with a G3 600MHz (100MHz of bus)
with 128MB of RAM and, obviously, much more so with a dual 604e
180MHz with only 64MB of RAM.&lt;/p&gt;

&lt;p&gt;BTW, MacOS X isn&#39;t able to use both processors when it is booted
with XPostFacto.&lt;/p&gt;

&lt;p&gt;BTW#2, XFree86&#39;s native driver for Mach64 doesn&#39;t include support
for the XVideo extension.&lt;/p&gt;

&lt;p&gt;Also used the client-side of NFS and SMB on MacOS X, which is quite
easy to use.&lt;/p&gt;
</description>


</item>

</channel>
</rss>
