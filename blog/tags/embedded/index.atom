<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged embedded</title>
<link href="http://cynic.cc/blog//tags/embedded/"/>
<link href="http://cynic.cc/blog//tags/embedded/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Rogério Brito's Digital Junkyard</name>

</author>




<id>http://cynic.cc/blog//tags/embedded/</id>

<subtitle type="html">Rogério Brito&#39;s Digital Junkyard</subtitle>
<generator uri="http://ikiwiki.info/">ikiwiki</generator>
<updated>2018-03-22T03:45:10Z</updated>
<entry>
	<title>Simple Annotations on Compiling a Linux Kernel for an Embedded Platform</title>

	<id>http://cynic.cc/blog//posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/</id>

	<link href="http://cynic.cc/blog//posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/"/>






	<category term="configuration" />

	<category term="debian" />

	<category term="development" />

	<category term="embedded" />

	<category term="free-software" />

	<category term="hacks" />

	<category term="kernel" />

	<category term="kurobox" />

	<category term="linux" />

	<category term="powerpc" />


	<updated>2018-03-22T03:45:10Z</updated>
	<published>2010-05-12T03:54:52Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;Here are some facts distilled from my experience with preparing kernels to
some embedded platforms. In other words, this is some of the stuff that is
usually presumed to be known, but that you won&#39;t find compiled in many
places, unfortunately.&lt;/p&gt;

&lt;p&gt;I am writing them here in the hope that they can be useful to other folks
trying to compile their kernel to embedded devices (and I would venture to
say that these &quot;non-standard&quot; platforms would become more popular in the
future).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;some machines don&#39;t have monitors, keyboards etc. They may only have
network connections (e.g., ethernet) and USB ports. In such cases, it
console&quot; called a netconsole. It can be enabled with the options: is quite
handy to see how the machine is booting with a &quot;virtual console&quot; called a
netconsole. It can be enabled with the options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_NETCONSOLE=y
CONFIG_NETPOLL=y
CONFIG_NET_POLL_CONTROLLER=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You have to tell the kernel where to send the messages that would,
otherwise, be presented on a screen. For sending them over the network,
just tell the kernel to use the command line option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netconsole=6666@192.168.11.150/,@192.168.11.149/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, you can easily connect from another (more comfortable?) computer
with something like (this connection is made via UDP, not TCP):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip addr add 192.168.11.149/24 broadcast 192.168.11.255 dev eth0
nc -u -n -p 6666 192.168.11.150 6666
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;while some popular bootloaders for desktops are LILO and GRUB, many other
platforms use other bootloaders: yaboot, quik, bootx, silo, refit, etc. In
the case of embedded platforms, one that is popular is &quot;das uBoot&quot;, which
needs a special kind of kernel image, a &lt;code&gt;uImage&lt;/code&gt;, instead of a regular
&lt;code&gt;{b}zImage/vmlinu{x,z}&lt;/code&gt; image. (Well, actually, some other arches need
images in other formats, like &lt;code&gt;vmlinux.coff&lt;/code&gt; etc). Fortunately, the
kernel&#39;s makefile knows about some such arches and it generates the
correct image---but it is the task of the packager/distributor to find if
those images are needed or not. For the KuroBox HD/HG, all that is needed
is a simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp !!mathjaxbegin-i!! TElOVVhQQVRIL2FyY2gvcG93ZXJwYy9ib290L3VJbWFnZSA=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!!mathjaxend-i!!BUILT_ROOT/boot/uImage-$VERSION&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;some extra care is needed when generating a kernel for such arches: the
tree of the devices which the kernel needs does not seem to be built
automatically (this is the case of the the KuroBox HD/HG). Something like
this is needed after the compilation of the kernel proper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./scripts/dtc/dtc -I dts -O dtb -V 16 -o !!mathjaxbegin-i!! QlVJTFRfUk9PVC9ib290L2t1cm9ib3hIRC5kdGIt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!!mathjaxend-i!!VERSION ./arch/powerpc/boot/dts/kuroboxHD.dts
    ./scripts/dtc/dtc -I dts -O dtb -V 16 -o !!mathjaxbegin-i!! QlVJTFRfUk9PVC9ib290L2t1cm9ib3hIRy5kdGIt
!!mathjaxend-i!!VERSION ./arch/powerpc/boot/dts/kuroboxHG.dts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to cross compile a kernel, don&#39;t forget to set the appropriate environment
options, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make clean
INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make oldconfig
INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make menuconfig
INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make all modules
INSTALL_MOD_PATH=&amp;#036;BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make modules_install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It won&#39;t hurt if you use a concurrency setting (like &lt;code&gt;-j3&lt;/code&gt; or more) when
compiling all and modules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The uBoot command line (accessed via the network) can be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ext2load ide !!mathjaxbegin-i!! e2hkcGFydH0g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!!mathjaxend-i!!{ldaddr} ${hdfile}
    ext2load ide ${hdpart} 7f0000 boot/kuroboxHD.dtb
    setenv bootargs root=/dev/sda1 netconsole=6666@192.168.11.150/,@192.168.11.149/
    bootm ${ldaddr} - 7f0000&lt;/p&gt;

&lt;p&gt;The first two lines tell uBoot to load the both the kernel and the device
tree from the disk to the memory, the third line sets the kernel command
line (familiar to users of the &quot;common&quot; arches) and the fourth line
actually boots the kernel once it is loaded in the memory. Here, &lt;code&gt;&amp;#036;{hdpart}&lt;/code&gt;
is the partition where the kernel image &lt;code&gt;&amp;#036;{hdfile}&lt;/code&gt; should be loaded from
(usually in the form 0:1, to mean partition 1 from the disk 0), &lt;code&gt;&amp;#036;{ldaddr}&lt;/code&gt;
is the memory address where the kernel should be loaded to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Something that is handy, no matter what size your machine has: the use of
ext4 (and, in particular, delayed allocation) with &lt;code&gt;ext{2,3}&lt;/code&gt;
filesystems. To use it, just put this in your kernel configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_EXT4_USE_FOR_EXT23=y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for daemons like &lt;a href=&quot;https://packages.debian.org/sid/avr-evtd&quot;&gt;avr-evtd&lt;/a&gt;, that need access to a serial port (so
that the user can turn off the device by pressing the power button),
enable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_SERIO=y
CONFIG_SERIO_SERPORT=y
CONFIG_SERIAL_8250=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, you will always have to ssh into the system, become root, and
issue something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shutdown -h now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is an inconvenience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is very important to set the Real Time Clock options right and this may
not be that obvious for some non-x86 platforms. In particular, for a
KuroBox HD, I&#39;m using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_RTC_CLASS=y
CONFIG_RTC_HCTOSYS=y
CONFIG_RTC_HCTOSYS_DEVICE=rtc0
CONFIG_RTC_INTF_SYSFS=y
CONFIG_RTC_INTF_PROC=y
CONFIG_RTC_INTF_DEV=y
CONFIG_RTC_DRV_RS5C372=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last option is, perhaps, the tricky one, and varies from system to
system. Knowing which one to enable is a matter of knowing the specs of
your system and, if not known, discovery by trial-and-error. (For x86
systems, usually &lt;code&gt;CONFIG_RTC_DRV_CMOS=y&lt;/code&gt; is sufficient).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

	</content>



</entry>
<entry>
	<title>Debian Switching to EGLIBC</title>

	<id>http://cynic.cc/blog//posts/debian-switching-to-eglibc/</id>

	<link href="http://cynic.cc/blog//posts/debian-switching-to-eglibc/"/>






	<category term="computers" />

	<category term="debian" />

	<category term="embedded" />

	<category term="linux" />

	<category term="ubuntu" />


	<updated>2012-09-07T06:54:06Z</updated>
	<published>2007-05-08T02:00:00Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;Having been playing with some new things in &lt;a href=&quot;http://www.debian.org/&quot;&gt;Debian&lt;/a&gt;, like the
&lt;a href=&quot;http://packages.debian.org/magicfilter&quot;&gt;magicfilter&lt;/a&gt; package, which is a superb, lightweight solution to
all my printing problems: to use a PCL 3 printer. I think that I will also
&quot;manufacture&quot; a solution with a metapackage of a live CD that includes the
environment that I use frequently, with the packages that I use (this is
probably quite leaner than what &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; has done with their
distribution, since I will mainly use some lighter packages).&lt;/p&gt;

&lt;p&gt;Oh, talking about lighter packages, I see that Debian has adopted a new C
library, namely &lt;a href=&quot;http://www.eglibc.org/&quot;&gt;EGLIBC&lt;/a&gt;, which stands for Embedded LIBC. Finally, it
seems that Debian will focus a bit more on smaller systems (which is a good
thing, because computing resources are limited).&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Happy News: A new Kurobox</title>

	<id>http://cynic.cc/blog//posts/happy-news-a-new-kurobox/</id>

	<link href="http://cynic.cc/blog//posts/happy-news-a-new-kurobox/"/>






	<category term="computers" />

	<category term="debian" />

	<category term="embedded" />

	<category term="kurobox" />

	<category term="linux" />

	<category term="nas" />


	<updated>2012-09-07T06:54:06Z</updated>
	<published>2007-04-23T02:00:00Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;Today I was pleasantly surprised that the Kurobox that &lt;a href=&quot;http://suihkulokki.blogspot.com/&quot;&gt;Riku Voipio&lt;/a&gt; sent
me has arrived!  From the looks of it, it is a Kurobox HG, which, compared
to my Kurobox HD, has a faster processor (it runs at 266MHz, instead of
200MHz), has more RAM (128MB, instead of 64MB), and has a faster network
connection (an 1Gbps instead of 100Mbps interface).&lt;/p&gt;

&lt;p&gt;I&#39;m trying to see if I will be able to use a SATA drive with this Kurobox,
as we can&#39;t find large IDE/PATA drives in the market today (almost). And the
bigger capacity ones are only available with SATA interfaces.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Playing with Package Proxies</title>

	<id>http://cynic.cc/blog//posts/playing-with-package-proxies/</id>

	<link href="http://cynic.cc/blog//posts/playing-with-package-proxies/"/>






	<category term="approx" />

	<category term="apt-move" />

	<category term="computers" />

	<category term="debian" />

	<category term="embedded" />

	<category term="linux" />

	<category term="proxy" />

	<category term="ubuntu" />


	<updated>2012-09-07T06:54:06Z</updated>
	<published>2007-03-16T02:00:00Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;Have been playing with the great idea of &lt;a
href=&quot;http://lists.debian.org/debian-mentors/2009/03/msg00210.html&quot;&gt;caching&lt;/a&gt;
&lt;a href=&quot;http://lwn.net/Articles/318658/&quot;&gt;deb&lt;/a&gt; packages. I finally
settled for the option of using &lt;code&gt;&lt;a
href=&quot;http://git.debian.org/?p=pkg-ocaml-maint/packages/approx.git&quot;&gt;approx&lt;/a&gt;&lt;/code&gt;,
which does a really nice job of caching packages.&lt;/p&gt;

&lt;p&gt;Actually, it fullfils quite a lot of requirements and even surpasses some of my expectations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It supports multiple architectures (in fact, this is important for me, as
I use &lt;code&gt;i386&lt;/code&gt;, &lt;code&gt;amd64&lt;/code&gt;, and &lt;code&gt;powerpc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It can support multiple distributions (both different versions of the same
distribution and completely different distributions, as long as they use a
repository like &lt;a href=&quot;http://www.debian.org/&quot;&gt;Debian&lt;/a&gt;&#39;s, as is the
case of &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;).&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;It keeps its directory hierarchy neatly organized, like that of Debian, in
a package pool, which saves space and makes everything easier and faster
to find (and has the advantage of being fast with filesystems that don&#39;t
cope well with many entries in one directory).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The transition wasn&#39;t painless from &lt;a href=&quot;http://packages.debian.org/apt%2Dmove&quot;&gt;apt-move&lt;/a&gt;, since apt-move
moves the files, but renames them in a way that they don&#39;t keep epochs in
their names, which makes &lt;code&gt;approx-import&lt;/code&gt; moan about the packages.&lt;/p&gt;

&lt;p&gt;For places where I am too lazy to import the packages, I just filled the
cache redownloading the packages with something approximately like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  apt-get -d --reinstall install &amp;#036;(dpkg -l | grep &quot;^ii&quot; | cut -d &quot; &quot; -f 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, I hope that this experience happens to be useful for other people, so
that they can benefit from it. Rebuilding packages with a package cacher is
much more pleasant, especially if the package has a lot of
build-dependencies.&lt;/p&gt;

	</content>



</entry>

</feed>
