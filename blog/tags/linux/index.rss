<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>pages tagged linux</title>
<link>http://rb.doesntexist.org/blog//tags/linux/</link>
<description>Rog√©rio Brito&#39;s Digital Junkyard</description>
<item>

	<title>Lack of cooperation from Ubuntu?</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/lack_of_cooperation_from_ubuntu/</guid>

	<link>http://rb.doesntexist.org/blog//posts/lack_of_cooperation_from_ubuntu/</link>


	<category>debian</category>

	<category>free-software</category>

	<category>kfreebsd</category>

	<category>linux</category>

	<category>ubuntu</category>


	<pubDate>Fri, 19 Apr 2013 22:46:26 -0300</pubDate>
	<dcterms:modified>2013-04-20T01:46:43Z</dcterms:modified>

	<description>&lt;p&gt;I &lt;a href=&quot;https://plus.google.com/117659222649141007981/posts/C2vY4nD4CD6&quot;&gt;posted the following on Google+&lt;/a&gt;, but it is important enough to be
reproduced on Planet. I&#39;m editing it a bit, as it is a followup to my
previous post.&lt;/p&gt;

&lt;p&gt;While &lt;a href=&quot;http://rb.doesntexist.org/blog/posts/debian_activities/&quot;&gt;improving the packaging of MongoDB&lt;/a&gt;, there was one thing that
caught my attention: that Ubuntu
&lt;a href=&quot;http://changelogs.ubuntu.com/changelogs/pool/universe/m/mongodb/mongodb_2.0.4-1ubuntu2.1/changelog&quot;&gt;had already done some of the embedded/convenience libraries work&lt;/a&gt;, but
they had &lt;em&gt;not&lt;/em&gt; pushed that work to Debian.&lt;/p&gt;

&lt;p&gt;Of course, discovered this only after I started working on the improvements
of the package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What gives, Ubuntu people?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another thing that I saw is that
&lt;a href=&quot;https://launchpad.net/ubuntu/+source/mongodb/1:2.2.4-0ubuntu1/+build/4470136&quot;&gt;they have patches enabling mongodb working on armhf&lt;/a&gt;. Again, they did
&lt;em&gt;not&lt;/em&gt; push those to Debian.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why this lack of cooperation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another thing that I saw is that they had packages for version 2.2 (more
precisely, &lt;a href=&quot;http://packages.ubuntu.com/raring/mongodb&quot;&gt;raring has 1:2.2.4-0ubuntu1&lt;/a&gt;), while Debian sid
&lt;a href=&quot;http://packages.debian.org/changelogs/pool/main/m/mongodb/mongodb_2.4.1-2/changelog.html&quot;&gt;just had 2.0&lt;/a&gt; until very recently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not push this work and avoid duplication of work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By being a good downstream, I intend to push some of the patches to MongoDB
upstream (if they want it), so that we (Debian) have a smaller delta. This
will benefit you Ubuntu guys. Why not join forces and help have a
world-class set of packages?&lt;/p&gt;

&lt;p&gt;Please, be good netizens and share the work that you have.  I firmly believe
that the armhf people will be happy to have one of the fancy &quot;cloud&quot;
software available on ARM, especially since the prospects of having ARM
machines on datacenters.&lt;/p&gt;

&lt;p&gt;Oh, just for the record, the
&lt;a href=&quot;https://github.com/rbrito/mongo-debian/pull/2&quot;&gt;kFreeBSD people have sent their contribution&lt;/a&gt; and I would love to see
(if possible) this running on the HURD.&lt;/p&gt;
</description>


</item>
<item>

	<title>Some recent Debian activities</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/debian_activities/</guid>

	<link>http://rb.doesntexist.org/blog//posts/debian_activities/</link>


	<category>debian</category>

	<category>free-software</category>

	<category>linux</category>


	<pubDate>Fri, 19 Apr 2013 04:29:23 -0300</pubDate>
	<dcterms:modified>2013-04-30T17:15:33Z</dcterms:modified>

	<description>&lt;p&gt;I have been occasionally working on some Debian-related tasks.&lt;/p&gt;

&lt;h1&gt;Chrony&lt;/h1&gt;

&lt;p&gt;One of those was to get chrony is a slightly better shape, by using, at
least, a patch system (indeed, I &quot;modernized&quot; its packaging with the format
&quot;3.0 (quilt)&quot;), put it in &lt;a href=&quot;http://anonscm.debian.org/gitweb/?p=users/rbrito-guest/chrony.git&quot;&gt;a git repository&lt;/a&gt; and would like to receive some
comments on what I have so far.&lt;/p&gt;

&lt;p&gt;The bug &lt;a href=&quot;http://bugs.debian.org/694690&quot;&gt;Debian bug #694690&lt;/a&gt; contains a very brief description of my
intentions and of the problems that I see in the current package. IMVHO, it
is a very nice NTP client and server and it could even be used as the
default for Debian, once it gets in shape.  There is at least another
high-profile distribution, namely Fedora, that
&lt;a href=&quot;http://fedoraproject.org/wiki/Features/ChronyDefaultNTP&quot;&gt;switched to chrony as its default NTP software&lt;/a&gt;. We can certainly take a
look at what they are doing and join forces here.&lt;/p&gt;

&lt;h1&gt;MongoDB&lt;/h1&gt;

&lt;p&gt;Another package where I spent some time was with &lt;a href=&quot;http://packages.qa.debian.org/mongodb&quot;&gt;mongodb&lt;/a&gt;:
MongoDB is a tricky package that is only built for 2 arches: amd64 and
i386.  The version in unstable for i386 was 2.0.x (roughly the same as for
wheezy), which the version in unstable for amd64 was 2.4.1, which has many
features that 2.0 lacks.&lt;/p&gt;

&lt;p&gt;The packaging of it is a bit tricky, since the source tree has bazillion
embedded/convenience libraries (e.g., Google&#39;s v8, Mozilla&#39;s spidermonkey,
BOOST, Google&#39;s Snappy, PCRE 3 etc.). Up to version 2.4.1-2, it used all
these convenience copies, which is of course, a problem for a distribution
like Debian.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://packages.qa.debian.org/m/mongodb/news/20130417T171917Z.html&quot;&gt;I changed&lt;/a&gt; part of the build process to use the libraries that we
already have in Debian and, as Antonin Kral uploaded this newer version,
unsurprisingly the binary packages are smaller (especially if you take into
account that a handful of the libraries may already be installed on the
system).&lt;/p&gt;

&lt;p&gt;A few hours later, Antonin uploaded a new upstream version, which means that
we now have better MongoDB packages to play with.  I am, in fact, really
playing with MongoDB as my first NoSQL database, since
&lt;a href=&quot;https://education.10gen.com/courses/10gen/M101/2012_Fall/about&quot;&gt;10gen is giving an introductory course&lt;/a&gt; on how it works and my
motivation was to get what we have in Debian in shape for the course.&lt;/p&gt;

&lt;p&gt;You can say that I am a firm believer of the &quot;eat your own dogfood&quot;
principle.&lt;/p&gt;

&lt;p&gt;Regarding MongoDB only being built for i386 and amd64, the BTS
&lt;a href=&quot;http://bugs.debian.org/703061&quot;&gt;has a patch&lt;/a&gt; to enable building for kFreeBSD, but the patch is for the
2.0 series and the code has changed so drastically in relation to the 2.4
series that there is no hope of it applying.  It would be super nice to have
MongoDB working on kFreeBSD and on HURD also, though.&lt;/p&gt;

&lt;h1&gt;nocache&lt;/h1&gt;

&lt;p&gt;There is a very nice command line program called &lt;code&gt;nocache&lt;/code&gt; that was packaged
by Dmitry Smirnov (and just approved by the FTP masters!) whose packaging I
briefly reviewed per Dmitry&#39;s request and this is an amazing utility whose
purpose is to bypass/minimize file system caching for a program.&lt;/p&gt;

&lt;p&gt;This is especially useful when you are making backups (reading lots of files
that would, otherwise, fill the filesystem cache, even if they are not used
frequently) or if you are just streaming one file (possibly larger than the
system&#39;s RAM) to another computer and you have no need to use the file
immediately after that.&lt;/p&gt;

&lt;p&gt;It performs its job by using the &lt;code&gt;LD_PRELOAD&lt;/code&gt; mechanism and using
&lt;code&gt;posix_fadvise&lt;/code&gt;&#39;s flag &lt;code&gt;POSIX_FADV_DONTNEED&lt;/code&gt; for the files that will be
touched.&lt;/p&gt;

&lt;h1&gt;Post note&lt;/h1&gt;

&lt;p&gt;Oh, just one aside: for the readers of Debian Planet and other aggregation
services which are not Debian Developers/Maintainers, I contributed to these
packages without being the maintainer of them, just scratching some itches
and contributing back what I produced.&lt;/p&gt;
</description>


</item>
<item>

	<title>Some experiences with ZFS</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/some_experiences_with_zfs/</guid>

	<link>http://rb.doesntexist.org/blog//posts/some_experiences_with_zfs/</link>


	<category>compression</category>

	<category>debian</category>

	<category>debian-planet</category>

	<category>deduplication</category>

	<category>filesystems</category>

	<category>free-software</category>

	<category>linux</category>

	<category>zfs</category>


	<pubDate>Sat, 08 Sep 2012 23:42:24 -0300</pubDate>
	<dcterms:modified>2012-09-09T02:48:33Z</dcterms:modified>

	<description>&lt;p&gt;Continuing the &lt;a href=&quot;https://plus.google.com/117659222649141007981/posts/T3BcxA7wKjK&quot;&gt;ZFS evaluation journey&lt;/a&gt; (which I will summarize here with
the things that I learned), I was able to fit about 2.5TB of data on a
single 2TB drive, with deduplication enabled.&lt;/p&gt;

&lt;p&gt;Unfortunately, even &lt;em&gt;moving&lt;/em&gt; files around in ZFS (which you would think
would be a cheap operation) takes ages. Removing files also takes ages.&lt;/p&gt;

&lt;p&gt;In a &lt;em&gt;completely&lt;/em&gt; unloaded Phenom II X4 910 system running Linux 3.5.2
(actually, from Debian&#39;s experimental), and zfsonlinux version
0.6.0.71-0ubuntu1~precise1 (recompiled from source to work with my Debian
system), I tried to remove a subdirectory that had about 4000
files. According to time, it took:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;real    42m51.487s
user    0m0.188s
sys     0m16.769s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is a bit too slow.&lt;/p&gt;

&lt;p&gt;I just (read: &quot;yesterday&quot;) upgraded this machine from 4GB to 6GB of RAM
(well, I would have updated it to 8GB of RAM as that is what I ordered, but
it one of the RAM chips arrived dead here and I simply took one of the new
4GB card and one of the older 2GB card).&lt;/p&gt;

&lt;p&gt;But, honestly, I don&#39;t see change in upgrading the RAM from 4GB to 6GB and,
unless something magic happens with 2GB more, I wouldn&#39;t expect a whole
different story with 8GB of RAM. Oh, no swap is being used (well, it is an
unloaded machine after all), and the Linux kernel swappiness knob is at its
default of 60.&lt;/p&gt;

&lt;p&gt;What I &lt;em&gt;do&lt;/em&gt; see, though, is that even for a single file removal, the disk is
thrashing a lot. I mean &lt;em&gt;like&lt;/em&gt; crazy and that is, of course, the prime
suspect of the bad performance (of course, of course). So, there must be
some really crazy metadata churning going on here and I guess that the
people from the LLNL would like to know of their modules producing this
behavior.&lt;/p&gt;

&lt;p&gt;Keep tuned for some future impressions.&lt;/p&gt;
</description>


</item>
<item>

	<title>Running GRUB2 on PowerPC Macs</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/running_grub2_on_powerpc_macs/</guid>

	<link>http://rb.doesntexist.org/blog//posts/running_grub2_on_powerpc_macs/</link>


	<category>configuration</category>

	<category>debian</category>

	<category>development</category>

	<category>free-software</category>

	<category>hacks</category>

	<category>ibook</category>

	<category>kernel</category>

	<category>linux</category>

	<category>mac</category>

	<category>powerpc</category>


	<pubDate>Sat, 02 Apr 2011 22:18:12 -0300</pubDate>
	<dcterms:modified>2011-04-03T01:21:31Z</dcterms:modified>

	<description>&lt;p&gt;Here I write a little bit about my experiences running GRUB2 with a PowerPC
Mac (actually, an iBook G4), since the current documentation is lacking in
many places (outdated, incorrect, etc.).&lt;/p&gt;

&lt;p&gt;Some of what I say is platform agnostic, though, and may be of interest to
users of GRUB in general.&lt;/p&gt;

&lt;h1&gt;Basics using GRUB2 with PowerPC&lt;/h1&gt;

&lt;p&gt;First of all, it is important to understand (at least superficially) how
botting on a Mac works.&lt;/p&gt;

&lt;p&gt;One of the first programs that run in your Mac is the OpenFirmware. It works
with more or less the same purpose of a BIOS in a regular x86 system. The
basic idea is the same: get the computer running with whatever programs you
want it to run. The implementation, though, differs quite a bit.&lt;/p&gt;

&lt;p&gt;First of all, OpenFirmware (OF) usually presents itself as a command-line
interface that is programmable, differently from the common day BIOSes from
x86 boxes. As it is programmable, it is more flexible, but this flexibility
comes at the price of an increased complexity.&lt;/p&gt;

&lt;p&gt;I may write some things more in a future article, if there is any
interest.&lt;/p&gt;

&lt;p&gt;For now, it just suffices to say that to get to the OF prompt in a Mac, you
have to press a combination keys during the time that your Mac gives a chime
when you turn it on. At that moment, you have to press (simulaneously) Cmd +
Option + O + F. (Note: the Cmd key is the key that has an Apple drawn on it,
usually on the side of the space bar).&lt;/p&gt;

&lt;h1&gt;Limitations of Open Firmware&lt;/h1&gt;

&lt;p&gt;Differently from usual BIOSes of x86 computers, Open Firmware &lt;em&gt;can&lt;/em&gt; read the
contents of a partition in your HD (or other devices), as long as it is
formatted in the original HFS format (&lt;em&gt;not&lt;/em&gt; in HFS+ or one of its
descendents).&lt;/p&gt;

&lt;p&gt;This is the reason why some older versions of Linux create an HFS partition
in your HD, even if you don&#39;t intent to run or use anything besides Linux.
The &lt;code&gt;yaboot&lt;/code&gt; bootloader consists of, among other things, one binary that is
understandable by OpenFirmware. That binary is a file called &lt;code&gt;yaboot&lt;/code&gt;, after
the name of the booloader.&lt;/p&gt;

&lt;p&gt;As an aside, you have to indicate to OF what is the file that you want it to
load during the boot process, so that it knows what to do. The way to
indicate this is to &quot;bless&quot; the file (and the folder that contains it).
Some ways to bless a file are to, for example, use the &lt;code&gt;bless&lt;/code&gt; command in
MacOS X or the &lt;code&gt;hattrib -b&lt;/code&gt; command from hfsutils.&lt;/p&gt;

&lt;p&gt;Files in an HFS filesystem have two attributes that many other filesystems
don&#39;t: a creator ID (the &quot;application&quot; that created the file) and the type
ID (which determines what kind of file it is).&lt;/p&gt;

&lt;p&gt;OpenFirmware, in particular, looks for files with the type &lt;code&gt;tbxi&lt;/code&gt; for the
bootstrap process.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;yaboot&lt;/code&gt; binary is loaded by OF into memory and, then, control is passed
to the yaboot program, which then reads its configuration file
(&lt;code&gt;yaboot.conf&lt;/code&gt;) from the same folder where the binary was in. The file
&lt;code&gt;yaboot.conf&lt;/code&gt; contains instructions for yaboot to do its job. The file
yaboot.conf is &lt;em&gt;very&lt;/em&gt; similar in construction to configurations of an older
bootloader for x86 computers, &lt;code&gt;lilo.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, in a way similar to what LILO requires, after you install some new
kernel, change some parameter in the configuration file, etc., you have to
run a program that will set up everything so that the boot process can know
of your new configuration. With LILO, this command was called &lt;code&gt;lilo&lt;/code&gt;, while
with yaboot the command is called &lt;code&gt;ybin&lt;/code&gt; (which, essentially, takes care of
putting &lt;code&gt;yaboot.conf&lt;/code&gt; in the bootstrap/HFS partition and blesses the
&lt;code&gt;yaboot&lt;/code&gt; binary).&lt;/p&gt;

&lt;h1&gt;Going to GRUB2&lt;/h1&gt;

&lt;p&gt;One of the characteristics of yaboot (which is left as an exercise to the
reader to determine if it is a drawback or not) is exactly the way that
changes in the configuration have to be copied to the special HFS partition:
the step of running &lt;code&gt;ybin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;GRUB2 (and its older sibling, GRUB legacy) do away with that: during
boot-time, it can understand the filesystems that you have in your computer
and interactively load whatever you want from there, also from a
command-line like OF, before any (regular) operating system has even been
started.&lt;/p&gt;

&lt;p&gt;But how do you &lt;em&gt;start&lt;/em&gt; GRUB2? Well, the way that this is performed is
copying a binary to that special HFS partition. Here things start to be
hairy, because GRUB2 has a lot of functionality, but it comes at the price
of it consuming a lot of space (especially if you are using encrypted
partitions or some kind of logical volume managements with some journalling
filesystem that allows files to be compressed etc. on top of it).  The list
goes on.&lt;/p&gt;

&lt;p&gt;Usually, that special HFS partition only has 800KB, which, BTW, is the size
of an old 3.5&quot; floppy used with older Macs (note: due to some contraints on
partitions and aligments of such partitions on cylinders, it is not uncommon
for disk partitioning software to create partitions slighly larger than
800KB, but &lt;em&gt;not&lt;/em&gt; much larger than that).&lt;/p&gt;

&lt;p&gt;A full-featured binary of GRUB2 to be placed on that HFS partition can have
much more than those 800KB. But how do you get that binary, in the first
place? And how do you fit that in the HFS partition?&lt;/p&gt;

&lt;h2&gt;Creating the GRUB2 binary&lt;/h2&gt;

&lt;p&gt;To answer the first question, you have to construct it from your
&lt;code&gt;grub-ieee1275&lt;/code&gt; package (I&#39;m assuming here that you are using Debian or
Ubuntu, but similar instructions may apply to other distributions). Then, a
first step would be to create such binary with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; mkdir /tmp/foo
 cd /tmp/foo
 cp -a /usr/lib/grub/powerpc-ieee1275/* .
 grub-mkimage -O powerpc-ieee1275 -o ../grub.img *.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last command of these create an executable named &lt;code&gt;grub.img&lt;/code&gt; that is
callable from OF and which contains every module from &lt;code&gt;grub-ieee1275&lt;/code&gt;.  This
executable that I call here &lt;code&gt;grub.img&lt;/code&gt; is called, in GRUB2 parlance,
&lt;em&gt;the core image&lt;/em&gt; and it it seems to be named &lt;code&gt;core.img&lt;/code&gt; in many systems.&lt;/p&gt;

&lt;p&gt;On my system, with those commands, the binary &lt;code&gt;grub.img&lt;/code&gt; is about 1208KB,
which is 50% larger than that 800KB partition. And you would like it to be
&lt;em&gt;much&lt;/em&gt; smaller, becase you want to still have your &lt;code&gt;yaboot&lt;/code&gt; bootloader by
default while you are evaluating your bootloaders (or using it as a backup
plan).&lt;/p&gt;

&lt;p&gt;As GRUB2 follow a modular design, you can mix and match the features that
you want. This already hints you to the way we can fit it in the HFS
partition, and it is always the same story: just trim the fat.&lt;/p&gt;

&lt;h2&gt;Creating the configuration file&lt;/h2&gt;

&lt;p&gt;You will also have to have GRUB2 configuration&#39;s file (or you will have to
play with way more commands than you&#39;d want to). An important distinction
here is that you usually have 2 or more partitions on your Mac:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the special bootstrap/HFS partition where OF is going to look at (I&#39;ll
call it &lt;code&gt;/dev/hda2&lt;/code&gt; here);&lt;/li&gt;
&lt;li&gt;the partition where your &lt;code&gt;/&lt;/code&gt; filesystem resides (denoted by &lt;code&gt;/dev/hda3&lt;/code&gt;
here);&lt;/li&gt;
&lt;li&gt;some partition to hold &lt;code&gt;/boot&lt;/code&gt; (I don&#39;t have one of these, but let&#39;s say
that it is &lt;code&gt;/dev/hda7&lt;/code&gt; for our discussion purposes), usually containing
your kernels and initial ramdisks.&lt;/li&gt;
&lt;li&gt;other partitions.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With this in mind, you can With Let&#39;s say that this last one, in Linux
parlance, is &lt;code&gt;/dev/hda3&lt;/code&gt; (as is the case of this author), and optionally a
partition where your Linux kernel resides (people usually use it to store
the &lt;code&gt;/boot&lt;/code&gt; subtree of a Linux filesystem). Let&#39;s say that this last one is
&lt;code&gt;/dev/hda7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, you would compose something like the following as a configuration file
for GRUB2 (named &lt;code&gt;grub.cfg&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;insmod part_apple
insmod ext2
set root=&#39;(hd,apple7)&#39;

menuentry &quot;Linux&quot; {
    linux /vmlinux root=/dev/hda3
    initrd /initrd
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are one two important points here that deserve more comments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Note that, &lt;strong&gt;differently&lt;/strong&gt; from a regular x86 system, in a Mac system with
only one HD the way that you specify an HD does &lt;em&gt;not&lt;/em&gt; have a trailing
zero. For instance, in the case above of the variable &lt;code&gt;root&lt;/code&gt;, we have
&lt;code&gt;(hd,apple7)&lt;/code&gt;, while in a &quot;common PC&quot; we would have the &lt;code&gt;(hd&lt;/code&gt; part
replaced with &lt;code&gt;(hd0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&#39;s something that you should make your distribution aware of, if they
aren&#39;t yet.&lt;/p&gt;

&lt;p&gt;As an addendum, I don&#39;t know how it works with systems with more than one
HD, as I only have (PowerPC) Macs that are notebooks. If you can share any
experiences, please do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One point of caution here: what GRUB2 calls &lt;code&gt;root&lt;/code&gt; is not necessarily the
root of your filesystem (i.e., the partition that holds &lt;code&gt;/&lt;/code&gt;), but the
&lt;em&gt;device&lt;/em&gt; that everything that is &quot;not fully qualified&quot; is interpreted as
being relative to.&lt;/p&gt;

&lt;p&gt;The &quot;not fully qualified&quot; above means anything that is not prefixed with
&lt;a href=&quot;http://www.gnu.org/software/grub/manual/grub.html#Device-syntax&quot;&gt;GRUB&#39;s device notation&lt;/a&gt;.
As an example, &lt;code&gt;(hd,apple2)/boot/vmlinux&lt;/code&gt; if fully qualified for GRUB&#39;s
purpose, while &lt;code&gt;/boot/vmlinux&lt;/code&gt; is not.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;The next step is to just copy the files &lt;code&gt;grub.img&lt;/code&gt; and &lt;code&gt;grub.cfg&lt;/code&gt; to the
special HFS partition. You can do that using &lt;code&gt;hmount&lt;/code&gt;, &lt;code&gt;hcopy&lt;/code&gt;, and
&lt;code&gt;humount&lt;/code&gt; or you can use the regular Linux &lt;code&gt;hfs&lt;/code&gt; module to copy to that
partition.&lt;/p&gt;

&lt;p&gt;Then, boot your system, get into the OF prompt and execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boot hd:2,grub.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the &lt;code&gt;2&lt;/code&gt; above is a reference to my HFS partition. Substitute that with
yours, appropriately. You will then see the common (familiar?) GRUB prompt
and, from there, everything else that you know will (hopefully) work.&lt;/p&gt;

&lt;h1&gt;The list of modules that &quot;Works for Me(TM)&quot;&lt;/h1&gt;

&lt;p&gt;As I mentioned above, I use a subset of all modules that come with
&lt;code&gt;grub-ieee1275&lt;/code&gt; to create my &lt;code&gt;grub.img&lt;/code&gt; binary. Here is the list of modules
that I use and that gives me a reasonably sized bootloader:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bitmap.mod        datehook.mod  gzio.mod         lsmmap.mod      reboot.mod          terminal.mod
bitmap_scale.mod  datetime.mod  halt.mod         memdisk.mod     regexp.mod          test.mod
blocklist.mod     echo.mod      help.mod         memrw.mod       relocator.mod       trig.mod
boot.mod          elf.mod       hexdump.mod      minicmd.mod     scsi.mod            true.mod
bufio.mod         ext2.mod      hfs.mod          msdospart.mod   search.mod          video.mod
cat.mod           fat.mod       hfsplus.mod      normal.mod      search_fs_file.mod  video_fb.mod
cmp.mod           font.mod      ieee1275_fb.mod  part_apple.mod  search_fs_uuid.mod  videoinfo.mod
configfile.mod    fshelp.mod    linux.mod        part_msdos.mod  search_label.mod
cpio.mod          gettext.mod   loadenv.mod      parttool.mod    setjmp.mod
crypto.mod        gfxmenu.mod   loopback.mod     probe.mod       sleep.mod
date.mod          gfxterm.mod   ls.mod           read.mod        suspend.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just for the record, my &lt;code&gt;grub.img&lt;/code&gt; file has 624KB, and that can certainly be
shrunk.&lt;/p&gt;

&lt;h1&gt;The command line that &quot;Works for Me(TM)&quot; to create the image&lt;/h1&gt;

&lt;p&gt;Actually, I lied when I told you that I used the lines above to create my
&lt;code&gt;grub.img&lt;/code&gt; file, because I&#39;m lazy and I don&#39;t want to type the &lt;code&gt;.img&lt;/code&gt;
extension. I also &lt;em&gt;embed&lt;/em&gt; my configuration file in the binary that I create
with GRUB2, so that I don&#39;t have two files to copy to my HFS partition, but
only one. I do that with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grub-mkimage -c grub.cfg -o ../grub -O powerpc-ieee1275 -d . *.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK. No more lies here.&lt;/p&gt;

&lt;p&gt;The nice aspect of GRUB is that one you install that image, you don&#39;t have
to touch that HFS partition anymore: you simply update your regular
filesystem&#39;s &lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt; file (which is usually performed when you
install a new kernel, at least with Debian) and you&#39;re ready to go.&lt;/p&gt;

&lt;p&gt;The good way to do that is to use a minimal configuration file embedded in
your &lt;code&gt;grub&lt;/code&gt; binary in your HFS partition that will hook into the system&#39;s
&lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt; to read newer kernels and leave the HFS partition (and
your system&#39;s NVRAM) alone.&lt;/p&gt;

&lt;p&gt;Here is what I am using right now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;search --no-floppy --fs-uuid --set=root 35d26869-f7c9-4852-a9b8-100314560c34
set prefix=($root)/boot/grub
configfile /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will, of course, want to modify the file above as you install newer
kernels (perhaps even that unsupported operating system from that fruity
company, who knows?). Don&#39;t forget to change the UUID&#39;s, and partition
numbers to fit your needs.&lt;/p&gt;

&lt;p&gt;Well, that&#39;s it. I hope that it helps somebody out there, as the information
that I got otherwise was way outdated, incomplete, etc. to keep up with
GRUB2 from these days. Now, let&#39;s go patch the tools that we have so that
not everybody who wants to use GRUB2 have to learn about its workings.&lt;/p&gt;

&lt;p&gt;Oh, of course, you can now have your kernels in ext4, btrfs, xfs
etc. partitions without the fear that your bootloader won&#39;t load them.&lt;/p&gt;
</description>


</item>
<item>

	<title>Simple Annotations on Compiling a Linux Kernel for an Embedded Platform</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/</guid>

	<link>http://rb.doesntexist.org/blog//posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/</link>


	<category>configuration</category>

	<category>debian</category>

	<category>development</category>

	<category>embedded</category>

	<category>free-software</category>

	<category>hacks</category>

	<category>kernel</category>

	<category>kurobox</category>

	<category>linux</category>

	<category>powerpc</category>


	<pubDate>Wed, 12 May 2010 00:54:52 -0300</pubDate>
	<dcterms:modified>2011-03-12T03:52:56Z</dcterms:modified>

	<description>&lt;p&gt;Here are some facts distilled from my experience with preparing kernels to
some embedded platforms. In other words, this is some of the stuff that is
usually presumed to be known, but that you won&#39;t find compiled in many
places, unfortunately.&lt;/p&gt;

&lt;p&gt;I am writing them here in the hope that they can be useful to other folks
trying to compile their kernel to embedded devices (and I would venture to
say that these &quot;non-standard&quot; platforms would become more popular in the
future).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;some machines don&#39;t have monitors, keyboards etc. They may only have
network connections (e.g., ethernet) and USB ports. In such cases, it
console&quot; called a netconsole. It can be enabled with the options: is quite
handy to see how the machine is booting with a &quot;virtual console&quot; called a
netconsole. It can be enabled with the options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CONFIG_NETCONSOLE=y
  CONFIG_NETPOLL=y
  CONFIG_NET_POLL_CONTROLLER=y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You have to tell the kernel where to send the messages that would,
otherwise, be presented on a screen. For sending them over the network, just
tell the kernel to use the command line option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    netconsole=6666@192.168.11.150/,@192.168.11.149/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, you can easily connect from another (more comfortable?) computer
with something like (this connection is made via UDP, not TCP):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ip addr add 192.168.11.149/24 broadcast 192.168.11.255 dev eth0
    nc -u -n -p 6666 192.168.11.150 6666
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;while some popular bootloaders for desktops are LILO and GRUB, many other
platforms use other bootloaders: yaboot, quik, bootx, silo, refit, etc. In
the case of embedded platforms, one that is popular is &quot;das uBoot&quot;, which
needs a special kind of kernel image, a &lt;code&gt;uImage&lt;/code&gt;, instead of a regular
&lt;code&gt;{b}zImage/vmlinu{x,z}&lt;/code&gt; image. (Well, actually, some other arches need
images in other formats, like &lt;code&gt;vmlinux.coff&lt;/code&gt; etc). Fortunately, the
kernel&#39;s makefile knows about some such arches and it generates the
correct image---but it is the task of the packager/distributor to find if
those images are needed or not. For the KuroBox HD/HG, all that is needed
is a simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cp $LINUXPATH/arch/powerpc/boot/uImage $BUILT_ROOT/boot/uImage-$VERSION
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;some extra care is needed when generating a kernel for such arches: the
tree of the devices which the kernel needs does not seem to be built
automatically (this is the case of the the KuroBox HD/HG). Something like
this is needed after the compilation of the kernel proper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ./scripts/dtc/dtc -I dts -O dtb -V 16 -o $BUILT_ROOT/boot/kuroboxHD.dtb-$VERSION ./arch/powerpc/boot/dts/kuroboxHD.dts
  ./scripts/dtc/dtc -I dts -O dtb -V 16 -o $BUILT_ROOT/boot/kuroboxHG.dtb-$VERSION ./arch/powerpc/boot/dts/kuroboxHG.dts
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to cross compile a kernel, don&#39;t forget to set the appropriate environment
options, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make clean
  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make oldconfig
  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make menuconfig
  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make all modules
  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make modules_install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It won&#39;t hurt if you use a concurrency setting (like -j3 or more) when
compiling all and modules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The uBoot command line (accessed via the network) can be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ext2load ide ${hdpart} ${ldaddr} ${hdfile}
  ext2load ide ${hdpart} 7f0000 boot/kuroboxHD.dtb
  setenv bootargs root=/dev/sda1 netconsole=6666@192.168.11.150/,@192.168.11.149/
  bootm ${ldaddr} - 7f0000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first two lines tell uBoot to load the both the kernel and the device
tree from the disk to the memory, the third line sets the kernel command
line (familiar to users of the &quot;common&quot; arches) and the fourth line
actually boots the kernel once it is loaded in the memory. Here, ${hdpart}
is the partition where the kernel image ${hdfile} should be loaded from
(usually in the form 0:1, to mean partition 1 from the disk 0), ${ldaddr}
is the memory address where the kernel should be loaded to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Something that is handy, no matter what size your machine has: the use of
ext4 (and, in particular, delayed allocation) with ext{2,3}
filesystems. To use it, just put this in your kernel configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CONFIG_EXT4_USE_FOR_EXT23=y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for daemons like avr-evtd, that need access to a serial port (so
that the user can turn off the device by pressing the power button),
enable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CONFIG_SERIO=y
  CONFIG_SERIO_SERPORT=y
  CONFIG_SERIAL_8250=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, you will always have to ssh into the system, become root, and
issue something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  shutdown -h now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is an inconvenience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is very important to set the Real Time Clock options right and this may
not be that obvious for some non-x86 platforms. In particular, for a
KuroBox HD, I&#39;m using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CONFIG_RTC_CLASS=y
  CONFIG_RTC_HCTOSYS=y
  CONFIG_RTC_HCTOSYS_DEVICE=rtc0
  CONFIG_RTC_INTF_SYSFS=y
  CONFIG_RTC_INTF_PROC=y
  CONFIG_RTC_INTF_DEV=y
  CONFIG_RTC_DRV_RS5C372=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last option is, perhaps, the tricky one, and varies from system to
system. Knowing which one to enable is a matter of knowing the specs of
your system and, if not known, discovery by trial-and-error. (For x86
systems, usually &lt;code&gt;CONFIG_RTC_DRV_CMOS=y&lt;/code&gt; is sufficient).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>


</item>
<item>

	<title>Debian Switching to EGLIBC</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/debian-switching-to-eglibc/</guid>

	<link>http://rb.doesntexist.org/blog//posts/debian-switching-to-eglibc/</link>


	<category>computers</category>

	<category>debian</category>

	<category>embedded</category>

	<category>linux</category>

	<category>ubuntu</category>


	<pubDate>Mon, 07 May 2007 23:00:00 -0300</pubDate>
	<dcterms:modified>2012-09-07T06:54:06Z</dcterms:modified>

	<description>&lt;p&gt;Having been playing with some new things in &lt;a href=&quot;http://www.debian.org/&quot;&gt;Debian&lt;/a&gt;, like the
&lt;a href=&quot;http://packages.debian.org/magicfilter&quot;&gt;magicfilter&lt;/a&gt; package, which is a superb, lightweight solution to
all my printing problems: to use a PCL 3 printer. I think that I will also
&quot;manufacture&quot; a solution with a metapackage of a live CD that includes the
environment that I use frequently, with the packages that I use (this is
probably quite leaner than what &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; has done with their
distribution, since I will mainly use some lighter packages).&lt;/p&gt;

&lt;p&gt;Oh, talking about lighter packages, I see that Debian has adopted a new C
library, namely &lt;a href=&quot;http://www.eglibc.org/&quot;&gt;EGLIBC&lt;/a&gt;, which stands for Embedded LIBC. Finally, it
seems that Debian will focus a bit more on smaller systems (which is a good
thing, because computing resources are limited).&lt;/p&gt;
</description>


</item>
<item>

	<title>Happy News: A new Kurobox</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/happy-news-a-new-kurobox/</guid>

	<link>http://rb.doesntexist.org/blog//posts/happy-news-a-new-kurobox/</link>


	<category>computers</category>

	<category>debian</category>

	<category>embedded</category>

	<category>kurobox</category>

	<category>linux</category>

	<category>nas</category>


	<pubDate>Sun, 22 Apr 2007 23:00:00 -0300</pubDate>
	<dcterms:modified>2012-09-07T06:54:06Z</dcterms:modified>

	<description>&lt;p&gt;Today I was pleasantly surprised that the Kurobox that &lt;a href=&quot;http://suihkulokki.blogspot.com/&quot;&gt;Riku Voipio&lt;/a&gt; sent
me has arrived!  From the looks of it, it is a Kurobox HG, which, compared
to my Kurobox HD, has a faster processor (it runs at 266MHz, instead of
200MHz), has more RAM (128MB, instead of 64MB), and has a faster network
connection (an 1Gbps instead of 100Mbps interface).&lt;/p&gt;

&lt;p&gt;I&#39;m trying to see if I will be able to use a SATA drive with this Kurobox,
as we can&#39;t find large IDE/PATA drives in the market today (almost). And the
bigger capacity ones are only available with SATA interfaces.&lt;/p&gt;
</description>


</item>
<item>

	<title>Playing with Package Proxies</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/playing-with-package-proxies/</guid>

	<link>http://rb.doesntexist.org/blog//posts/playing-with-package-proxies/</link>


	<category>approx</category>

	<category>apt-move</category>

	<category>computers</category>

	<category>debian</category>

	<category>embedded</category>

	<category>linux</category>

	<category>proxy</category>

	<category>ubuntu</category>


	<pubDate>Thu, 15 Mar 2007 23:00:00 -0300</pubDate>
	<dcterms:modified>2012-09-07T06:54:06Z</dcterms:modified>

	<description>&lt;p&gt;Have been playing with the great idea of &lt;a
href=&quot;http://lists.debian.org/debian-mentors/2009/03/msg00210.html&quot;&gt;caching&lt;/a&gt;
&lt;a href=&quot;http://lwn.net/Articles/318658/&quot;&gt;deb&lt;/a&gt; packages. I finally
settled for the option of using &lt;code&gt;&lt;a
href=&quot;http://git.debian.org/?p=pkg-ocaml-maint/packages/approx.git&quot;&gt;approx&lt;/a&gt;&lt;/code&gt;,
which does a really nice job of caching packages.&lt;/p&gt;

&lt;p&gt;Actually, it fullfils quite a lot of requirements and even surpasses some of my expectations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It supports multiple architectures (in fact, this is important for me, as
I use &lt;code&gt;i386&lt;/code&gt;, &lt;code&gt;amd64&lt;/code&gt;, and &lt;code&gt;powerpc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It can support multiple distributions (both different versions of the same
distribution and completely different distributions, as long as they use a
repository like &lt;a href=&quot;http://www.debian.org/&quot;&gt;Debian&lt;/a&gt;&#39;s, as is the
case of &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;).&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;It keeps its directory hierarchy neatly organized, like that of Debian, in
a package pool, which saves space and makes everything easier and faster
to find (and has the advantage of being fast with filesystems that don&#39;t
cope well with many entries in one directory).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The transition wasn&#39;t painless from &lt;a href=&quot;http://packages.debian.org/apt%2Dmove&quot;&gt;apt-move&lt;/a&gt;, since apt-move
moves the files, but renames them in a way that they don&#39;t keep epochs in
their names, which makes &lt;code&gt;approx-import&lt;/code&gt; moan about the packages.&lt;/p&gt;

&lt;p&gt;For places where I am too lazy to import the packages, I just filled the
cache redownloading the packages with something approximately like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  apt-get -d --reinstall install $(dpkg -l | grep &quot;^ii&quot; | cut -d &quot; &quot; -f 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, I hope that this experience happens to be useful for other people, so
that they can benefit from it. Rebuilding packages with a package cacher is
much more pleasant, especially if the package has a lot of
build-dependencies.&lt;/p&gt;
</description>


</item>
<item>

	<title>2001-02-04</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/2001-02-04/</guid>

	<link>http://rb.doesntexist.org/blog//posts/2001-02-04/</link>


	<category>bind</category>

	<category>debian</category>

	<category>linux</category>

	<category>work</category>


	<pubDate>Sun, 04 Feb 2001 00:00:00 -0200</pubDate>
	<dcterms:modified>2013-04-20T01:06:20Z</dcterms:modified>

	<description>&lt;p&gt;Tomorrow, I am going to a customer of mine to update his server.
With the BIND breakage, I&#39;ll have some packages to
&lt;code&gt;apt-get upgrade&lt;/code&gt;. I&#39;ll also put backups in a systematic way and
make time updates with NTP.&lt;/p&gt;
</description>


</item>
<item>

	<title>2001-01-31</title>


	<guid isPermaLink="false">http://rb.doesntexist.org/blog//posts/2001-01-31/</guid>

	<link>http://rb.doesntexist.org/blog//posts/2001-01-31/</link>


	<category>debian</category>

	<category>hardware</category>

	<category>linux</category>

	<category>study</category>


	<pubDate>Wed, 31 Jan 2001 00:00:00 -0200</pubDate>
	<dcterms:modified>2013-04-20T01:06:20Z</dcterms:modified>

	<description>&lt;p&gt;Happy New Millennium! So many things have happened since the last
time I&#39;ve updated my diary and I guess that since I can&#39;t summarize
everything accurately, I&#39;ll just list what I think are the
remarkable facts:&lt;/p&gt;

&lt;p&gt;I have now put my new computer (a &lt;a href=&quot;http://www.amd.com&quot;&gt;Duron&lt;/a&gt;
600MHz with a lovely &lt;a href=&quot;http://www.asus.com&quot;&gt;Asus&lt;/a&gt; A7V motherboard)
to actual use. Of course, I made a backup of my older computer, so
that I was prepared for worst (read on);
&lt;a href=&quot;http://www.kernel.org&quot;&gt;Linux 2.4.0&lt;/a&gt; has finally been released and
it includes a lot of new goodies. While I think that it is still
not the right time to switch to the new version, it is indeed quite
tempting (but I&#39;ll resist that temptation, since I&#39;ve read a lot of
people complaining of data corruption with the new IDE drivers when
used with VIA chipsets -- and my motherboard features, guess what,
a VIA chipset, of course).
At the time of this writing (Feb 4th), Linux 2.4.1 was already
released, with many minor fixes;
A &lt;a href=&quot;http://www.debian.org/releases/testing&quot;&gt;new version&lt;/a&gt; of the
Linux Distribution that I use,
&lt;a href=&quot;http://www.debian.org&quot;&gt;Debian GNU/Linux&lt;/a&gt; is now getting more and
more functionality. It is ready for the new Linux 2.4.0 kernel, but
still under development (read: prone to break). Oh, why can&#39;t new
software be stable? In the mean time, I&#39;m using Debian&#39;s
&lt;a href=&quot;http://www.debian.org/releases/potato&quot;&gt;potato&lt;/a&gt;.
One week after I have started to use my new computer, my 40GB
Samsung drive broke. Ouch. Fortunately, I had taken backups of
everything from my old computer and any new data that I had on my
new computer was still readable. So, now, I&#39;m using a new 30GB
&lt;a href=&quot;http://www.quantum.com&quot;&gt;Quantum&lt;/a&gt; drive and everything seems to be
working fine again. Nice.
I am now reading more and more things about my Mastership work. It
will be in a sub-area of computer science called
&lt;a href=&quot;http://rb.doesntexist.org/blog//tags/linux/../compbio/index.html&quot;&gt;Computational (Molecular) Biology&lt;/a&gt;. In
particular, I&#39;m studying now alignments of multiple sequences. The
theory is quite general and applies to alignments of sequences over
any alphabets, but the biological motivation is to study and
compare (sub)sequences of DNA and of proteins;
I must confess that while I was reading slowly in the beginning,
without much motivation, now I&#39;m quite excited about the subject.
It has really grown on me and now I see how much I still have to
catch up to read bleading edge papers (it is also surprising that
this area of knowledge has evolved so much in so little time, but I
guess that this is natural whenever there are economic interests in
a given field). Now, I want to learn more!&lt;/p&gt;
</description>


</item>

</channel>
</rss>
