<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged git</title>
<link href="http://cynic.cc/blog//tags/git/"/>
<link href="http://cynic.cc/blog//tags/git/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Rogério Brito's Digital Junkyard</name>

</author>




<id>http://cynic.cc/blog//tags/git/</id>

<subtitle type="html">Rogério Brito&#39;s Digital Junkyard</subtitle>
<generator uri="http://ikiwiki.info/">ikiwiki</generator>
<updated>2013-06-11T07:57:38Z</updated>
<entry>
	<title>Working with CVS via Git</title>

	<id>http://cynic.cc/blog//posts/working_with_cvs_via_git/</id>

	<link href="http://cynic.cc/blog//posts/working_with_cvs_via_git/"/>






	<category term="cvs" />

	<category term="debian" />

	<category term="free-software" />

	<category term="git" />

	<category term="hacks" />

	<category term="lame" />

	<category term="revision-control" />


	<updated>2013-06-11T07:57:38Z</updated>
	<published>2013-06-11T07:49:56Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;The easiest way of using git locally to commit to a CVS repository is to
have &lt;em&gt;both&lt;/em&gt; a git clone of the CVS repository &lt;em&gt;and&lt;/em&gt; a CVS checkout of your
repository.&lt;/p&gt;

&lt;h1&gt;Initial steps that Work for Me (TM)&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create your git clone of the CVS repository:&lt;/p&gt;

&lt;p&gt; git cvsimport -v -a -A /tmp/lame-authors.txt -k -m -d \
     :ext:rbrito@lame.cvs.sourceforge.net:/cvsroot/lame lame&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt; The command above will create your clone of the CVS repository in the
 current directory which we suppose, for the sake of this discussion, is
 &lt;code&gt;/tmp/gitified&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt; If want to specify a directory different than what you&#39;re in, then you
 should add the option &lt;code&gt;-C /path/to/git/repository&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a checkout of the CVS repository for CVS work stuff (I&#39;m checking
out things under &lt;code&gt;/tmp&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;  cvs -z3 -d:ext:rbrito@lame.cvs.sourceforge.net:/cvsroot/lame checkout lame&lt;/p&gt;

&lt;p&gt;This will create your CVS checkout on the directory &lt;code&gt;/tmp/lame&lt;/code&gt;, assuming
that you are working under &lt;code&gt;/tmp&lt;/code&gt;, as I do.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h1&gt;Doing real work&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to your git clone (&lt;code&gt;/tmp/gitified&lt;/code&gt;) and start hacking, committing, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When it is time to send your patches to the CVS repo, you have to:&lt;/p&gt;

&lt;p&gt; export GIT_DIR=/tmp/gitified/.git
 cd /tmp/lame
 git cherry origin master | sed -n &#39;s/^+ //p&#39; | xargs -l1 git cvsexportcommit -c -p -v&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;  This will automatically check in all the commits that you have made in
  step 3.&lt;/p&gt;

&lt;h1&gt;Continuing your work afterwards&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;First, discard your commits in your git repository, so that you don&#39;t get
further problems with &lt;code&gt;git cvsimport&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your git repository with the current contents of the CVS repo:&lt;/p&gt;

&lt;p&gt; cd /tmp/gitified
 git cvsimport -v -a -A /tmp/lame-authors.txt -k -m -d \
     :ext:rbrito@lame.cvs.sourceforge.net:/cvsroot/lame lame&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your CVS repository with the current contents of the CVS repo too:&lt;/p&gt;

&lt;p&gt; cd /tmp/lame
 cvs update&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Of course, I would prefer a simpler, leaner workflow. If you happen to have
one, please let me know.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Migrate from RCS to git</title>

	<id>http://cynic.cc/blog//posts/migrate-from-rcs-to-git/</id>

	<link href="http://cynic.cc/blog//posts/migrate-from-rcs-to-git/"/>






	<category term="debian" />

	<category term="emacs" />

	<category term="git" />

	<category term="hacks" />

	<category term="revision-control" />


	<updated>2011-03-12T03:53:18Z</updated>
	<published>2010-02-11T07:39:37Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;I have been keeping my &lt;a href=&quot;http://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; files under version control since I was
introduced to &lt;a href=&quot;http://www.gnu.org/software/auctex/&quot;&gt;AUCTeX&lt;/a&gt; and I realized that a good way to approach the
&quot;evolutionary&quot; approach to software (this includes text) is to use a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Revision_control&quot;&gt;revision control system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started using that with &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; 21 (the first version of Emacs that I
used was Emacs 19.something which I can&#39;t remember) and the revision system
that was most easily available was &lt;a href=&quot;http://www.gnu.org/software/rcs/&quot;&gt;RCS&lt;/a&gt;. Its integration with Emacs
was very good and also easy to use: type &lt;code&gt;C-x v-v&lt;/code&gt; and a check in is
performed (or a check out, depending on the state of the file). You would be
asked for a changelog for that file and that was it.&lt;/p&gt;

&lt;p&gt;Now, on the other hand, there is a myriad of options and one that looks very
nice to me (apart from not dealing with metadata, but that&#39;s OK with me for
the moment) is Linus Torvald&#39;s &lt;a href=&quot;http://git-scm.com/&quot;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;. The very nice thing with &lt;code&gt;git&lt;/code&gt;
(or many other such systems) is that the interface with Emacs is exactly the
same: &lt;code&gt;C-x v-v&lt;/code&gt;. That&#39;s the only thing you need to remember to work well
with, say, your text project. (I don&#39;t actually know very much of the
management workflow under Emacs, but I also use the command line a good
amount and it serves me well so far).&lt;/p&gt;

&lt;p&gt;But how can I convert my RCS &quot;repositories&quot; to a proper &lt;code&gt;git&lt;/code&gt; repository?
Well, git comes with a subcommand called &lt;code&gt;cvsimport&lt;/code&gt;, meant to be used with
CVS and this does help, since a CVS repository is essentially just a
collection of RCS files. As many people have migrated along the path from
RCS to CVS to Subversion to git, and I did not intend to convert the
repository in multiple steps, I am documenting what I did here.&lt;/p&gt;

&lt;p&gt;So, if you have the &lt;code&gt;,v&lt;/code&gt; files that RCS generates (the &quot;repository&quot; files
for each file tracked by RCS) spread in a tree and you would like to convert
that tree to a git repository for replication, backup and &quot;time
machine-like&quot; support, you can mimic a basic CVS repository that can be
converted easily with the following simple steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory hierarchy somewhere, denoted here by
&lt;code&gt;cvs-source-dir&lt;/code&gt;. This will play the role of a CVS repository which &lt;code&gt;git
cvsimport&lt;/code&gt; will convert.&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;cvs-source-dir&lt;/code&gt;, create the directory tree as you would like it to
be visible by &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As an immediate subdirectory of &lt;code&gt;cvs-source-dir&lt;/code&gt;, create a directory named
&lt;code&gt;CVSROOT&lt;/code&gt;, that is &lt;code&gt;cvs-source-dir/CVSROOT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each immediate subdirectory of &lt;code&gt;cvs-source-dir&lt;/code&gt; will play the role of a
CVS module. Just think of that as a project under control of the version
control system.&lt;/li&gt;
&lt;li&gt;Think about the &lt;code&gt;,v&lt;/code&gt; files as your regular files and put them under the
&lt;code&gt;cvs-source-dir&lt;/code&gt; tree, as you would like them to be.&lt;/li&gt;
&lt;li&gt;Create the directory where your git repository will reside, denoted here
by &lt;code&gt;git-repo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git cvsimport -v -a -A -k -m -d cvs-source-dir -C git-repo cvs-module&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That&#39;s it. It seems to perform a very good job of changing a very old system
to something that is modern and with many features (and is distributed).&lt;/p&gt;

&lt;p&gt;You may also want to read about the way to convert the ids of commits that
RCS/CVS register to proper (people) names, which git uses. Read the
&lt;code&gt;git-cvsimport&lt;/code&gt; manpage for more details on this and other options mentioned
above.&lt;/p&gt;

	</content>



</entry>

</feed>
