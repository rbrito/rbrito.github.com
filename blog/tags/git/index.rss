<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>pages tagged git</title>
<link>http://cynic.cc/blog//tags/git/</link>

<description>Rog√©rio Brito&#39;s Digital Junkyard</description>
<generator>ikiwiki</generator>
<pubDate>Sat, 15 Feb 2014 22:39:04 -0200</pubDate>
<item>
	<title>Playing with MOOCs</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/playing_with_moocs/</guid>

	<link>http://cynic.cc/blog//posts/playing_with_moocs/</link>



	<category>debian</category>

	<category>education</category>

	<category>free-software</category>

	<category>git</category>

	<category>mooc</category>

	<category>python</category>

	<category>study</category>


	<pubDate>Thu, 04 Jul 2013 08:33:00 -0300</pubDate>
	<dcterms:modified>2013-10-11T06:07:42Z</dcterms:modified>


	<description>&lt;p&gt;Not so much ago, we had a boom of new enterprises offering Massive Online
Open Courses (MOOCs for short).&lt;/p&gt;

&lt;p&gt;First were Thrun and Norvig (Artificial Intelligence), with Widom
(Introduction to Databases) and Ng (Machine Learning). Then, these initial
experiments led to the creation of Udacity (founded by Thrun) and Coursera
(founded by Ng and Koller).&lt;/p&gt;

&lt;p&gt;I have been keeping an eye on them for some time and, in fact, I have been
contributing to a project similar to &lt;a href=&quot;https://github.com/rg3/youtube-dl&quot;&gt;youtube-dl&lt;/a&gt; (which
&lt;a href=&quot;http://packages.debian.org/sid/youtube-dl&quot;&gt;I package for Debian&lt;/a&gt;), but focused on downloading videos from
Cousera, called &lt;a href=&quot;https://github.com/jplehmann/coursera&quot;&gt;&lt;code&gt;coursera-dl&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started contributing to &lt;code&gt;coursera-dl&lt;/code&gt; because I wanted to stratch some
itches with downloading with &lt;a href=&quot;http://aria2.sourceforge.net/&quot;&gt;&lt;code&gt;aria2c&lt;/code&gt;&lt;/a&gt;, but soon the original
author of the project granted me write permission to the repository and I
have been one of the persons that commits the most, which is strange, since
I was not the original creator of the program.&lt;/p&gt;

&lt;p&gt;So far, from the courses that grant certificates, I have concluded the
following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Algorithms: Design and Analysis, Part 1 (Coursera)&lt;/li&gt;
&lt;li&gt;Machine Learning (Coursera)&lt;/li&gt;
&lt;li&gt;Introduction to Databases (Coursera)&lt;/li&gt;
&lt;li&gt;Quantum Mechanics and Quantum Computation (Coursera)&lt;/li&gt;
&lt;li&gt;Introduction to Cryptography I (Coursera)&lt;/li&gt;
&lt;li&gt;M101P: MongoDB for Developers (10gen)&lt;/li&gt;
&lt;li&gt;M102: MongoDB for DBAs (10gen)&lt;/li&gt;
&lt;li&gt;M101J: MongoDB for Java Developers (10gen)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have to say that this have been a pleasant experience, with some of the
courses being challenging, but not up to what an undergraduate course would
be (and the fears of some people that such courses would threaten the
conventional University-style model are a bit far at this point).&lt;/p&gt;

&lt;p&gt;Anyway, talking about challenging courses, in particular, prof. Umesh
Vazirani&#39;s &quot;Quantum Mechanics and Quantum Computation&quot; had a lot of
(computational) work and this was one of the courses that prompted me to use
a computer algebra system for manipulating some tedious calculations.&lt;/p&gt;

&lt;p&gt;In particular, I used a mix of the &lt;a href=&quot;http://www.sagenb.org/&quot;&gt;online SAGE math server&lt;/a&gt; and
&lt;a href=&quot;http://www.wolframalpha.com/&quot;&gt;Wolfram Alpha&lt;/a&gt;, whichever I found the syntax to be easier to use for
the problem in question. It is with happiness that I see that there are
efforts to &lt;a href=&quot;http://people.debian.org/~thansen/debian-sage-status.html&quot;&gt;get SAGE again packaged in Debian&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another (positively) surprising course has been Dan Boneh&#39;s &quot;Introduction to
Cryptography I&quot;, which was more theoretical and more serious than what I was
expecting. It even included some nice proof sketches and discussion of
recent results. The last course on cryptography that I took was in 1998 and
&lt;em&gt;a lot&lt;/em&gt; of things changed since then, including the way to think about
cryptography. But more on that on a future post.&lt;/p&gt;

&lt;p&gt;There are some other courses that I may be completing soon and that I will
post more about, with some reviews of the good and the bad parts of select
ones.&lt;/p&gt;
</description>


</item>
<item>
	<title>Working with CVS via Git</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/working_with_cvs_via_git/</guid>

	<link>http://cynic.cc/blog//posts/working_with_cvs_via_git/</link>



	<category>cvs</category>

	<category>debian</category>

	<category>free-software</category>

	<category>git</category>

	<category>hacks</category>

	<category>lame</category>

	<category>revision-control</category>


	<pubDate>Tue, 11 Jun 2013 04:49:56 -0300</pubDate>
	<dcterms:modified>2014-02-16T00:39:04Z</dcterms:modified>


	<description>&lt;p&gt;The easiest way of using git locally to commit to a CVS repository is to
have &lt;em&gt;both&lt;/em&gt; a git clone of the CVS repository &lt;em&gt;and&lt;/em&gt; a CVS checkout of your
repository.&lt;/p&gt;

&lt;h1 id=&quot;initialstepsthatworkformetm&quot;&gt;Initial steps that Work for Me (TM)&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create your git clone of the CVS repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cvsimport -v -a -A /tmp/lame-authors.txt -k -m -d \
    :ext:rbrito@lame.cvs.sourceforge.net:/cvsroot/lame lame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command above will create your clone of the CVS repository in the
current directory which we suppose, for the sake of this discussion, is
&lt;code&gt;/tmp/gitified&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If want to specify a directory different than what you&#39;re in, then you
should add the option &lt;code&gt;-C /path/to/git/repository&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a checkout of the CVS repository for CVS work stuff (I&#39;m checking
out things under &lt;code&gt;/tmp&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cvs -z3 -d:ext:rbrito@lame.cvs.sourceforge.net:/cvsroot/lame checkout lame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create your CVS checkout on the directory &lt;code&gt;/tmp/lame&lt;/code&gt;, assuming
that you are working under &lt;code&gt;/tmp&lt;/code&gt;, as I do.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;doingrealwork&quot;&gt;Doing real work&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to your git clone (&lt;code&gt;/tmp/gitified&lt;/code&gt;) and start hacking, committing, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When it is time to send your patches to the CVS repo, you have to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GIT_DIR=/tmp/gitified/.git
cd /tmp/lame
git cherry origin master | sed -n &#39;s/^+ //p&#39; | xargs -l1 git cvsexportcommit -c -p -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will automatically check in all the commits that you have made in
the previous step.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;continuingyourworkafterwards&quot;&gt;Continuing your work afterwards&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;First, discard your commits in your git repository, so that you don&#39;t get
further problems with &lt;code&gt;git cvsimport&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your git repository with the current contents of the CVS repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/gitified
git cvsimport -v -a -A /tmp/lame-authors.txt -k -m -d \
    :ext:rbrito@lame.cvs.sourceforge.net:/cvsroot/lame lame
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your CVS repository with the current contents of the CVS repo too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/lame
cvs update
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Of course, I would prefer a simpler, leaner workflow. If you happen to have
one, please let me know.&lt;/p&gt;
</description>


</item>
<item>
	<title>Migrate from RCS to git</title>

	<guid isPermaLink="false">http://cynic.cc/blog//posts/migrate-from-rcs-to-git/</guid>

	<link>http://cynic.cc/blog//posts/migrate-from-rcs-to-git/</link>



	<category>debian</category>

	<category>emacs</category>

	<category>git</category>

	<category>hacks</category>

	<category>revision-control</category>


	<pubDate>Thu, 11 Feb 2010 05:39:37 -0200</pubDate>
	<dcterms:modified>2011-03-12T03:53:18Z</dcterms:modified>


	<description>&lt;p&gt;I have been keeping my &lt;a href=&quot;http://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; files under version control since I was
introduced to &lt;a href=&quot;http://www.gnu.org/software/auctex/&quot;&gt;AUCTeX&lt;/a&gt; and I realized that a good way to approach the
&quot;evolutionary&quot; approach to software (this includes text) is to use a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Revision_control&quot;&gt;revision control system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started using that with &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; 21 (the first version of Emacs that I
used was Emacs 19.something which I can&#39;t remember) and the revision system
that was most easily available was &lt;a href=&quot;http://www.gnu.org/software/rcs/&quot;&gt;RCS&lt;/a&gt;. Its integration with Emacs
was very good and also easy to use: type &lt;code&gt;C-x v-v&lt;/code&gt; and a check in is
performed (or a check out, depending on the state of the file). You would be
asked for a changelog for that file and that was it.&lt;/p&gt;

&lt;p&gt;Now, on the other hand, there is a myriad of options and one that looks very
nice to me (apart from not dealing with metadata, but that&#39;s OK with me for
the moment) is Linus Torvald&#39;s &lt;a href=&quot;http://git-scm.com/&quot;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;. The very nice thing with &lt;code&gt;git&lt;/code&gt;
(or many other such systems) is that the interface with Emacs is exactly the
same: &lt;code&gt;C-x v-v&lt;/code&gt;. That&#39;s the only thing you need to remember to work well
with, say, your text project. (I don&#39;t actually know very much of the
management workflow under Emacs, but I also use the command line a good
amount and it serves me well so far).&lt;/p&gt;

&lt;p&gt;But how can I convert my RCS &quot;repositories&quot; to a proper &lt;code&gt;git&lt;/code&gt; repository?
Well, git comes with a subcommand called &lt;code&gt;cvsimport&lt;/code&gt;, meant to be used with
CVS and this does help, since a CVS repository is essentially just a
collection of RCS files. As many people have migrated along the path from
RCS to CVS to Subversion to git, and I did not intend to convert the
repository in multiple steps, I am documenting what I did here.&lt;/p&gt;

&lt;p&gt;So, if you have the &lt;code&gt;,v&lt;/code&gt; files that RCS generates (the &quot;repository&quot; files
for each file tracked by RCS) spread in a tree and you would like to convert
that tree to a git repository for replication, backup and &quot;time
machine-like&quot; support, you can mimic a basic CVS repository that can be
converted easily with the following simple steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory hierarchy somewhere, denoted here by
&lt;code&gt;cvs-source-dir&lt;/code&gt;. This will play the role of a CVS repository which &lt;code&gt;git
cvsimport&lt;/code&gt; will convert.&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;cvs-source-dir&lt;/code&gt;, create the directory tree as you would like it to
be visible by &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As an immediate subdirectory of &lt;code&gt;cvs-source-dir&lt;/code&gt;, create a directory named
&lt;code&gt;CVSROOT&lt;/code&gt;, that is &lt;code&gt;cvs-source-dir/CVSROOT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each immediate subdirectory of &lt;code&gt;cvs-source-dir&lt;/code&gt; will play the role of a
CVS module. Just think of that as a project under control of the version
control system.&lt;/li&gt;
&lt;li&gt;Think about the &lt;code&gt;,v&lt;/code&gt; files as your regular files and put them under the
&lt;code&gt;cvs-source-dir&lt;/code&gt; tree, as you would like them to be.&lt;/li&gt;
&lt;li&gt;Create the directory where your git repository will reside, denoted here
by &lt;code&gt;git-repo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git cvsimport -v -a -A -k -m -d cvs-source-dir -C git-repo cvs-module&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&#39;s it. It seems to perform a very good job of changing a very old system
to something that is modern and with many features (and is distributed).&lt;/p&gt;

&lt;p&gt;You may also want to read about the way to convert the ids of commits that
RCS/CVS register to proper (people) names, which git uses. Read the
&lt;code&gt;git-cvsimport&lt;/code&gt; manpage for more details on this and other options mentioned
above.&lt;/p&gt;
</description>


</item>

</channel>
</rss>
