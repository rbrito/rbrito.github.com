<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged emacs</title>
<link href="http://cynic.cc/blog//tags/emacs/"/>
<link href="http://cynic.cc/blog//tags/emacs/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Rogério Brito's Digital Junkyard</name>

</author>




<id>http://cynic.cc/blog//tags/emacs/</id>

<subtitle type="html">Rogério Brito&#39;s Digital Junkyard</subtitle>
<generator uri="http://ikiwiki.info/">ikiwiki</generator>
<updated>2013-09-22T21:33:41Z</updated>
<entry>
	<title>Changing Some Configuration from Defaults</title>

	<id>http://cynic.cc/blog//posts/changing-some-configuration-from-defaults/</id>

	<link href="http://cynic.cc/blog//posts/changing-some-configuration-from-defaults/"/>






	<category term="configuration" />

	<category term="debian" />

	<category term="emacs" />

	<category term="hacks" />

	<category term="productivity" />

	<category term="readline" />


	<updated>2010-05-22T23:36:42Z</updated>
	<published>2010-05-22T23:36:42Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;Two of my most frequently used tools are, hands down, Emacs and bash. Having a pleasant configuration of one&#39;s toolbox is necessary for long-term productivity.&lt;/p&gt;

&lt;p&gt;However, newer versions of the programs (any programs) don&#39;t always have good, comfortable defaults. That is the case with Emacs 23 and bash 4.&lt;/p&gt;

&lt;p&gt;With Emacs 23, by default, the scratch buffer shows some text that, if you want to quickly enter text to be saved, has to be deleted. This can be tolerated for some invocations of the editor. But at some point, it gets on one&#39;s nerves.&lt;/p&gt;

&lt;p&gt;Luckily, Emacs is so fully customizable that this is not a problem, unless you have to hunt down the right knobs and you are an e-lisp illiterate. That is my case.&lt;/p&gt;

&lt;p&gt;After reading an admittedly small amount of documentation, some good lines that ought to be put into one&#39;s &lt;code&gt;.emacs&lt;/code&gt; file are:&lt;/p&gt;

&lt;pre&gt;(setq inhibit-startup-echo-area-message &quot;rbrito&quot;)
(setq initial-scratch-message nil); show an empty scratch buffer
(setq inhibit-startup-message t); remove splash screen
&lt;/pre&gt;

&lt;p&gt;Another line that may make things more comfortable (especially if you, like me, use Emacs&#39;s dired as a filemanager to navigate your folders):&lt;/p&gt;

&lt;pre&gt;(defalias &#39;yes-or-no-p &#39;y-or-n-p)
&lt;/pre&gt;

&lt;p&gt;But configuring Emacs is not always that hard. Seeing a change of behaviour with your shell is scarier. When bash 4 was released, one thing that got implemented is the echo of some characters from the terminal to the screen.&lt;/p&gt;

&lt;p&gt;In practice and with my usage pattern, this meant that whenever I was typing a command line, changed my mind and pressed C-c, I got a ^C printed on the screen, usually overwriting one or two characters of what I had typed. And this prevented me from automatically copying and pasting the command that I had typed.&lt;/p&gt;

&lt;p&gt;Looking for an answer to that was much harder than to see how to change a parameter on Emacs: every search that I tried on Google with the words &quot;bash&quot; and &quot;Ctrl-C&quot; or some variants of that eventually lead me to &quot;how do I trap a Ctrl-C on my shell script?&quot;.&lt;/p&gt;

&lt;p&gt;Decided to see what changed, I read the documentation of readline. It didn&#39;t help, because I was reading something from version 5. I, then, downloaded the source code and started looking for &lt;code&gt;SIGINT&lt;/code&gt;. Then, perusing the code (and the changelog), I saw that with bash 4 and readline 6, a new configuration option was introduced: the &lt;code&gt;echo-control-characters&lt;/code&gt; option of readline.&lt;/p&gt;

&lt;p&gt;Of course, after knowing this, stopping the undesired behaviour was a simple matter of inserting &quot;&lt;code&gt;set echo-control-characters off&lt;/code&gt;&quot; in my &lt;code&gt;.inputrc&lt;/code&gt; and think about how much time I spent with that uncomfortable behaviour in some of my preferred tools.&lt;/p&gt;

&lt;p&gt;﻿As an addendum to the previous paragraphs (written on February of this year, but only now published), the Debian package of &lt;a href=&quot;http://www.gnu.org/software/emacs/NEWS.23.2&quot;&gt;Emacs 23.2&lt;/a&gt;, the newest version as of this writing, comes with some configuration that makes it ignore the settings that are used with fontconfig. I did not spend any time trying to see the cause of the problem, but adding a simple&lt;/p&gt;

&lt;pre&gt;Emacs*font:            Mono
&lt;/pre&gt;

&lt;p&gt;to my &lt;code&gt;.Xdefaults&lt;/code&gt; file did the trick and restored back the ability to use DejaVu Sans Mono at the right size on my system.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Migrate from RCS to git</title>

	<id>http://cynic.cc/blog//posts/migrate-from-rcs-to-git/</id>

	<link href="http://cynic.cc/blog//posts/migrate-from-rcs-to-git/"/>






	<category term="debian" />

	<category term="emacs" />

	<category term="git" />

	<category term="hacks" />

	<category term="revision-control" />


	<updated>2011-03-12T03:53:18Z</updated>
	<published>2010-02-11T07:39:37Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;I have been keeping my &lt;a href=&quot;http://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; files under version control since I was
introduced to &lt;a href=&quot;http://www.gnu.org/software/auctex/&quot;&gt;AUCTeX&lt;/a&gt; and I realized that a good way to approach the
&quot;evolutionary&quot; approach to software (this includes text) is to use a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Revision_control&quot;&gt;revision control system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started using that with &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; 21 (the first version of Emacs that I
used was Emacs 19.something which I can&#39;t remember) and the revision system
that was most easily available was &lt;a href=&quot;http://www.gnu.org/software/rcs/&quot;&gt;RCS&lt;/a&gt;. Its integration with Emacs
was very good and also easy to use: type &lt;code&gt;C-x v-v&lt;/code&gt; and a check in is
performed (or a check out, depending on the state of the file). You would be
asked for a changelog for that file and that was it.&lt;/p&gt;

&lt;p&gt;Now, on the other hand, there is a myriad of options and one that looks very
nice to me (apart from not dealing with metadata, but that&#39;s OK with me for
the moment) is Linus Torvald&#39;s &lt;a href=&quot;http://git-scm.com/&quot;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;. The very nice thing with &lt;code&gt;git&lt;/code&gt;
(or many other such systems) is that the interface with Emacs is exactly the
same: &lt;code&gt;C-x v-v&lt;/code&gt;. That&#39;s the only thing you need to remember to work well
with, say, your text project. (I don&#39;t actually know very much of the
management workflow under Emacs, but I also use the command line a good
amount and it serves me well so far).&lt;/p&gt;

&lt;p&gt;But how can I convert my RCS &quot;repositories&quot; to a proper &lt;code&gt;git&lt;/code&gt; repository?
Well, git comes with a subcommand called &lt;code&gt;cvsimport&lt;/code&gt;, meant to be used with
CVS and this does help, since a CVS repository is essentially just a
collection of RCS files. As many people have migrated along the path from
RCS to CVS to Subversion to git, and I did not intend to convert the
repository in multiple steps, I am documenting what I did here.&lt;/p&gt;

&lt;p&gt;So, if you have the &lt;code&gt;,v&lt;/code&gt; files that RCS generates (the &quot;repository&quot; files
for each file tracked by RCS) spread in a tree and you would like to convert
that tree to a git repository for replication, backup and &quot;time
machine-like&quot; support, you can mimic a basic CVS repository that can be
converted easily with the following simple steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory hierarchy somewhere, denoted here by
&lt;code&gt;cvs-source-dir&lt;/code&gt;. This will play the role of a CVS repository which &lt;code&gt;git
cvsimport&lt;/code&gt; will convert.&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;cvs-source-dir&lt;/code&gt;, create the directory tree as you would like it to
be visible by &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As an immediate subdirectory of &lt;code&gt;cvs-source-dir&lt;/code&gt;, create a directory named
&lt;code&gt;CVSROOT&lt;/code&gt;, that is &lt;code&gt;cvs-source-dir/CVSROOT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each immediate subdirectory of &lt;code&gt;cvs-source-dir&lt;/code&gt; will play the role of a
CVS module. Just think of that as a project under control of the version
control system.&lt;/li&gt;
&lt;li&gt;Think about the &lt;code&gt;,v&lt;/code&gt; files as your regular files and put them under the
&lt;code&gt;cvs-source-dir&lt;/code&gt; tree, as you would like them to be.&lt;/li&gt;
&lt;li&gt;Create the directory where your git repository will reside, denoted here
by &lt;code&gt;git-repo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git cvsimport -v -a -A -k -m -d cvs-source-dir -C git-repo cvs-module&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&#39;s it. It seems to perform a very good job of changing a very old system
to something that is modern and with many features (and is distributed).&lt;/p&gt;

&lt;p&gt;You may also want to read about the way to convert the ids of commits that
RCS/CVS register to proper (people) names, which git uses. Read the
&lt;code&gt;git-cvsimport&lt;/code&gt; manpage for more details on this and other options mentioned
above.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>2005-11-20</title>

	<id>http://cynic.cc/blog//posts/2005-11-20/</id>

	<link href="http://cynic.cc/blog//posts/2005-11-20/"/>






	<category term="debian" />

	<category term="emacs" />

	<category term="free-software" />


	<updated>2013-04-18T21:09:53Z</updated>
	<published>2005-11-20T02:00:00Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;I&#39;m &lt;em&gt;so&lt;/em&gt; impressed with the
&lt;a href=&quot;http://packages.debian.org/emacs-snapshot-gtk&quot;&gt;recent improvements&lt;/a&gt;
in &lt;a href=&quot;http://www.gnu.org/&quot;&gt;GNU&lt;/a&gt; &lt;a href=&quot;http://www.emacswiki.org/&quot;&gt;Emacs&lt;/a&gt;
that I am sincerely considering using it as my &quot;default operating
system&quot;.&lt;/p&gt;

&lt;p&gt;Many people say that joking, but the new features along with a more
user-friendly, really make that an interesting option.&lt;/p&gt;

&lt;p&gt;I use, by the way, the following extra packages from
&lt;a href=&quot;http://www.debian.org/&quot;&gt;Debian&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rbrito@dumont:~&amp;#036; COLUMNS=88 dpkg -l | grep -- -el
ii  debian-el        26.3-1           Emacs helpers specific to Debian users
ii  emacs-goodies-el 26.3-1           Miscellaneous add-ons for Emacs
ii  gettext-el       0.14.5-2         Emacs po-mode for editing .po files
ii  post-el          2004.07.23-2     emacs major mode for editing mail
rbrito@dumont:~&amp;#036;
&lt;/code&gt;&lt;/pre&gt;

	</content>



</entry>
<entry>
	<title>2002-03-19</title>

	<id>http://cynic.cc/blog//posts/2002-03-19/</id>

	<link href="http://cynic.cc/blog//posts/2002-03-19/"/>






	<category term="debian" />

	<category term="emacs" />

	<category term="free-software" />

	<category term="study" />


	<updated>2013-09-22T21:33:41Z</updated>
	<published>2002-03-19T03:00:00Z</published>


	<content type="html" xml:lang="en">
	&lt;p&gt;Discovered the amazing
&lt;a href=&quot;http://mirrors.sunsite.dk/auctex/www/auctex/&quot;&gt;AUCTeX&lt;/a&gt;. I just
can&#39;t get enough of it and I&#39;m looking everywhere to find things
that I can typeset with LaTeX, just to use AUCTeX. I don&#39;t know how
I have lived without it this far.&lt;/p&gt;

&lt;p&gt;Wrote a bit more of my Master&#39;s thesis.&lt;/p&gt;

	</content>



</entry>

</feed>
