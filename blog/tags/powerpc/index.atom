<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged powerpc</title>
<link href="http://cynic.cc/blog//tags/powerpc/"/>
<link href="http://cynic.cc/blog//tags/powerpc/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Rogério Brito's Digital Junkyard</name>

</author>




<id>http://cynic.cc/blog//tags/powerpc/</id>

<subtitle type="html">Rogério Brito&#39;s Digital Junkyard</subtitle>
<generator uri="http://ikiwiki.info/">ikiwiki</generator>
<updated>2013-05-08T00:28:38Z</updated>
<entry>
	<title>Running GRUB2 on PowerPC Macs</title>

	<id>http://cynic.cc/blog//posts/running_grub2_on_powerpc_macs/</id>

	<link href="http://cynic.cc/blog//posts/running_grub2_on_powerpc_macs/"/>






	<category term="configuration" />

	<category term="debian" />

	<category term="development" />

	<category term="free-software" />

	<category term="hacks" />

	<category term="ibook" />

	<category term="kernel" />

	<category term="linux" />

	<category term="mac" />

	<category term="powerpc" />


	<updated>2011-04-03T01:21:31Z</updated>
	<published>2011-04-03T01:18:12Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;Here I write a little bit about my experiences running GRUB2 with a PowerPC
Mac (actually, an iBook G4), since the current documentation is lacking in
many places (outdated, incorrect, etc.).&lt;/p&gt;

&lt;p&gt;Some of what I say is platform agnostic, though, and may be of interest to
users of GRUB in general.&lt;/p&gt;

&lt;h1&gt;Basics using GRUB2 with PowerPC&lt;/h1&gt;

&lt;p&gt;First of all, it is important to understand (at least superficially) how
botting on a Mac works.&lt;/p&gt;

&lt;p&gt;One of the first programs that run in your Mac is the OpenFirmware. It works
with more or less the same purpose of a BIOS in a regular x86 system. The
basic idea is the same: get the computer running with whatever programs you
want it to run. The implementation, though, differs quite a bit.&lt;/p&gt;

&lt;p&gt;First of all, OpenFirmware (OF) usually presents itself as a command-line
interface that is programmable, differently from the common day BIOSes from
x86 boxes. As it is programmable, it is more flexible, but this flexibility
comes at the price of an increased complexity.&lt;/p&gt;

&lt;p&gt;I may write some things more in a future article, if there is any
interest.&lt;/p&gt;

&lt;p&gt;For now, it just suffices to say that to get to the OF prompt in a Mac, you
have to press a combination keys during the time that your Mac gives a chime
when you turn it on. At that moment, you have to press (simulaneously) Cmd +
Option + O + F. (Note: the Cmd key is the key that has an Apple drawn on it,
usually on the side of the space bar).&lt;/p&gt;

&lt;h1&gt;Limitations of Open Firmware&lt;/h1&gt;

&lt;p&gt;Differently from usual BIOSes of x86 computers, Open Firmware &lt;em&gt;can&lt;/em&gt; read the
contents of a partition in your HD (or other devices), as long as it is
formatted in the original HFS format (&lt;em&gt;not&lt;/em&gt; in HFS+ or one of its
descendents).&lt;/p&gt;

&lt;p&gt;This is the reason why some older versions of Linux create an HFS partition
in your HD, even if you don&#39;t intent to run or use anything besides Linux.
The &lt;code&gt;yaboot&lt;/code&gt; bootloader consists of, among other things, one binary that is
understandable by OpenFirmware. That binary is a file called &lt;code&gt;yaboot&lt;/code&gt;, after
the name of the booloader.&lt;/p&gt;

&lt;p&gt;As an aside, you have to indicate to OF what is the file that you want it to
load during the boot process, so that it knows what to do. The way to
indicate this is to &quot;bless&quot; the file (and the folder that contains it).
Some ways to bless a file are to, for example, use the &lt;code&gt;bless&lt;/code&gt; command in
MacOS X or the &lt;code&gt;hattrib -b&lt;/code&gt; command from hfsutils.&lt;/p&gt;

&lt;p&gt;Files in an HFS filesystem have two attributes that many other filesystems
don&#39;t: a creator ID (the &quot;application&quot; that created the file) and the type
ID (which determines what kind of file it is).&lt;/p&gt;

&lt;p&gt;OpenFirmware, in particular, looks for files with the type &lt;code&gt;tbxi&lt;/code&gt; for the
bootstrap process.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;yaboot&lt;/code&gt; binary is loaded by OF into memory and, then, control is passed
to the yaboot program, which then reads its configuration file
(&lt;code&gt;yaboot.conf&lt;/code&gt;) from the same folder where the binary was in. The file
&lt;code&gt;yaboot.conf&lt;/code&gt; contains instructions for yaboot to do its job. The file
yaboot.conf is &lt;em&gt;very&lt;/em&gt; similar in construction to configurations of an older
bootloader for x86 computers, &lt;code&gt;lilo.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, in a way similar to what LILO requires, after you install some new
kernel, change some parameter in the configuration file, etc., you have to
run a program that will set up everything so that the boot process can know
of your new configuration. With LILO, this command was called &lt;code&gt;lilo&lt;/code&gt;, while
with yaboot the command is called &lt;code&gt;ybin&lt;/code&gt; (which, essentially, takes care of
putting &lt;code&gt;yaboot.conf&lt;/code&gt; in the bootstrap/HFS partition and blesses the
&lt;code&gt;yaboot&lt;/code&gt; binary).&lt;/p&gt;

&lt;h1&gt;Going to GRUB2&lt;/h1&gt;

&lt;p&gt;One of the characteristics of yaboot (which is left as an exercise to the
reader to determine if it is a drawback or not) is exactly the way that
changes in the configuration have to be copied to the special HFS partition:
the step of running &lt;code&gt;ybin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;GRUB2 (and its older sibling, GRUB legacy) do away with that: during
boot-time, it can understand the filesystems that you have in your computer
and interactively load whatever you want from there, also from a
command-line like OF, before any (regular) operating system has even been
started.&lt;/p&gt;

&lt;p&gt;But how do you &lt;em&gt;start&lt;/em&gt; GRUB2? Well, the way that this is performed is
copying a binary to that special HFS partition. Here things start to be
hairy, because GRUB2 has a lot of functionality, but it comes at the price
of it consuming a lot of space (especially if you are using encrypted
partitions or some kind of logical volume managements with some journalling
filesystem that allows files to be compressed etc. on top of it).  The list
goes on.&lt;/p&gt;

&lt;p&gt;Usually, that special HFS partition only has 800KB, which, BTW, is the size
of an old 3.5&quot; floppy used with older Macs (note: due to some contraints on
partitions and aligments of such partitions on cylinders, it is not uncommon
for disk partitioning software to create partitions slighly larger than
800KB, but &lt;em&gt;not&lt;/em&gt; much larger than that).&lt;/p&gt;

&lt;p&gt;A full-featured binary of GRUB2 to be placed on that HFS partition can have
much more than those 800KB. But how do you get that binary, in the first
place? And how do you fit that in the HFS partition?&lt;/p&gt;

&lt;h2&gt;Creating the GRUB2 binary&lt;/h2&gt;

&lt;p&gt;To answer the first question, you have to construct it from your
&lt;code&gt;grub-ieee1275&lt;/code&gt; package (I&#39;m assuming here that you are using Debian or
Ubuntu, but similar instructions may apply to other distributions). Then, a
first step would be to create such binary with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; mkdir /tmp/foo
 cd /tmp/foo
 cp -a /usr/lib/grub/powerpc-ieee1275/* .
 grub-mkimage -O powerpc-ieee1275 -o ../grub.img *.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last command of these create an executable named &lt;code&gt;grub.img&lt;/code&gt; that is
callable from OF and which contains every module from &lt;code&gt;grub-ieee1275&lt;/code&gt;.  This
executable that I call here &lt;code&gt;grub.img&lt;/code&gt; is called, in GRUB2 parlance,
&lt;em&gt;the core image&lt;/em&gt; and it it seems to be named &lt;code&gt;core.img&lt;/code&gt; in many systems.&lt;/p&gt;

&lt;p&gt;On my system, with those commands, the binary &lt;code&gt;grub.img&lt;/code&gt; is about 1208KB,
which is 50% larger than that 800KB partition. And you would like it to be
&lt;em&gt;much&lt;/em&gt; smaller, becase you want to still have your &lt;code&gt;yaboot&lt;/code&gt; bootloader by
default while you are evaluating your bootloaders (or using it as a backup
plan).&lt;/p&gt;

&lt;p&gt;As GRUB2 follow a modular design, you can mix and match the features that
you want. This already hints you to the way we can fit it in the HFS
partition, and it is always the same story: just trim the fat.&lt;/p&gt;

&lt;h2&gt;Creating the configuration file&lt;/h2&gt;

&lt;p&gt;You will also have to have GRUB2 configuration&#39;s file (or you will have to
play with way more commands than you&#39;d want to). An important distinction
here is that you usually have 2 or more partitions on your Mac:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the special bootstrap/HFS partition where OF is going to look at (I&#39;ll
call it &lt;code&gt;/dev/hda2&lt;/code&gt; here);&lt;/li&gt;
&lt;li&gt;the partition where your &lt;code&gt;/&lt;/code&gt; filesystem resides (denoted by &lt;code&gt;/dev/hda3&lt;/code&gt;
here);&lt;/li&gt;
&lt;li&gt;some partition to hold &lt;code&gt;/boot&lt;/code&gt; (I don&#39;t have one of these, but let&#39;s say
that it is &lt;code&gt;/dev/hda7&lt;/code&gt; for our discussion purposes), usually containing
your kernels and initial ramdisks.&lt;/li&gt;
&lt;li&gt;other partitions.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With this in mind, you can With Let&#39;s say that this last one, in Linux
parlance, is &lt;code&gt;/dev/hda3&lt;/code&gt; (as is the case of this author), and optionally a
partition where your Linux kernel resides (people usually use it to store
the &lt;code&gt;/boot&lt;/code&gt; subtree of a Linux filesystem). Let&#39;s say that this last one is
&lt;code&gt;/dev/hda7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, you would compose something like the following as a configuration file
for GRUB2 (named &lt;code&gt;grub.cfg&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;insmod part_apple
insmod ext2
set root=&#39;(hd,apple7)&#39;

menuentry &quot;Linux&quot; {
    linux /vmlinux root=/dev/hda3
    initrd /initrd
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are one two important points here that deserve more comments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Note that, &lt;strong&gt;differently&lt;/strong&gt; from a regular x86 system, in a Mac system with
only one HD the way that you specify an HD does &lt;em&gt;not&lt;/em&gt; have a trailing
zero. For instance, in the case above of the variable &lt;code&gt;root&lt;/code&gt;, we have
&lt;code&gt;(hd,apple7)&lt;/code&gt;, while in a &quot;common PC&quot; we would have the &lt;code&gt;(hd&lt;/code&gt; part
replaced with &lt;code&gt;(hd0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&#39;s something that you should make your distribution aware of, if they
aren&#39;t yet.&lt;/p&gt;

&lt;p&gt;As an addendum, I don&#39;t know how it works with systems with more than one
HD, as I only have (PowerPC) Macs that are notebooks. If you can share any
experiences, please do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One point of caution here: what GRUB2 calls &lt;code&gt;root&lt;/code&gt; is not necessarily the
root of your filesystem (i.e., the partition that holds &lt;code&gt;/&lt;/code&gt;), but the
&lt;em&gt;device&lt;/em&gt; that everything that is &quot;not fully qualified&quot; is interpreted as
being relative to.&lt;/p&gt;

&lt;p&gt;The &quot;not fully qualified&quot; above means anything that is not prefixed with
&lt;a href=&quot;http://www.gnu.org/software/grub/manual/grub.html#Device-syntax&quot;&gt;GRUB&#39;s device notation&lt;/a&gt;.
As an example, &lt;code&gt;(hd,apple2)/boot/vmlinux&lt;/code&gt; if fully qualified for GRUB&#39;s
purpose, while &lt;code&gt;/boot/vmlinux&lt;/code&gt; is not.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;The next step is to just copy the files &lt;code&gt;grub.img&lt;/code&gt; and &lt;code&gt;grub.cfg&lt;/code&gt; to the
special HFS partition. You can do that using &lt;code&gt;hmount&lt;/code&gt;, &lt;code&gt;hcopy&lt;/code&gt;, and
&lt;code&gt;humount&lt;/code&gt; or you can use the regular Linux &lt;code&gt;hfs&lt;/code&gt; module to copy to that
partition.&lt;/p&gt;

&lt;p&gt;Then, boot your system, get into the OF prompt and execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boot hd:2,grub.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the &lt;code&gt;2&lt;/code&gt; above is a reference to my HFS partition. Substitute that with
yours, appropriately. You will then see the common (familiar?) GRUB prompt
and, from there, everything else that you know will (hopefully) work.&lt;/p&gt;

&lt;h1&gt;The list of modules that &quot;Works for Me(TM)&quot;&lt;/h1&gt;

&lt;p&gt;As I mentioned above, I use a subset of all modules that come with
&lt;code&gt;grub-ieee1275&lt;/code&gt; to create my &lt;code&gt;grub.img&lt;/code&gt; binary. Here is the list of modules
that I use and that gives me a reasonably sized bootloader:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bitmap.mod        datehook.mod  gzio.mod         lsmmap.mod      reboot.mod          terminal.mod
bitmap_scale.mod  datetime.mod  halt.mod         memdisk.mod     regexp.mod          test.mod
blocklist.mod     echo.mod      help.mod         memrw.mod       relocator.mod       trig.mod
boot.mod          elf.mod       hexdump.mod      minicmd.mod     scsi.mod            true.mod
bufio.mod         ext2.mod      hfs.mod          msdospart.mod   search.mod          video.mod
cat.mod           fat.mod       hfsplus.mod      normal.mod      search_fs_file.mod  video_fb.mod
cmp.mod           font.mod      ieee1275_fb.mod  part_apple.mod  search_fs_uuid.mod  videoinfo.mod
configfile.mod    fshelp.mod    linux.mod        part_msdos.mod  search_label.mod
cpio.mod          gettext.mod   loadenv.mod      parttool.mod    setjmp.mod
crypto.mod        gfxmenu.mod   loopback.mod     probe.mod       sleep.mod
date.mod          gfxterm.mod   ls.mod           read.mod        suspend.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just for the record, my &lt;code&gt;grub.img&lt;/code&gt; file has 624KB, and that can certainly be
shrunk.&lt;/p&gt;

&lt;h1&gt;The command line that &quot;Works for Me(TM)&quot; to create the image&lt;/h1&gt;

&lt;p&gt;Actually, I lied when I told you that I used the lines above to create my
&lt;code&gt;grub.img&lt;/code&gt; file, because I&#39;m lazy and I don&#39;t want to type the &lt;code&gt;.img&lt;/code&gt;
extension. I also &lt;em&gt;embed&lt;/em&gt; my configuration file in the binary that I create
with GRUB2, so that I don&#39;t have two files to copy to my HFS partition, but
only one. I do that with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grub-mkimage -c grub.cfg -o ../grub -O powerpc-ieee1275 -d . *.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK. No more lies here.&lt;/p&gt;

&lt;p&gt;The nice aspect of GRUB is that one you install that image, you don&#39;t have
to touch that HFS partition anymore: you simply update your regular
filesystem&#39;s &lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt; file (which is usually performed when you
install a new kernel, at least with Debian) and you&#39;re ready to go.&lt;/p&gt;

&lt;p&gt;The good way to do that is to use a minimal configuration file embedded in
your &lt;code&gt;grub&lt;/code&gt; binary in your HFS partition that will hook into the system&#39;s
&lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt; to read newer kernels and leave the HFS partition (and
your system&#39;s NVRAM) alone.&lt;/p&gt;

&lt;p&gt;Here is what I am using right now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;search --no-floppy --fs-uuid --set=root 35d26869-f7c9-4852-a9b8-100314560c34
set prefix=($root)/boot/grub
configfile /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will, of course, want to modify the file above as you install newer
kernels (perhaps even that unsupported operating system from that fruity
company, who knows?). Don&#39;t forget to change the UUID&#39;s, and partition
numbers to fit your needs.&lt;/p&gt;

&lt;p&gt;Well, that&#39;s it. I hope that it helps somebody out there, as the information
that I got otherwise was way outdated, incomplete, etc. to keep up with
GRUB2 from these days. Now, let&#39;s go patch the tools that we have so that
not everybody who wants to use GRUB2 have to learn about its workings.&lt;/p&gt;

&lt;p&gt;Oh, of course, you can now have your kernels in ext4, btrfs, xfs
etc. partitions without the fear that your bootloader won&#39;t load them.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>I am going to DebConf 10</title>

	<id>http://cynic.cc/blog//posts/i-am-going-to-debconf-10/</id>

	<link href="http://cynic.cc/blog//posts/i-am-going-to-debconf-10/"/>






	<category term="debian" />

	<category term="development" />

	<category term="fonts" />

	<category term="free-software" />

	<category term="hacks" />

	<category term="powerpc" />

	<category term="web-of-trust" />


	<updated>2010-07-18T06:34:40Z</updated>
	<published>2010-07-18T06:34:40Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;I just bought my tickets today to NYC and I am glady to say that I am going to Debconf 10.&lt;/p&gt;

&lt;p&gt;[caption id=&quot;attachment_55&quot; align=&quot;aligncenter&quot; width=&quot;200&quot; caption=&quot;I am going to DebConf10&quot;]&lt;a rel=&quot;attachment wp-att-55&quot; href=&quot;http://localhost/blog/2010/07/18/i-am-going-to-debconf-10/im_going_to_debconf10/&quot;&gt;&lt;img class=&quot;size-full wp-image-55 &quot; title=&quot;im_going_to_debconf10&quot; src=&quot;http://localhost/blog/wp-content/uploads/2010/07/im_going_to_debconf10.png&quot; alt=&quot;I am going to DebConf10&quot; width=&quot;200&quot; height=&quot;101&quot;  /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;The tickets have this information:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;GRU-&amp;gt;JFK:&lt;/strong&gt; Departure: 2010-07-30, 21:25; Arrival: 2010-07-31, 6:10, Flight AA950&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;JFK-&amp;gt;GRU:&lt;/strong&gt; Departure: 2010-08-09, 21:40; Arrival: 2010-08-10, 8:35, Flight AA951&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This represents a personal milestone for me, as I have many plans for the conference. In fact, this will be a trip of many &quot;firsts&quot; for me:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;this will be my first international trip by airplaine.&lt;/li&gt;
    &lt;li&gt;this will be my first DebConf ever (despite the fact that I could not apply for the &lt;a href=&quot;http://upsilon.cc/~zack/blog/posts/2010/04/the_DebConf_Newbies_initiative/&quot;&gt;DebConf Newbies initiative&lt;/a&gt;, due to my visa interview being delayed until the 7th of this month).&lt;/li&gt;
    &lt;li&gt;this will be the first time to see many people with whom I work together for some years now, but have not yet had the opportunity to meet in person.&lt;/li&gt;
    &lt;li&gt;this will be a nice opportunity to work hard on &lt;a href=&quot;http://lwn.net/Articles/396079/&quot;&gt;some issues that threaten the PowerPC port&lt;/a&gt; of Debian.&lt;/li&gt;
    &lt;li&gt;this will be a nice opportunity to do some QA work with some packages that I would like to have sponsored; also to &lt;a href=&quot;http://bugs.debian.org/551955&quot;&gt;upload&lt;/a&gt; some of the &lt;a href=&quot;http://bugs.debian.org/580005&quot;&gt;fonts&lt;/a&gt; that I &lt;a href=&quot;http://git.debian.org/?p=pkg-fonts/ttf-paratype-sans.git&quot;&gt;already packaged&lt;/a&gt; (or &lt;a href=&quot;http://bugs.debian.org/581839&quot;&gt;intend&lt;/a&gt; to &lt;a href=&quot;http://bugs.debian.org/589094&quot;&gt;take care&lt;/a&gt;) and that will be maintained under the &lt;a href=&quot;http://pkg-fonts.alioth.debian.org/&quot;&gt;Debian Fonts Task Force umbrella&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;this will be a very nice opportunity to get myself in a &quot;big&quot; &lt;a href=&quot;http://en.wikipedia.org/wiki/Strongly_connected_component&quot;&gt;strongly connected component &lt;/a&gt; of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Web_of_trust&quot;&gt;Web-of-Trust&lt;/a&gt; with as many arcs as feasible, by means of the &lt;a href=&quot;http://people.debian.org/~anibal/ksp-dc10/ksp-dc10.html&quot;&gt;key signing party.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;and many, many other things that I would like to do for the project.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am thankful for the DebConf team sponsoring both accomodation and food.  It is highly appreciated.&lt;/p&gt;

&lt;p&gt;See you in NYC! Any hints that you may happen to have are warmly welcome.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>Simple Annotations on Compiling a Linux Kernel for an Embedded Platform</title>

	<id>http://cynic.cc/blog//posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/</id>

	<link href="http://cynic.cc/blog//posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/"/>






	<category term="configuration" />

	<category term="debian" />

	<category term="development" />

	<category term="embedded" />

	<category term="free-software" />

	<category term="hacks" />

	<category term="kernel" />

	<category term="kurobox" />

	<category term="linux" />

	<category term="powerpc" />


	<updated>2011-03-12T03:52:56Z</updated>
	<published>2010-05-12T03:54:52Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;Here are some facts distilled from my experience with preparing kernels to
some embedded platforms. In other words, this is some of the stuff that is
usually presumed to be known, but that you won&#39;t find compiled in many
places, unfortunately.&lt;/p&gt;

&lt;p&gt;I am writing them here in the hope that they can be useful to other folks
trying to compile their kernel to embedded devices (and I would venture to
say that these &quot;non-standard&quot; platforms would become more popular in the
future).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;some machines don&#39;t have monitors, keyboards etc. They may only have
network connections (e.g., ethernet) and USB ports. In such cases, it
console&quot; called a netconsole. It can be enabled with the options: is quite
handy to see how the machine is booting with a &quot;virtual console&quot; called a
netconsole. It can be enabled with the options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CONFIG_NETCONSOLE=y
  CONFIG_NETPOLL=y
  CONFIG_NET_POLL_CONTROLLER=y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You have to tell the kernel where to send the messages that would,
otherwise, be presented on a screen. For sending them over the network, just
tell the kernel to use the command line option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    netconsole=6666@192.168.11.150/,@192.168.11.149/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, you can easily connect from another (more comfortable?) computer
with something like (this connection is made via UDP, not TCP):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ip addr add 192.168.11.149/24 broadcast 192.168.11.255 dev eth0
    nc -u -n -p 6666 192.168.11.150 6666
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;while some popular bootloaders for desktops are LILO and GRUB, many other
platforms use other bootloaders: yaboot, quik, bootx, silo, refit, etc. In
the case of embedded platforms, one that is popular is &quot;das uBoot&quot;, which
needs a special kind of kernel image, a &lt;code&gt;uImage&lt;/code&gt;, instead of a regular
&lt;code&gt;{b}zImage/vmlinu{x,z}&lt;/code&gt; image. (Well, actually, some other arches need
images in other formats, like &lt;code&gt;vmlinux.coff&lt;/code&gt; etc). Fortunately, the
kernel&#39;s makefile knows about some such arches and it generates the
correct image---but it is the task of the packager/distributor to find if
those images are needed or not. For the KuroBox HD/HG, all that is needed
is a simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  cp $LINUXPATH/arch/powerpc/boot/uImage $BUILT_ROOT/boot/uImage-$VERSION
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;some extra care is needed when generating a kernel for such arches: the
tree of the devices which the kernel needs does not seem to be built
automatically (this is the case of the the KuroBox HD/HG). Something like
this is needed after the compilation of the kernel proper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ./scripts/dtc/dtc -I dts -O dtb -V 16 -o $BUILT_ROOT/boot/kuroboxHD.dtb-$VERSION ./arch/powerpc/boot/dts/kuroboxHD.dts
  ./scripts/dtc/dtc -I dts -O dtb -V 16 -o $BUILT_ROOT/boot/kuroboxHG.dtb-$VERSION ./arch/powerpc/boot/dts/kuroboxHG.dts
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to cross compile a kernel, don&#39;t forget to set the appropriate environment
options, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make clean
  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make oldconfig
  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make menuconfig
  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make all modules
  INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make modules_install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It won&#39;t hurt if you use a concurrency setting (like -j3 or more) when
compiling all and modules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The uBoot command line (accessed via the network) can be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ext2load ide ${hdpart} ${ldaddr} ${hdfile}
  ext2load ide ${hdpart} 7f0000 boot/kuroboxHD.dtb
  setenv bootargs root=/dev/sda1 netconsole=6666@192.168.11.150/,@192.168.11.149/
  bootm ${ldaddr} - 7f0000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first two lines tell uBoot to load the both the kernel and the device
tree from the disk to the memory, the third line sets the kernel command
line (familiar to users of the &quot;common&quot; arches) and the fourth line
actually boots the kernel once it is loaded in the memory. Here, ${hdpart}
is the partition where the kernel image ${hdfile} should be loaded from
(usually in the form 0:1, to mean partition 1 from the disk 0), ${ldaddr}
is the memory address where the kernel should be loaded to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Something that is handy, no matter what size your machine has: the use of
ext4 (and, in particular, delayed allocation) with ext{2,3}
filesystems. To use it, just put this in your kernel configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CONFIG_EXT4_USE_FOR_EXT23=y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for daemons like avr-evtd, that need access to a serial port (so
that the user can turn off the device by pressing the power button),
enable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CONFIG_SERIO=y
  CONFIG_SERIO_SERPORT=y
  CONFIG_SERIAL_8250=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, you will always have to ssh into the system, become root, and
issue something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  shutdown -h now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is an inconvenience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is very important to set the Real Time Clock options right and this may
not be that obvious for some non-x86 platforms. In particular, for a
KuroBox HD, I&#39;m using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CONFIG_RTC_CLASS=y
  CONFIG_RTC_HCTOSYS=y
  CONFIG_RTC_HCTOSYS_DEVICE=rtc0
  CONFIG_RTC_INTF_SYSFS=y
  CONFIG_RTC_INTF_PROC=y
  CONFIG_RTC_INTF_DEV=y
  CONFIG_RTC_DRV_RS5C372=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last option is, perhaps, the tricky one, and varies from system to
system. Knowing which one to enable is a matter of knowing the specs of
your system and, if not known, discovery by trial-and-error. (For x86
systems, usually &lt;code&gt;CONFIG_RTC_DRV_CMOS=y&lt;/code&gt; is sufficient).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


	</content>



</entry>
<entry>
	<title>2001-07-17</title>

	<id>http://cynic.cc/blog//posts/2001-07-17/</id>

	<link href="http://cynic.cc/blog//posts/2001-07-17/"/>






	<category term="hardware" />

	<category term="life" />

	<category term="linux" />

	<category term="powerpc" />


	<updated>2013-05-08T00:28:38Z</updated>
	<published>2001-07-17T03:00:00Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;This is the day that shouldn&#39;t have happened --- it was bad right
from start. First of all, I couldn&#39;t sleep well because I dreamt
with some perl scripts that didn&#39;t work and they took me almost all
my sleep time (or so it seemed). Then, my kind neighbor started
making lots of noises and I couldn&#39;t keep sleeping.&lt;/p&gt;

&lt;p&gt;But the worst part of the day was still coming.&lt;/p&gt;

&lt;p&gt;I went to my uncle&#39;s shop to get a new SCSI HD and he lent me a 4GB
one, more than enough to hold both Linux and MacOS 8. I turned the
thing on and it started making noises like the one I used
yesterday, which wasn&#39;t good. Anyway, I left it on and decided to
install MacOS on it. It was progressing nicely and I was getting
happier and happier, but then the whole system froze. I turned the
power off and tried to install Linux. At least this time Linux saw
the HD and all partitions that it had (7, I think).&lt;/p&gt;

&lt;p&gt;To install Linux, I used some CVS bootfloppies that will become
bootfloppies of Debian woody. While trying to make the brand new
ext2 filesystem, I got a kernel panic. I tried again. This time, I
went up to the point of choosing which kernel modules I wanted. I
was getting happy again. But then, when I chose the module for the
ethernet card, a new kernel panic. Ouch!&lt;/p&gt;

&lt;p&gt;I then tried to install MacOS again and a new freeze. Tried again,
new freeze. Then, I noticed that the HD was getting hot and put a
fan near it. I don&#39;t know if it was coincidence or not, but after
that, I could finish the installation of MacOS. Ok, so time to boot
this thing with no CDs in the CD-ROM drive. Nothing. Grrrr.&lt;/p&gt;

&lt;p&gt;Things got strange after I tried to put the Linux PPC CD that I had
burned and it didn&#39;t work. Washed the CD and no boot. But it did
some days ago! It was not scratched, had no fingerprints and was
absolutely clean. But couldn&#39;t boot. I tried using the floppies
again, but this time, another surprise: the HD &lt;em&gt;was&lt;/em&gt; recognized,
but a partition scan timed out, Linux told that it could not read
read its beginning and that it assumed that the size of the HD was
1GB, and showed &lt;em&gt;no&lt;/em&gt; partitions on the drive. On the other hand,
MacOS is able to see it just before formatting it, perhaps because
it re-scans the SCSI bus. Changing the SCSI-id of the drive didn&#39;t
help. Is that the reason why it can&#39;t boot from the HD? Perhaps.&lt;/p&gt;

&lt;p&gt;Anyway, my desire of seeing this thing encoding MP3s, using KDE, a
brand new browser and typing some texts with LaTeX seems a bit
farther than what I realized at first. I will still keep trying to
make this damn thing work, but I&#39;m not confident anymore that I&#39;ll
succeed. Well, I&#39;ll talk to my uncle tomorrow, perhaps and see if
the other Mac behaves the same way. Enough for a day already.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>2001-07-16</title>

	<id>http://cynic.cc/blog//posts/2001-07-16/</id>

	<link href="http://cynic.cc/blog//posts/2001-07-16/"/>






	<category term="blind-guardian" />

	<category term="life" />

	<category term="linux" />

	<category term="music" />

	<category term="netbsd" />

	<category term="powerpc" />

	<category term="study" />


	<updated>2013-05-08T00:27:02Z</updated>
	<published>2001-07-16T03:00:00Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;Busy day. Woke up as soon as possible to see
&lt;a href=&quot;http://www.ime.usp.br/~jose/&quot;&gt;my advisor&lt;/a&gt; and decide the furture
of my Master&#39;s degree. Then, at almost 4pm, had a ridicule lunch,
met my girlfriend and went to a shopping mall with her. While I was
there, I was attacked by the capitalist bug and had to buy me
something. I was looking for some &lt;a href=&quot;http://www.ora.com&quot;&gt;O&#39;Reilly&lt;/a&gt;
books, but they were way too expensive (I was expecting to get a
&lt;a href=&quot;http://perl.ora.com&quot;&gt;Perl&lt;/a&gt; book or
&lt;a href=&quot;http://www.oreilly.com/catalog/lpython/&quot;&gt;Learning Python&lt;/a&gt;, but
decided not to).&lt;/p&gt;

&lt;p&gt;I talked to the salesman and asked if he had
&lt;a href=&quot;http://www.csse.monash.edu.au/~damian/&quot;&gt;Damian Conway&#39;s&lt;/a&gt;
&lt;a href=&quot;http://www.manning.com/Conway/&quot;&gt;Object Oriented Perl&lt;/a&gt;, but he told
me &lt;em&gt;&quot;the printing was cancelled&quot;&lt;/em&gt;. I told him that
&lt;a href=&quot;http://www.manning.com&quot;&gt;Manning Publications&lt;/a&gt; wasn&#39;t told about
that and got some garbage as a response that I didn&#39;t even make an
effort to save in any part of my brain.&lt;/p&gt;

&lt;p&gt;Since I had the mission to buy myself something, I got me
&lt;a href=&quot;http://www.blind-guardian.com&quot;&gt;Blind Guardian&lt;/a&gt;&#39;s &quot;Nightfall in
Middle Earth&quot;. Wonderful.&lt;/p&gt;

&lt;p&gt;To finish my day, I went to my uncle&#39;s store and got another SCSI
HD for the Powermac, but it was also defective. But now I&#39;m a lot
more confident that the problem isn&#39;t with the mac itself, but with
the HDs (the mac would boot with the HD attached and see it while
in MacOS 8, but trying to install it on the HD evidenced that the
head was hitting the platters -- tomorrow I&#39;ll be getting another
SCSI HD). Let me cross my fingers. If I actually install Linux on
it, I&#39;ll grab &lt;a href=&quot;http://www.penguinppc.org/~benh/&quot;&gt;BenH&lt;/a&gt;&#39;s 2.4.6
Linux and get &quot;my&quot; mac a fresh kernel.&lt;/p&gt;

&lt;p&gt;Oh, NetBSD 1.5.1
&lt;a href=&quot;http://www.netbsd.org/Releases/formal-1.5/NetBSD-1.5.1.html&quot;&gt;is released&lt;/a&gt;.
I still can&#39;t get ISO images, though.&lt;/p&gt;

	</content>



</entry>
<entry>
	<title>2001-07-11</title>

	<id>http://cynic.cc/blog//posts/2001-07-11/</id>

	<link href="http://cynic.cc/blog//posts/2001-07-11/"/>






	<category term="apple" />

	<category term="debian" />

	<category term="hardware" />

	<category term="linux" />

	<category term="macos" />

	<category term="powerpc" />


	<updated>2013-05-08T00:21:05Z</updated>
	<published>2001-07-11T03:00:00Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;Some weeks ago, my uncle that sells and fixes computers,
&lt;a href=&quot;mailto:startmicro@uol.com.br&quot;&gt;Isaac&lt;/a&gt;, got a pair of old
&lt;a href=&quot;http://www.info.apple.com/applespec/applespec.taf?RID=204&quot;&gt;Power Macintosh 9500/180MP&lt;/a&gt;
from a customer. His customer said that if he fixed one of them,
the other would be his as payment. So he kind of fixed one of them
and lent me the other, which means that I&#39;m now going to play with
both
&lt;a href=&quot;http://download.info.apple.com/Apple_Support_Area/Apple_Software_Updates/English-North_American/Macintosh/System/Mac_OS_8.1_Update/&quot;&gt;MacOS 8.0&lt;/a&gt;
and a Unix-like OS with it.&lt;/p&gt;

&lt;p&gt;It came with two PowerPC 604e processors of 180MHz (or so the specs
say), 64MB of RAM (where am I going to get more of it?), an
&lt;a href=&quot;http://www.ati.com&quot;&gt;ATI&lt;/a&gt; graphics card with 2MB of memory, and a
4-speed CD-ROM. It features two SCSI interfaces, an Ethernet
adapter, a MacOS 8.0 CD, a keyboard and the (in)famous 1-button
mouse from &lt;a href=&quot;http://www.apple.com&quot;&gt;Apple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is the first dual-head machine over which I am able to get my
greasy pawls. As welcome additionals, it is also the first time I
get to play with a non-x86 machine in a System Administrator
position (of course, I also use Solaris 2.x with
&lt;a href=&quot;http://www.ime.usp.br/&quot;&gt;my University&#39;s&lt;/a&gt; workstations, but that
doesn&#39;t count, since I&#39;m just a luser there).&lt;/p&gt;

&lt;p&gt;The PowerPC machines are actually quite different from their ix86
counterparts. First of all, they don&#39;t have a BIOS setup, but you
can interface with the hardware before any Operating System gets
loaded with
&lt;a href=&quot;http://playground.sun.com/1275/home.html&quot;&gt;Open Firmware&lt;/a&gt;, which is
written in FORTH. You should be able to get into OF pressing
Command-Option-O-F while the machine chimes, or right after it
chimes. But, to be honest, I still couldn&#39;t see the damned OF
prompt, despite my numerous attempts and ways of pressing the
combination of keys.&lt;/p&gt;

&lt;p&gt;Anyway, the first task to make it work would, obviously, be to
install MacOS 8.0 on this machine. Well, this sounds great, but my
experience with it is a tiny bit different.&lt;/p&gt;

&lt;p&gt;The first of the problems is that the machine doesn&#39;t boot while
the HD is connected to it. Weird, huh? I agree. If, on the other
hand, I disconnect the machine, put the MacOS CD on the CD drive,
let MacOS start loading and &lt;em&gt;immediately&lt;/em&gt; plug the power connector
on the HD, &lt;em&gt;then&lt;/em&gt; the machine will boot MacOS and see the HD,
partition it and I am able to install MacOS on it. But on the next
reboot, I am not able to get things working without disconnecting
the power of the HD again.&lt;/p&gt;

&lt;p&gt;Conformed to be working with the machine this way, I downloaded a
huge load of ISO images for it, including the
&lt;a href=&quot;http://www.netbsd.org/Ports/macppc/&quot;&gt;NetBSD port for PPC&lt;/a&gt;, the
&lt;a href=&quot;http://www.debian.org/ports/powerpc/&quot;&gt;Debian 2.2r3 port for PPC&lt;/a&gt;,
&lt;a href=&quot;http://www.linuxppc.org&quot;&gt;LinuxPPC 2000 Q4&lt;/a&gt; and
&lt;a href=&quot;http://www.yellowdoglinux.com&quot;&gt;Yellow Dog Linux 2.0&lt;/a&gt;. I made sure
the images I downloaded all had the right MD5SUMs and even used
rsync on the images after I had downloaded them, just to make sure
everything got alright.&lt;/p&gt;

&lt;p&gt;Well, of all those images, the only one that booted on the Apple
was the &lt;a href=&quot;http://www.linuxppc.org&quot;&gt;LinuxPPC 2000 Q4 image&lt;/a&gt;, which
was quite frustrating. The Debian CDs that I burned (I burned two:
one from a US site and another with non-US programs) didn&#39;t even
boot, including boot floppies generated from them -- quite a shame,
since that is, by far, my preferred operating system.&lt;/p&gt;

&lt;p&gt;Anyway, back to LinuxPPC. Seeing the machine boot with a
framebuffer with that little penguin holding a mug of beer and
telling me many things about the hardware that I didn&#39;t even know
is actually quite refreshing (no pun intended). After the kernel
boots, an X installer is started, a little menu appears and
things... ...STOP! That&#39;s right. After investigating a bit, I
discovered that programs are segfaulting consistenly in a reboot,
but in different reboots, the applications that segfault are not
necessarily the same that segfaulted in previous reboots. This may
be a hint that its memory is not OK, although I&#39;m not so sure.&lt;/p&gt;

&lt;p&gt;Anyway, I subscribed to the
&lt;a href=&quot;http://lists.debian.org/#debian-powerpc&quot;&gt;Debian PowerPC mailing list&lt;/a&gt;
and I have been following it daily, learning a lot of things about
PPC in general.&lt;/p&gt;

&lt;p&gt;My faith is restored now that
&lt;a href=&quot;http://penguinppc.org/~eb/&quot;&gt;Ethan Benson&lt;/a&gt; has posted CVS-snapshots
of the woody boot floppies on his page &lt;em&gt;AND&lt;/em&gt;, with them, I &lt;strong&gt;can&lt;/strong&gt;
boot my machine.&lt;/p&gt;

&lt;p&gt;I still have those problems with the HD, although its days are
counted on this machine: I&#39;ll be soon getting a 2GB SCSI HD for it
(I hope!), so that I can continue my journey of installing Debian
potato/woody (or any other operating system!) on this machine. I
can&#39;t wait to have the beautiful &lt;a href=&quot;http://www.kde.org/&quot;&gt;KDE 2.2&lt;/a&gt;,
the highly anticipated &lt;a href=&quot;http://www.debian.org/&quot;&gt;Mozilla&lt;/a&gt; and the
amazing &lt;a href=&quot;http://www.qmail.org/&quot;&gt;qmail&lt;/a&gt; running on this machine
(things that this machine designers never dreamt of running on this
old machine).&lt;/p&gt;

	</content>



</entry>

</feed>
