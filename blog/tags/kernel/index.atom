<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged kernel</title>
<link href="/blog/tags/kernel/"/>
<link href="/blog/tags/kernel/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Rogério Brito's Digital Junkyard</name>

</author>




<id>/blog/tags/kernel/</id>

<subtitle type="html">Rogério Brito&#39;s Digital Junkyard</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20101112">ikiwiki</generator>
<updated>2010-11-10T09:13:35Z</updated>
<entry>
	<title>Simple Annotations on Compiling a Linux Kernel for an Embedded Platform</title>

	<id>/blog/posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/</id>

	<link href="/blog/posts/simple-annotations-on-compiling-a-linux-kernel-for-an-embedded-platform/"/>






	<category term="/tags/debian" />

	<category term="/tags/embedded" />

	<category term="/tags/hacks" />

	<category term="/tags/kernel" />

	<category term="/tags/kurobox" />

	<category term="/tags/linux" />

	<category term="/tags/powerpc" />


	<updated>2010-11-10T09:13:35Z</updated>
	<published>2010-05-12T03:54:52Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;Here are some facts distilled from my experience with preparing kernels to some embedded platforms. In other words, this is some of the stuff that is usually presumed to be known, but that you won&#39;t find compiled in many places, unfortunately.&lt;/p&gt;

&lt;p&gt;I am writing them here in the hope that they can be useful to other folks trying to compile their kernel to embedded devices (and I would venture to say that these &quot;non-standard&quot; platforms would become more popular in the future).&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;some machines don&#39;t have monitors, keyboards etc. They may only have network connections (e.g., ethernet) and USB ports. In such cases, it console&quot; called a netconsole. It can be enabled with the options: is quite handy to see how the machine is booting with a &quot;virtual console&quot; called a netconsole. It can be enabled with the options:
&lt;blockquote&gt;&lt;code&gt;
CONFIG_NETCONSOLE=y
CONFIG_NETPOLL=y
CONFIG_NET_POLL_CONTROLLER=y
&lt;/code&gt;&lt;/blockquote&gt;
You have to tell the kernel where to send the messages that would, otherwise, be presented on a screen. For sending them over the network, just tell the kernel to use the command line option:
&lt;blockquote&gt;&lt;code&gt;
netconsole=6666@192.168.11.150/,@192.168.11.149/
&lt;/code&gt;&lt;/blockquote&gt;
This way, you can easily connect from another (more comfortable?) computer with something like (this connection is made via UDP, not TCP):
&lt;blockquote&gt;&lt;code&gt;
ip addr add 192.168.11.149/24 broadcast 192.168.11.255 dev eth0
nc -u -n -p 6666 192.168.11.150 6666
&lt;/code&gt;&lt;/blockquote&gt;
&lt;/li&gt;
    &lt;li&gt;while some popular bootloaders for desktops are LILO and GRUB, many other platforms use other bootloaders: yaboot, quik, bootx, silo, refit, etc. In the case of embedded platforms, one that is popular is &quot;das uBoot&quot;, which needs a special kind of kernel image, a uImage, instead of a regular {b}zImage/vmlinu{x,z} image. (Well, actually, some other arches need images in other formats, like vmlinux.coff etc). Fortunately, the kernel&#39;s makefile knows about some such arches and it generates the correct image---but it is the task of the packager/distributor to find if those images are needed or not.For the KuroBox HD/HG, all that is needed is a simple:
&lt;blockquote&gt;&lt;code&gt;
cp $LINUXPATH/arch/powerpc/boot/uImage $BUILT_ROOT/boot/uImage-$VERSION
&lt;/code&gt;&lt;/blockquote&gt;
&lt;/li&gt;
    &lt;li&gt;some extra care is needed when generating a kernel for such arches: the tree of the devices which the kernel needs does not seem to be built automatically (this is the case of the the KuroBox HD/HG). Something  like this is needed after the compilation of the kernel proper:
&lt;blockquote&gt;&lt;code&gt;
./scripts/dtc/dtc -I dts -O dtb -V 16 -o $BUILT_ROOT/boot/kuroboxHD.dtb-$VERSION ./arch/powerpc/boot/dts/kuroboxHD.dts
./scripts/dtc/dtc -I dts -O dtb -V 16 -o $BUILT_ROOT/boot/kuroboxHG.dtb-$VERSION ./arch/powerpc/boot/dts/kuroboxHG.dts
&lt;/code&gt;&lt;/blockquote&gt;
&lt;/li&gt;
    &lt;li&gt;to cross compile a kernel, don&#39;t forget to set the appropriate environment options, like:
&lt;blockquote&gt;&lt;code&gt;
INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make clean
INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make oldconfig
INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make menuconfig
INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make all modules
INSTALL_MOD_PATH=$BUILT_ROOT ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- make modules_install
&lt;/code&gt;&lt;/blockquote&gt;
It won&#39;t hurt if you use a concurrency setting (like -j3 or more) when compiling all and modules.&lt;/li&gt;
    &lt;li&gt;The uBoot command line (accessed via the network) can be something like:
&lt;blockquote&gt;&lt;code&gt;
ext2load ide ${hdpart} ${ldaddr} ${hdfile}
ext2load ide ${hdpart} 7f0000 boot/kuroboxHD.dtb
setenv bootargs root=/dev/sda1 netconsole=6666@192.168.11.150/,@192.168.11.149/
bootm ${ldaddr} - 7f0000
&lt;/code&gt;&lt;/blockquote&gt;
The first two lines tell uBoot to load the both the kernel and the device tree from the disk to the memory, the third line sets the kernel command line (familiar to users of the &quot;common&quot; arches) and the fourth line actually boots the kernel once it is loaded in the memory. Here, ${hdpart} is the partition where the kernel image ${hdfile} should be loaded from (usually in the form 0:1, to mean partition 1 from the disk 0), ${ldaddr} is the memory address where the kernel should be loaded to.&lt;/li&gt;
    &lt;li&gt;Something that is handy, no matter what size your machine has: the use of ext4 (and, in particular, delayed allocation) with ext{2,3} filesystems. To use it, just put this in your kernel configuration file:
&lt;blockquote&gt;&lt;code&gt;
CONFIG_EXT4_USE_FOR_EXT23=y
&lt;/code&gt;&lt;/blockquote&gt;
&lt;/li&gt;
    &lt;li&gt;Support for daemons like avr-evtd, that need access to a serial port (so that the user can turn off the device by pressing the power button), enable:
&lt;blockquote&gt;&lt;code&gt;
CONFIG_SERIO=y
CONFIG_SERIO_SERPORT=y
CONFIG_SERIAL_8250=y
&lt;/code&gt;&lt;/blockquote&gt;
Otherwise, you will always have to ssh into the system, become root, and issue something like:
&lt;blockquote&gt;&lt;code&gt;
shutdown -h now
&lt;/code&gt;&lt;/blockquote&gt;
which is an inconvenience.&lt;/li&gt;
    &lt;li&gt;It is very important to set the Real Time Clock options right and this may not be that obvious for some non-x86 platforms. In particular, for a KuroBox HD, I&#39;m using:
&lt;blockquote&gt;&lt;code&gt;
CONFIG_RTC_CLASS=y
CONFIG_RTC_HCTOSYS=y
CONFIG_RTC_HCTOSYS_DEVICE=rtc0
CONFIG_RTC_INTF_SYSFS=y
CONFIG_RTC_INTF_PROC=y
CONFIG_RTC_INTF_DEV=y
CONFIG_RTC_DRV_RS5C372=y
&lt;/code&gt;&lt;/blockquote&gt;
The last option is, perhaps, the tricky one, and varies from system to system. Knowing which one to enable is a matter of knowing the specs of your system and, if not known, discovery by trial-and-error. (For x86 systems, usually CONFIG_RTC_DRV_CMOS=y is sufficient)&lt;/li&gt;
&lt;/ul&gt;

	</content>



</entry>

</feed>
